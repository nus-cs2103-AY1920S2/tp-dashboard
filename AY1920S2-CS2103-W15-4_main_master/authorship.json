[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d Pet Store Helper"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103-W15-4/main[image:https://travis-ci.org/AY1920S2-CS2103-W15-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "https://ci.appveyor.com/project/shenghaoc/main[image:https://ci.appveyor.com/api/projects/status/7vh2vthj4okxwq76/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "https://circleci.com/gh/AY1920S2-CS2103-W15-4/main[image:https://circleci.com/gh/AY1920S2-CS2103-W15-4/main.svg?style\u003dsvg[CircleCI]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103-W15-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103-W15-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "https://app.netlify.com/sites/romantic-jepsen-ed679c/deploys[image:https://api.netlify.com/api/v1/badges/ec53095e-7378-4b7b-85da-e08551ec089a/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* This is a desktop application that targets pet store owners. It has a GUI but most of the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* It is an application intended for pet store owners to manage their activities. (e.g. add pets, manage schedule, etc.)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* This application is based on 2 main systems, one that manages pets, and another one that organises showering schedules."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Original source of the code is from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 7,
      "shenghaoc": 4,
      "-": 28
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "mainClassName \u003d \u0027clzzz.helper.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        events \"failed\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    archiveName \u003d \u0027[CS2103-W15-4][PetStoreHelper].jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-name\u0027: \u0027Pet Store Helper\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103-W15-4/main\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "tianqi77": 1,
      "shenghaoc": 2,
      "-": 150
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ":imagesDir: images/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Pet Store Helper was developed by the https://github.com/AY1920S2-CS2103-W15-4[AY1920S2-CS2103-W15-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d Zhu Ruicong"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::zhu-ruicong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "{empty}[http://github.com/Zhu-Ruicong[github]] [\u003c\u003czhu-ruicong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d Zhao Mingjian"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::umaikaze.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "{empty}[http://github.com/umaikaze[github]] [\u003c\u003cumaikaze#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Responsibilities: Dev Ops, UI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d Chen Shenghao"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::shenghaoc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "{empty}[http://github.com/shenghaoc[github]] [\u003c\u003cshenghaoc#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d Lim Wei Yang, Dylan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::limdylan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "{empty}[http://github.com/limdylan[github]] [\u003c\u003climdylan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d Zhao Tianqi"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::tianqi77.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "{empty}[http://github.com/tianqi77[github]] [\u003c\u003ctianqi77#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Responsibilities: Dev Ops + Threading"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 4,
      "limdylan": 2,
      "Zhu-Ruicong": 17,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103-W15-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Email us* : You can also reach us at `e0324850 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d PetTracker - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W15-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "A project often depends on third-party libraries. For example, Pet Tracker depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d Pet Store Helper - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: images/dev-guide"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W15-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "By: `AY1920S2-CS2103-W15-4`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Run the `clzzz.helper.Main` and try a few commands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". \u003c\u003cRunning-Tests,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `AY1920S2-CS2103-W15-4/main` repo."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S2-CS2103-W15-4/main`), you should do the following:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Configure the site-wide documentation settings in `build.gradle`, such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Replace the URL in the attribute `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the diagrams folder at `docs/diagrams`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`Main` has two classes called `Main` and `MainApp`. It is responsible for,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`Commons` represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `UI`: The UI of the App."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `Logic`: The command executor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `Model`: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `Storage`: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//tag::logic_diagram[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//end::logic_diagram[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `deletepet 1`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".Component interactions for `deletepet 1` command"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::design-ui[]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Calendar-Class-Diagram]]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Structure of the Calendar Component in UI"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::UiCalendarDiagram.png[]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Structure of the DisplayList Component in UI"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::UiDisplayListDiagram.png[]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The UI consists of a `MainWindow` class that is made up of parts which can be classified broadly into 2 groups:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* (Group 1) Parts that are always displayed at all times, which include `CommandBox`, `FeedbackDisplay`, `StatusBarFooter`, etc. These parts appear above `MainWindow` in the class diagram for UI."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* (Group 2) Parts that are selectively displayed, depending on the command entered by the user. Only some of these parts will be shown at any one instance. These include the `Calendar` and `DisplayList` components, and `OverallStatistics`. These parts appear beneath `MainWindow` in the class diagram for UI."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "All the UI classes, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the `MainWindow` is specified in `MainWindow.fxml`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limdylan"
        },
        "content": "In addition, each UI part has been styled using CSS. The custom CSS styling rules are defined in multiple CSS stylesheets, which can be found in the `src/main/resources/view/stylesheets` folder."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The `UI` component does the following:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Listens for changes to `Model` data to update the UI with the modified data."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Handles a returned `CommandResult` to perform additional actions, e.g. show the help window, exit the program, display the appropriate part or component from Group 2, etc."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::design-ui[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".  `Logic` uses the `PetTrackerParser` class to parse the user command."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a pet)."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"deletepet 1\")` API call."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".Interactions Inside the Logic Component for the `deletepet 1` Command"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "NOTE: The lifeline for `DeletePetCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// tag::Model[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "_Written by Zhu Ruicong_"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* stores the Pet Store Helper data. Note that the Pet Tracker keeps track of a UniquePetList, which in turn maintains the Pet system, Schedule system and Inventory(FoodCollection) system."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* exposes an `ObservableList\u003cPet\u003e`, an `ObservableList\u003cSlot\u003e`, and an `ObservableList\u003cFoodCollection\u003e` that are unmodifiable and can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// end::Model[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "// tag::Storage[]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Chen Shenghao_"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* can save the Pet Tracker data in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "// end::Storage[]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::implementation-display[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Display switching feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The display mechanism is facilitated by an `ObservableList` of `DisplayItem` s called `filteredDisplayItems`, which is an attribute stored in `ModelManager`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Any class that is to be displayed as an item in a list implements the `DisplayItem` interface. This interface has a single method named `getDisplaySystemType` which returns the type of system to be displayed. In our program, the `Pet`, `Slot`, `FoodCollection`, and `FoodAmountAndPet` classes implement this interface."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Given below is an example usage scenario and how the display mechanism behaves at each step."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limdylan"
        },
        "content": "**Step 1**. The user opens the app the the 1st time. A few things happen at start-up:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- In `Model` (`ModelManager`), `filteredDisplayItems` is created, and is set to bind to `filteredPets`. This way, `filteredDisplayItems` contains all the elements of `filteredPets`, and any changes to `filteredPets` will also be automatically propogated to `filteredDisplayItems`."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- In the `MainWindow`, a `DisplayListPanel` and a `CalendarPanel` are initialized. The `DisplayListPanel` is created with `filteredDisplayItems` as its backing list, while the `CalendarPanel` will be initialized with the `List` of `Slot` s obtained from `logic.getPetTracker().getSlotList()`."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The `resultDisplayPlaceholder` component in the `MainWindow` is set to display the `DisplayListPanel`. As such, the user sees the list of pets as the initial display."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limdylan"
        },
        "content": "**Step 2**. The user executes `display c` to have the slots displayed in calendar view. Since `filteredDisplayItems` is not used for displaying the calendar, it is not changed when the `display` command calls `Model#changeDisplaySystem`. Upon receiving back the result of the command in `MainWindow`, `resultDisplayPlaceholder` is changed to display the `CalendarPanel` instead of the `DisplayListPanel`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The following sequence diagrams shows how the display is switched to calendar:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Sequence diagram for switching display to calendar"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::DisplayCalendarSequenceDiagram0.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Excecution of \"display c\" in Logic component"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::DisplayCalendarSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limdylan"
        },
        "content": "NOTE: The lifeline for `CommandResult`, `DisplayParser`, and `DisplayCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limdylan"
        },
        "content": "**Step 3**. The user executes `display s` to have the slots displayed in a list. The `display` command calls `Model#changeDisplaySystem`, which causes `filteredDisplayItems` to re-binded to `filteredSlots`. Since the program should now display a list of items instead of a calendar, upon receiving back the result of the command in `MainWindow`, `resultDisplayPlaceholder` is changed to display the `DisplayListPanel` from `CalendarPanel`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The following sequence diagrams shows how the display is switched to slots list view:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Sequence diagram for switching display to slots list view"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::DisplaySlotSequenceDiagram0.png[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Excecution of \"display s\" in Logic component"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::DisplaySlotSequenceDiagram1.png[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limdylan"
        },
        "content": "NOTE: The lifeline for `CommandResult`, `DisplayParser`, and `DisplayCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The following activity diagram summarizes what happens in `MainWindow#executeCommand` upon the return of a command result:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::DisplaySwitchingActivityDiagram.png[]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::implementation-display[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// tag::schedule[]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d Schedule feature"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "_Written by Zhao Mingjian_"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "The schedule feature uses instances of class `Slot` to organise bathing schedule for the pets. Each `Slot` contains a"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "starting time of the bath, stored internally as a `LocalDateTime`, and the duration of the bath stored internally as a"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Duration`. It stores a reference to the `Pet` in the `ModelManager` as specified by the user."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Given below is an example usage scenario and how the `Schedule` mechanism behaves at each step."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 1. The user launches the application with some pets stored (`Garfield`, for instance). `ObservableList\u003cSlot\u003e`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "in `Schedule` is currently empty."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 2. The user executes `addslot n/Garfield t/1/4/2020 1200 d/120` command to create a `Slot` for `Garfield`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The `AddSlotCommandParser` calls `parsePet()` in `SlotParserUtil`, which then takes in the `Model` passed in to find a"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "reference for the specific `Pet` with `Model.getPet()`. Prior to this stage, if the name string is invalid, a"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`ParseException(MESSAGE_INVALID_PETNAME)` will be thrown. Or the program cannot find the `Pet` in the model, a"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`ParseException(MESSAGE_PET_DOES_NOT_EXIST)` will be thrown. This ensures that every slot created actually points to an"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "existing `Pet` found in `PetTracker`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "If `parsePet()` fails its execution, no new `Slot` is created."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 3. New `Slot` is created."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 4. The user now decides that this exact slot should be occupied by another pet, and decides to edit it, executing"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "the `editslot` command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 5. `SlotParserUtil` is used again to create a reference to a pet in the `ModelManager`."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 6. The user now decides that they need to see slots occupied by a particular pet on a particular date, executing"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "the `findslots n/Garfield t/1/4/2020` command."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 7. The `FindSlotCommand` reduces the two predicates* and pass it to `ModelManager` to create a filtered list of"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "slots."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*The `FindSlotCommand` uses the following classes which both inherit `Predicate\u003cSlot\u003e` to search for the user specified"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "slots:"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* `SlotPetNamePredicate()` -- Internally stores the `Name` to search for, and compares it with"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`getPet().getName().fullName`."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* `SlotDateTimePredicate()` -- Internally stores the `LocalDateTime` to search for (Timing will be ignored), and"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "compares it with `getDate()`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "The activity diagram below is an illustration of the flow of events that happen in the model component when the steps"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "above occurs."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "image::FindSlotParserDiagram.png[]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Given below is an example usage scenario that demonstrates how the `Schedule` system integrates with the `Pet` system."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 1. The user launches the application with a pet stored: `Garfield`. A single instance of `Slot` occupies"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`ObservableList\u003cSlot\u003e` in `Schedule`, whose parameters are: `petName: Garfield`,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`dateTime: 11/4/2020 1200`, `duration: 40`. Upon launch, a `PetListChangeListener` will be attached to `internalList` of"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`UniquePetList`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 2. The user executes `deletepet 1` command to delete `Garfield` from the `UniquePetList`. When user deletes the pet,"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "function `onChanged` in `PetListChangeListener` is called. This function calls `removeExcessSlot` within the"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`PetListChangeListener` for each pet removed."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 3. `removeExcessSlot` calls `remove` in `Schedule` to remove slots based on the name of the removed pet."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Step 4. The user now have successfully removed `Garfield` and all the slots the pet used to occupy."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "The sequence diagram below is an illustration of the flow of events that happen in the model component when the steps"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "above occurs."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "image::SlotAutoUpdateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How schedule stores the pets internally"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* **Alternative 1 (current choice):** Makes a reference to the the memory address in `ModelManager` ."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Pros: When the pet is edited, it is easier to update the corresponding slot. Also reduces save file size and"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "conserve system memory as there will be no duplicate information."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Cons: Harder to implement and test. Testing requires a sample list of pets to be instantiated first."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* **Alternative 2:** Simply create a new Pet."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Pros: Easy to implement and test (A refactor of `Pet`), low coupling with `Model`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Cons: Harder to synchronize with any changes in `UniquePetList`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// end::schedule[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::implementation-calendar[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Calendar feature"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The class diagram for calendar-related components, as shown in \u003c\u003cCalendar-Class-Diagram\u003e\u003e previously, is reproduced in this section for convenience."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Structure of the Calendar Component in UI"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::UiCalendarDiagram.png[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The construction of the calendar is accomplished by the `construct()` method in `CalendarPanel`. Based on the list of all slots in the system, it determines which type of `CalendarRegion` is to be placed at which position of the `GridPane` in `CalendarPanel`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Respective `CalendarRegion` s marked out"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::CalendarViewAnnotated.png[]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limdylan"
        },
        "content": "In tha above annotated screenshot, rectangles with the following border color correspond to the following `CalendarRegion` (from left to right, on 7/4/2020):"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Purple: `CalendarDate`. It is used to display the day and date of slots in the same row, and it always positioned to the left."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Green: `CalendarSlot`. It constitutes a single slot."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Yellow: `CalendarBuffer`. It acts a buffer between other regions, for padding purposes."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Blue: `CalendarConflict`. It represents a region of more than two or more conflicted slots."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The following activity diagram outlines the rough flow of `calendarPanel#construct`:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Activity diagram for construction of calendar."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::CalendarConstructActivityDiagram.png[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".Activity diagram for creating new `CalendarRegion` for slot(s) in holding."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::CalendarNewRegionHoldingActivityDiagram.png[]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`CalendarRegion` s are created sequentially, from left to right (increasing time of day), then top to bottom (increasing date). Each time a `CalendarRegion` is created, it is placed onto a `GridPane` based on the row index, and its starting time."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Construction of calendar upon addition / deletion / edition of slot(s)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* **Alternative 1 (current choice):** Clear all components in `CalendarPanel` and redraw everything."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Pros: Relatively simpler to implement."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Cons: Might take a long time to draw if system has many slots."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* **Alternative 2:** Modify only the component that is related the affected slot."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Pros: Better performance."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Cons: More complex implementation needed to determine and resolve  conflicts, if any."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::implementation-calendar[]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// tag::inventory_feature[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Inventory feature"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "_Written by Zhu Ruicong_"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The Inventory feature gives a summary of all the food items involved in a pet tracker system."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "It is supported by `FoodCollection` which resembles a collection of food of the same type and `FoodCollectionList` which is a list of these collections."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "A `FoodCollectionList` is stored as an attribute of `UniquePetList` for the following reasons:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* The list of `FoodCollection` items associated with a `UniquePetList` can be directly derived from the `UniquePetList` itself."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Changes in FoodCollection occurs only if there is a change in `UniquePetList#internalList`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Data stored in `FoodCollectionList` is exposed to `ModelManager` through `UniquePetList` and `PetTracker` as an unmodifiable `ObservableList\u003cFoodCollection\u003e`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "`ModelManager` then passes the list of `FoodCollection` to UI for display as a list of `DisplayItem` when `display i` is called."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// tag::inventory_diagram[]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "The following shows a typical usage scenario that involves the Display Inventory feature."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 1: The user launches the application. A `UniquePetList` is initialized in `PetTracker`, upon which a `FoodCollectionList` item is created to store the food data of the pets in the list(if it is an empty list, `FoodCollectionList` is also stores an empty list of `FoodCollection`)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 2: The user executes \u0027display i\u0027 command. The `display` command calls Model#ChangeDisplaySystem() and the `i` display type determines the displayed list is switched to `ObservableList\u003cFoodCollection\u003e`. `Model#getFilteredDisplayList()` then acquires the list and sends it to Ui unit for display."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 3: The user inputs a command that modifies the `UniquePetList`, e.g \u0027editpet 1 f/catfood:100\u0027. `UniquePetList#internalList` is an instance of `ObservableList\u003cPet\u003e`. Thus when it is modified, a `ListChangeListener\u003cPet\u003e` is woken up and it calls `UniquePetList#updateFoodCollectionList()` to update the `FoodCollectionList` according to the modified Pet list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "The sequence diagram below is an illustration of the flow of events that happen in the logical component when `Step 2` above occurs."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ".Interactions Inside the Logic Component for the `display i` Command"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::DisplayInventorySequenceDiagram.png[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Note that there is no explicit initialization or update for `FoodCollection` in `FoodCollectionList`. `FoodCollectionList` is synchronized to the list of pet(`UniquePetList#internalList`) in the `UniquePetList` through `ListChangeListener\u003cPet\u003e`, which is triggered whenever there is a change in the pet list. The sequence diagram below and the steps illustrates this process:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 1: `UniquePetList` passes its `internalList`(referred to as `petList` in the sequence diagram below)."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 2: `FoodCollectionList` creates a new `FoodCollectionList` object `temp` and extracts `temp#internalList`."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Step 3: Replaces the content in the current `internalList` with the content in the extracted `temp#internalist`."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ".Interactions Inside Model Class when `ListChangeListener\u003cPet\u003e` is triggered"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "image::FoodCollectionListChangeSequenceDiagram.png[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// end::inventory_diagram[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Maintaining the collection of food in a pet tracker"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Alternative 1(current choice): Maintains the list as an attribute of `UniquePetList`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Pros: Easier to initialize and update the list."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Cons: Less extendability. Adding additional food items in inventory(independent of pet list) is difficult."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Alternative 2: Maintains a list of food collections separate from `UniquePetList`."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Pros: Higher Extendability that supports more independent operations of FoodCollection List."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Cons: More difficult to constantly update and maintain the food collection list should food list changes."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Updating the collection of food when pet list is modified."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Alternative 1(current choice): Replace the entire list by a new food collection list created from the updated pet list."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Pros: Easy to implement and no adaptation is required for different types of modification of pet list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Cons: Computationally intensive when there is a huge pet list."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* Alternative 2: Modify `FoodCollection` affected by the command."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Pros: Less computationally intensive and more responsive given a large database."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Cons: Adaptations for each pet related commands is required since the food list can be affected in different ways.(e.g addition, modification, deletion)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "// end::inventory_feature[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//tag::conflict[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d Conflict feature"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "_Written by Zhao Tianqi_"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "The conflict feature shows a list of all slots that has overlapping time period."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* It makes uses of `SlotConflictPredicate` which implements `SlotPredicate` to filter slots that has a conflicting timing with some other slots."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* If the screen is displaying shortlisted slots, `conflics` only shows slots with conflicts among the shortlisted list. Otherwise, it shows conflicts in the full slot list"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* The command automatically switch display to slots."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Below is a scenario of using `conflicts` command:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Step 1: The user inputs \"conflicts\" in the command line. The Logic component processes the input and creates a new instance of `ConflictCommand`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Step 2: The `ConflictCommand` access `filteredSlots` in `Model`, and create a new instance of `SlotConflictPredicate` with `filteredSlots`."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Step 3: `Model` filters slots that is conflicting among the `filteredSlots` using the `SlotConflictPredicate`."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Step 4: `ConflictCommand` changes `currentDisplaySystemType` in `Model` to `DisplaySystemType.SCHEDULE` such that the window will display shortlisted conflicting slots."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ".Interactions Inside the Logic Component for the `conflicts` Command"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "image::ConflictSequenceDiagram.png[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to store slots and method of checking for conflicts:"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Alternative 1 (current choice): Store slots in a list, with pairwise comparison between elements to find out conflicts"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Pros: More straightforward in implementation"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Cons: The performance might not be scalable. Algorithm does not minimize the computation time."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Alternative 2: Store slots in an interval tree"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Pros: Searching for conflicting slots takes less time. The algorithm is more efficient."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Cons: Implementation of the data structure needs relatively high level of commitment."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//end::conflict[]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//tag::stats[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "_Written by Zhao Tianqi_"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "We are generating the overall statistics of Pet Store Helper and translate the data in a user-friendly manner."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* `OverallStats` under UI component handles the translation of three sets of data: list of pets, schedule, and list of inventory."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Data in `OverallStats` is obtained from `Logic`."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* The statistics displayed will automatically update if there is a change  in any related information."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "How we implemented overall statistic on UI:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* The statistics for pets are shown in a form of pie chart, while the pets are grouped according to their species."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* The schedule statistics is in the form of a timetable of recent 3 days. Each slot is represented as a shaded rectangle in the timetable."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* The inventory data are generated from the list of pets, and grouped together by their names, such that users have a better understanding of overall food consumption. The list of inventory is represented as a bar chart."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Here is the process of how the overall statistics is displayed to the user:"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Step 1: The user key in the command \u0027stats\u0027, then the Logic component processes the input and creates an instance of `StatsCommand`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "The `StatsCommand` first calls `Model#updateAll()` to make sure that the model will update `filteredPets`, `filteredSlots`, and `filteredFoodCollections` to show the full list of `Pet`, `Slot` and `FoodCollection` in the `PetTracker`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "After that, the `StatsCommand` calls `Model#changeDisplaySystem(DisplaySystemType.STATISTICS`) such that the application will later switch the window to show `OverallStats`."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "In the Ui component, there is a new instance of `OverallStats` created, while `Model#getFilteredPets`, `Model#getFilteredSlots`, and `Model#getFilteredFoodCollections` are passed in the instance for processing. `OverallStats` then generates diagrams according to the data passes in."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Step 2: The user inputs a command that modifies the UniquePetList, e.g \u0027editpet 1 s/cat\u0027. The `CommandResult` of any `EditPetCommand` has `type` with `DisplaySystemType.NO_CHANGE`. The Ui component identifies the `type` in the `CommandResult` and then refresh the window if it is `NO_CHANGE`. In this case, the window will refresh and create another new instance of `OverallStats` with the updated list of pets. Therefore the window always shows statistics of the most updated list of pets, slots and food collections."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Following is the sequential diagram of the command `stats`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ".Interactions Inside the *Logic* Component for the `stats` Command"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "image::StatsLogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ".Interactions Inside the *Ui* Component for the `stats` Command"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "image::StatsUiSequenceDiagram.png[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How to update diagrams when there are changes"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Alternative 1 (current choice): Refresh the screen"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Pros: Easy to implement and only need to refer to `model` to get data."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Cons: Takes time to process the whole lists of data even though there is only one small change in one of the item (pets, slots or foo collection). This approach might be time consuming when the data size is too large."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Alternative 2: Make use of `Listener` to detect change in `UniquePetList` and make changes accordingly"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Pros: Avoid unnecessary processing of data. e.g. The diagrams need not be regenerated when there is no change in pet species, pet food, and recent schedule."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Cons: More complicated implementation. There might be more coupling between `OverallStats` under Ui component and Listener class under Model component."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//end::stats[]"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "//tag::backup_and_load_feature[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d Back up and load feature"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Chen Shenghao_"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The back up/load mechanism is facilitated by `Storage`."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "`Storage` is extended to implement the following operations:"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* `savePetTracker#(ReadOnlyPetTracker, LocalDateTime)` -- calls `savePetTracker#(ReadOnlyPetTracker, Path)` after converting LocalDateTime to Path"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* `savePetTracker#(ReadOnlyPetTracker, Path)` -- saves pet tracker data to specified path"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The back up/load mechanism follows the exact same steps taken when data is saved after each operation and read at initialization. This ensures maximum compatibility and reduces the need for additional code."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "`backup` should never fail unless the saving of data after every operation also fails. For \u0027load\u0027, there are two additional caveats, the specified file should exist and be in the correct format. This is unlike the reading of data at initialization which simply resorts to an empty file instead if these issues occur."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The following sequence diagram shows how the backup operation works:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "image::BackUpSequenceDiagram.png[]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The following sequence diagram shows how the load operation works:"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "image::LoadSequenceDiagram.png[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How back up \u0026 load executes"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* **Alternative 1 (current choice):** Executed by Command, following general pattern for Command"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Pros: Easy to implement, able to rely on established pattern for Command."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Cons: Storage is exposed to classes in the `parser` package, which should not have access to its methods"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* **Alternative 2:** Executed by LogicManager, which already saves data to hard disk after every operation"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Pros: Storage does not have to be passed to classes in the `parser` package"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Cons: Requires passing instruction back to LogicManager, actual operation performed after end of Command#execute(), unable to obtain reliable success/error message."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "//end::backup_and_load_feature[]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "just its size"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We use Asciidoc for writing documentation."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We chose Asciidoc over Markdown because Asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We used Gradle to render `.adoc` files locally to preview the end results of edits. Also, we downloaded the AsciiDoc plugin for Intellij, which allowed use to preview the changes made to the `.adoc` files in real-time."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We used the PlantUML plugin for Intellij to create and update the UML diagrams."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We used Travis for deployment of Github Pages for publishing documentation."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We use Google Chrome for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The `build.gradle` file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "limdylan"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "limdylan"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The files in `docs/stylesheets` are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "limdylan"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The files in `docs/templates` controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "limdylan"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Modifying the template files in `docs/templates` requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "limdylan"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "limdylan"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `clzzz.helper.commons.util.StringUtilTest`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `clzzz.helper.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `clzzz.helper.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We use Gradle for build automation."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We use Travis CI and AppVeyor to perform Continuous Integration."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "limdylan"
        },
        "content": "We use Coveralls to track the code coverage."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "limdylan"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Update the version number in `MainApp.java`."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Generate a JAR file using Gradle."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Project dependencies are managed by Gradle, and are not included in this repository."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "limdylan"
        },
        "content": "List of dependencies:"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* https://github.com/FasterXML/jackson[Jackson]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* https://junit.org/junit5/[JUnit 5]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* https://openjfx.io/[JavaFX]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// tag::appendix[]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "_Written collaboratively, collated by Zhao Mingjian_"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* has a need to manage their pet store with a variety of animals and features"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* has a need to make schedules for pet grooming and ensure no-conflict in the scheduling"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*Value proposition*: manage pets, pet consumables and schedule faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "_Written collaboratively, collated by Zhao Mingjian_"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Low (nice to have) - `* *`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |key in a new pet, enter its breed, age, size and food consumption."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|keep track of the pets I have in my store and their details"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |delete a pet |remove pets that I have sold or no longer taking care of"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |find a pet by name, species or tags |locate details of the pets without having to go through the entire list"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |keep track of pet food, cleaning products and other consumables |not run low on items needed to keep the pets healthy"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |schedule when to bathe my own (in-store) pets|avoid clashes in bathing schedule"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* * *` |user |view the schedule and see which slots are available to bathe the customers\u0027 pets |avoid clashes in bathing schedule"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* *` |user |see which free slots are available for grooming |avoid clashes in grooming"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|`* *` |user |view a statistical summary of the pets, stocks and schedule |handle logistics of the store more efficiently"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|`* *` |user |add photos for the pets in store to illustrate |easier to make a mental link between the actual pets in the store and the names"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|`* *` |user |keep track of the cost and revenue generated by each pet |so to buy the more popular ones in next restock"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "_Written by Zhao Mingjian_"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "(For all use cases below, the *System* is the `PSH` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d Use case: Delete pet"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "1.  User requests to list pets"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "2.  PSH shows a list of pets"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "3.  User requests to delete a specific pet in the list"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "4.  PetTracker deletes the pet"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** 3a1. PSH shows an error message."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d Use case: Removing a bathing slot"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "1. User requests to show schedule"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "2. PSH shows  schedule of that day"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "3. User requests of delete a slot at a specified timing"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "4. PSH deletes the slot"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "+"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* 2a. There is currently conflict in the scheduling (i.e. One slot begins before the previous one ends), the latter slot is shown in red."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* 3a. The given timing does not exist."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "+"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** 3a1. PSH shows an error message."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".  Should be able to hold up to 500 pets + items in total without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "_Applied from AB3 by Zhao Mingjian_"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "   Expected: Shows the GUI with a set of sample pets and slots. The window size may not be optimum."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Switching display"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Change display of the program"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Prerequisites: Program is pre-populated with the sample data of pets and slots."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `display s` +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program display is changed to show list of slots."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `display c` +"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program display is changed to show slots in calendar view."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `display i` +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program display is changed to show inventory."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `display p` +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program display is changed to back show list of pets."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `display x` +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program display does not change. Error message shown."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Other incorrect display commands to try: `display`, `display I`, `Display i` +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Adding a pet"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Adding a pet while all pets are displayed"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Prerequisites: Program is showing list of pets to (run `display p`)"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `addpet n/Alice g/female b/13/11/2015 s/dog f/Dog Food: 10 t/cute` +"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: A new pet \"Alice\" is added to the end of the pet list. Details of the newly added pet shown above the list of pets."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `addpet n/Alice g/female b/24/12/2015 s/rabbit f/Rabbit Food: 15 t/fluffy` +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: No pet is added. Error details shown above the list of pets."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Other incorrect addpet commands to try: `addpet n/Bubbles g/helicopter b/8/10/2015 s/cat f/Cat Food: 15 t/white`, `addpet n/Bubbles g/female b/78/10/2015 s/cat f/Cat Food: 15 t/white` +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "limdylan"
        },
        "content": "   Expected: No pet is added, with the relevant and appropriate error details shown above the list of pets."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d\u003d Deleting a pet"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ". Deleting a pet while all pets are displayed"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".. Prerequisites: Display all pets using the `display p` command. Multiple pets in the display."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".. Test case: `deletepet 1` +"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "limdylan"
        },
        "content": "   Expected: First pet is deleted from the list. Details of the deleted pet shown above the list of pets. Slots that the pet used to occupy is also deleted."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ".. Test case: `deletepet 0` +"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "limdylan"
        },
        "content": "   Expected: No pet is deleted. Error details shown above the list of pets. Slots remain the same."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".. Other incorrect delete commands to try: `deletepet`, `deletepet x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Adding a slot"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Adding a slot while all slots are displayed"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Prerequisites: Program is showing list of slots to (run `display s`). Program is pre-populated with the sample data of pets and slots."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `addslot n/Bob t/6/4/2020 1000 d/60` +"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: A new slot is added to slot list. Details of the newly added slot shown above the list of slots. Because it is the earliest of all slots, it appears at the 1st slot in the list."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `addslot n/Cindy t/67/4/2020 1000 d/60` +"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: No slot is added. Error details shown above the list of slots."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Other incorrect addslot commands to try: `addslot`, `addslot n/Duke t/6/4/2020 1130 d/60`, `addslot n/Cindy t/6/4/2020 2300 d/120` +"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "limdylan"
        },
        "content": "   Expected: No slot is added, with the relevant and appropriate error details shown above the list of slots."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Deleting a slot"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Deleting a slot while all slots are displayed"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Prerequisites: Program is showing list of slots to (run `display s`). Program is pre-populated with the sample data of pets and slots."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `deleteslot 1` +"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: First slot is deleted from the list. Details of the deleted slot shown above the list of slots."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `deleteslot 0` +"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: No slot is deleted. Error details shown above the list of slots."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Other incorrect deleteslot commands to try: `deleteslot`, `deleteslot x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d View conflicted slots"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Viewing slots with conflicts"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".. Prerequisites: Program is pre-populated with the sample data of pets and slots. +"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "limdylan"
        },
        "content": "   Initial view: On Mon 6/4/2020, there is a single slot occupied by \"Gru\" from 13:00 - 14:40 (as per the sample data). It is not in conflict."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `conflicts` +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program successfully shows no slots with message \"0 slots listed!\", as the sample data has no slots in conflict."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `addslot n/Bob t/6/4/2020 1400 d/60` +"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: A new slot is added to slot list. Details of the newly added slot shown above the list of slots. This newly added slot and the slot occupied by Gru are now marked as \"[CONFLICT]\""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "limdylan"
        },
        "content": "... Test case: `conflicts` +"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    Expected: Program successfully shows only the two slots on 6/4/2020 with message \"2 slots listed!\""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".. Prerequisites: List of pets is well populated."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".. Test case: changing pet name manually to an invalid name in pettracker.json +"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected: Data is not loaded. Start with an empty Pet Tracker."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ".. Test case: changing pet name of a slot manually to pet that does not exist in pettracker.json +"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Expected: Data is not loaded. Start with an empty Pet Tracker."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "// end::appendix[]"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 126,
      "limdylan": 400,
      "tianqi77": 71,
      "Zhu-Ruicong": 60,
      "shenghaoc": 56,
      "-": 295
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: images/learning-outcomes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 215
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d PetTracker - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W15-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ". Run the `clzzz.helper.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `AY1920S2-CS2103-W15-4/main` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `AY1920S2-CS2103-W15-4/main`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, PetTracker\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 6,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d Pet Tracker - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W15-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "e.g. `clzzz.helper.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "e.g. `clzzz.helper.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "e.g. `clzzz.helper.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 5,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d Pet Store Helper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: images/user-guide"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103-W15-4/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "By: `AY1920S2-CS2103-W15-4`      Since: `Feb 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Pet Store Helper (PSH) is for owners of pet stores who **prefer to use a desktop app for managing their store**. More importantly, PSH is **optimized for those who prefer to work with a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, PSH can help you get your work done faster than traditional GUI apps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "It is based on 2 main systems, one that manages pets, and another one that organises showering schedules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ".  Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Download the latest `.jar` file from link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Pet Store Helper."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::Welcome.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `display p` : Displays the list of all pets."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `addpet n/Teddy g/male b/01/01/2019 s/dog f/brand A:15 f/brand B:20 t/small t/lazy`: Adds a new pet with name `Teddy` and other details as given."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `display s` : Displays the current schedule as a list of slots."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `addslot n/Teddy t/10/4/2020 1300 d/90`: Adds a new showering slot for Teddy with details as given."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* `exit` : Exits the program."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": ".  Refer to \u003c\u003cCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Pet Tracker System"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Details about each pet kept track of are its name, gender, species, date of birth and dietary requirements. In addition, tags for each pet may also be added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::petView.png[]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Pet Food Inventory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "This shows the a list of all pet food (inventory) and the needed amount per week. Double-click on each food item to view the breakdown for each pet individually. This feature is integrated under the `display` feature as `display i`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::inventoryView.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::schedule-system[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Schedule System"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "There are 2 ways of displaying the slots tracked by the schedule system: either sequentially as a list of slots, or in the form of a calendar view."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Slots list view"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Slots displayed here are arranged in ascending chronological order, with the earliest slot displayed first. In the case where multiple slots start at the same time, the slot with the shortest duration is shown first. If both starting time and duration are the same, they are sorted by pet names in ascending alphabetical order."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::slotListView.png[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Conflicted slots are distinguished from regular slots from the \"[CONFLICT]\" label beside the slot index number."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This view is obtained by the command `display s`."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Calendar view"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The calendar view allows many more slots to be seen at once. From a quick glance, the relative durations and timings apart between slots can be seen."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Slots that fall on the same day are displayed on the same row. They are then positioned horizontally according to the time they start. The width taken up by each slot in this view is proportional to its duration."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "If there are conflicted slots, then the time period in which these conflicted slot lie in is simply rendered as single \"conflicted\" slot."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::calendarView.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Regular slots are indicated by the salmon-colored regions, while conflicted slots of the same time period are represented by the maroon-colored regions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This view is obtained by the command `display c`."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::schedule-system[]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The statistics of the pet store, which can be shown via `stats`, are:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The proportion of species of pets,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The planned schedule for the next 3 days, and"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- A breakdown of how many of each type of pet food is needed in a week."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::stats.png[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "// tag::backup-and-load[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d Back Up and Load"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The back up and load commands together allow data to be stored and managed directly."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Back up"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "To back up the current state of the pet store, enter the `backup` command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The file name is generated based on the current date and time and reported back."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "It is stored in the same directory as the default data file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "image::backup.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Load"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "To load a file, enter the `load` command followed by the file name."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The file should be stored in the same directory as the default data file."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "For example, after removing a few pets and slots, the screen will be different from when we backed up previously."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "image::load1.png[]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "In this case, entering `load 20200413_20_23_57` restores the system to its backed-up state."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "image::load2.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The file name can be any valid file name under the curent operating system and need not conform to the backup file naming scheme."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "// end::backup-and-load[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::limitations[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Limitations]]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Limitations"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- If the duration of a slot is sufficiently short, then information about the slot can be displayed only partially in calendar view. Workarounds available:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Hover the cursor over the slot, and a tooltip containing all the information about that slot will be shown."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Taking note of the index number of the slot, do `display s` and look up the slot with that index number."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Taking note of the date of the slot, search for that slot using `findslots`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::limitations[]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[Commands]]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limdylan"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Some Pet t/lazy` or as `n/Some Pet`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/cute`, `t/small t/white` etc."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- Parameters can be in any order e.g. if the command specifies `n/NAME g/GENDER`, `G/GENDER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Common / general commands"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help: `help`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Shows the help window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program: `exit`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::display[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Changing the display: `display`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Changes the display board to show the specified system."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Format: `display SYSTEM`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limdylan"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `SYSTEM` must be `p` (pets), `s` (slots list view), `c` (calendar view) or `i` (inventory). No other values are allowed."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limdylan"
        },
        "content": "****"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display p` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all **_p_**ets."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display s` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all **_s_**lots as a list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display c` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all slots in **_c_**alendar view."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display i` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays a list of all pet food (**_i_**nventory) and the needed amount per week."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limdylan"
        },
        "content": "See \u003c\u003cFeatures\u003e\u003e for examples of how the different types of display look like."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::display[]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data: `backup`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "All data is saved to the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "There is no need to save manually. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "However, it is possible to save a separate backup file through the `backup` command. +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "The file name is a timestamp in the format \"yyyyMMdd_HH_mm_ss\"."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d\u003d\u003d Retrieving data: `load`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Loads the specified file from the hard disk. +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Format: `load FILE_NAME`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* Loads the file with the specified `FILE_NAME`."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* The file name *must be a valid file name under the OS*."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* `load 20200402_21_54_52` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Loads the file 20200402_21_54_52.json from the hard disk."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* `load pettracker` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Loads the file pettracker.json from the hard disk."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "// tag::stats[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Statistics: `stats`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "_Written by Zhao Tianqi_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Provides statistics about the pet tracker, schedule system, and inventory. +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- There is a pie chart representing the ratio of different pet species. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- A timetable that shows an overall schedule for recent 3 days. +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- A bar chart that shows the weekly consumption of different pet food."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "// end::stats[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//tag::pet_commands[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Pet-related commands"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "_Written by Zhao Tianqi_"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a pet: `addpet`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Adds a pet to the pet tracker system."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Format: `addpet n/NAME g/GENDER b/DATE OF BIRTH s/SPECIES f/FOOD : AMOUNT [t/TAG]...`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- The date of birth must be in the format of d/M/yyyy, e.g. 01/01/2019, 1/7/2018"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- The gender must be either `female` or `male`. Letter case does not matter."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- Food is specified as a type of food complied with quantity of weekly consumption in an arbitrary unit. The food name and amount should be separated by a colon \":\". There can be more than 1 types of food for one pet."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- A pet can have any number of tags (including 0). Each tag must be restricted to one word ."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- The application ignores letter case of user input. The name, species, gender of pets, and name of food will be displayed in the format of  \"Xxx Xxx ...\"."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `addpet n/Garfield g/male b/01/01/2019 s/cat f/Brand A: 30 t/lazy t/lasagna`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Finding pets by names: `findpets`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Finds pets whose name contains any of the given keywords. The application will automatically change to the pet display system."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Format: `findpets PETNAME [MORE PETNAMES]...`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- At least one argument must be supplied."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Pets matching at least 1 keyword will be returned (i.e. `OR` search)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `findpets garfield odie` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Returns a list of pets, whose names either contain `garfield` or `odie` or both."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a pet: `editpet`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Edits any field of an existing pet in the system."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Format: `editpet INDEX  [n/NAME] [g/GENDER] [t/TAG]...`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limdylan"
        },
        "content": "****"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- If the app is displaying pets, the index refers to the index number shown in the displayed pets list, and must be a positive integer, e.g. 1, 2, 3, ... Otherwise, the index refers to the number in the whole pet list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- The existing field(s) of the pet will be removed, i.e adding of list of food and tags is not cumulative."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- You can remove all tags of a pet by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- Similarly to `addpet` command, pet name, species, gender, and name of food will be displayed in the format of \"Xxx Xxx...\"."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limdylan"
        },
        "content": "****"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display p` +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "`editpet 2 n/Coco b/02/01/2020 t/cuddly t/grey` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Overwrites information of the 2nd pet in the system with name \"Coco\", date of birth \"2 Jan 2020, and 2 tags of “cuddly”, “grey”."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `findpets garfield` +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "`editpet 2 n/Coco` +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Overwrites the name of the 2nd pet in the results of `findpets garfield` to \"Coco\""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `display s` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "`editpet 1 n/garfield`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Overwrites name of the 1st pet in the whole pet list to be \"Garfield\"."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a pet: `deletepet`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the specified pet from the system."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Format: `deletepet INDEX`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limdylan"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- If the app is displaying pets, the index refers to the index number shown in the displayed pets list, and must be a positive integer, e.g. 1, 2, 3, ... Otherwise, the index refers to the number in the whole pet list."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display p` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`deletepet 2` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the 2nd pet in the system."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findpets n/garfield` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`deletepet 2` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Deletes the 2nd pet in the results of the `findpets garfield` command."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `display i` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "`deletepet 2`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Deletes 2nd pet in the whole pet list."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "//end::pet_commands[]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// tag::schedule-commands[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Schedule-related commands"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limdylan"
        },
        "content": "_Written by Dylan Lim_"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a slot: `addslot`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Adds a new slot to the schedule."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Format: `addslot n/PETNAME t/DATETIME d/DURATION`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Adds a new showering slot for a pet, identified by its name. This given pet must already exist in the pet tracker system."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The Pet Store Helper does not allow slots to span across multiple days. This is to allow slots to be displayed properly in calendar view. As such, slots must start and end on the same day."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Unlike pets, duplicate slots (same pets, same datetimes, same durations) are allowed to be added in, so that the system remains flexible to use. Such slots, when added, would simply be indicated as conflicts."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Upon addition of slot, the display remains the same (e.g. if the program was showing the list of pets, it will continue to show that even after a slot is added). This is because the user may wish to continue referring to the pets while adding more slots."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Details about the arguments:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- The datetime must be in `d/M/yyyy HHmm` format."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* The time must be in 24-hour format."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The duration is to be specified in minutes as a non-zero, positive integer, and cannot be longer than a day."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `addslot n/Coco t/10/4/2020 1300 d/90`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `addslot n/Teddy t/11/4/2020 1500 d/45`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Finding slots: `findslots`"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Finds slots occupied by a pet matching the specified name, or slots occupied on the given date, or both. At least a"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "name, or a date, must be provided. Slots that matched the query will be returned and displayed sequentially as a list."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Format: `findslots [n/PETNAME [MORE_PETNAMES]] [t/DATE [MORE_DATES]]`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- This command can take one pet name, one date, or one pet name and one date."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "- Slots with pets matching at least one keyword will be returned (i.e. OR search). e.g. `Hans Bo` will return"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`Hans Gruber`, `Bo Yang`. The similar case applies for dates. Thus, informally, given"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`findslots n/name1 name2 t/date1 date2`, it is equivalent to searching for slots that match"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "`(name1 OR name2) AND (date1 OR date2)`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "The program display will be switched to show the slots that are matched. These slots are shown sequentially as a list"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "and are ordered chronologically, from earliest to latest."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Details about the arguments:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The date must be in `d/M/yyyy` format."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findslots n/Coco` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all slots occupied by `Coco`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findslots n/Coco Teddy` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all slots occupied by `Coco`, as well as slots occupied by `Teddy`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findslots n/Coco t/10/4/2020 11/4/2020` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all slots occupied by `Coco` on `10/4/2020`, and on `11/4/2020`."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findslots n/Coco Teddy t/10/4/2020 11/4/2020` +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays the slots that are: +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* occupied by `Coco` on `10/4/2020`,"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* occupied by `Coco` on `11/4/2020`,"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* occupied by `Teddy` on `10/4/2020`, and"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* occupied by `Teddy` on `11/4/2020`."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Edting a slot: `editslot`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Edits the details of an existing occupied slot in the schedule."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Format: `editslot INDEX [n/PETNAME] [t/DATETIME] [d/DURATION]`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The index passed in is intepreted differently, based on current display of the program."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- If the program is displaying slots (via `display s`, `display c` or `findslots`), then the index is based on the index numbers shown in the current display (indicated with blue boxes)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::slotIndex1.png[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::slotIndex2.png[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Otherwise, the index refers to the index number of the slot in the entire schedule."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Every argument of this command is optional, since it might not be necessary to edit all the fields of a slot. However, at least one must be provided (else, nothing about the slot is changed). For fields with no new values provided, their existing values are retained. Only fields with new values provided will be updated to the input values."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "limdylan"
        },
        "content": "As explained in the above section, the new slot must start and end on the same day."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Details about the arguments:"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Specifications for the pet, datetime and/or duration passed in are the same as those specified in \u003c\u003cAdding a slot: `addslot`\u003e\u003e."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `display s` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`editslot 1 t/10/4/2020 1300 d/120` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Edits the datetime and duration of the 1st slot to be `10/4/2020 1300`, and `120` minutes respectively. The pet occupying the slot remains the unchanged."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `findslots t/11/4/2020` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`editslot 3 d/45` +"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Edits the duration of the 3rd slot in the search results of `findslots` to be `45` minutes."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `display p` +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`editslot 12 n/Teddy` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Edits the 12th slot in the entire schedule to be occupied by `Teddy`."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a slot: `deleteslot`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the specified slot from the schedule."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Format: `deleteslot INDEX`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "limdylan"
        },
        "content": "The index is intepreted in the same manner as in \u003c\u003cEdting a slot: `editslot`\u003e\u003e."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Similar to `addslot`, the display remains the same (e.g. if the program was showing the list of pets, it will continue to show that even after a slot is deleted). This is because the user may wish to continue referring to the pets while deleting more slots."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Details about the argument:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- The index must be a positive integer 1, 2, 3, …​"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- `display s` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`deleteslot 2` +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the 2nd slot in the schedule."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `findslots n/Coco` +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "limdylan"
        },
        "content": "`deleteslot 2` +"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the 2nd slot in the search results of `findslots`."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- `display i` +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "`deleteslot 2` +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Deletes the 2nd slot in the schedule (same as the first example in this section)."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d\u003d\u003d Showing all conflicts: `conflicts`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays all conflicted slots."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Format: `conflicts`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Displays the slots that have a conflict, i.e., an overlap in time with another occupied slot."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* If the screen is not displaying the ful list of slots due to previous commands (e.g. findslots), command `conflicts` will show a list of conflicting slots among the shortlisted slots."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* Otherwise, upon calling this command, the program display will be switched to show all conflicted slots. These conflicted slots are shown sequentially as a list and are ordered chronologically, from earliest to latest."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "limdylan"
        },
        "content": "This command takes in no arguments."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "limdylan"
        },
        "content": "// end::schedule-commands[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Common / general commands"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Help**: `help`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Exit**: `exit`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Display**: `display SYSTEM` +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `display p` +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `display s` +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `display c` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `display i`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- **Statistics**: `stats`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "- **Back up**: `backup`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- **Load backup**: `load FILE_NAME` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `load 20200402_21_54_52`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Pet-related commands"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Add pet**: `addpet n/NAME g/GENDER b/DATE OF BIRTH s/SPECIES f/FOOD NAME: AMOUNT [f/FOOD NAME: AMOUNT] [t/TAG]...` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `addpet n/Garfield g/male b/01/01/2019 s/cat tabby t/lazy f/Brand A: 30 t/lasagna`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "- **Find pet**: `findpets PETNAME [MORE PETNAMES]... +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "e.g. `findpets garfield odie`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "- **Edit pet**: `editpet INDEX [n/name] [b/DATE OF BIRTH]  [t/TAG]...` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `editpet 2 n/garfield t/cuddly`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "- **Delete pet**: `deletepet INDEX` +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `deletepet 2`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "limdylan"
        },
        "content": ". Schedule-related commands"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Add slot**: `addslot n/PETNAME t/DATETIME d/DURATION` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `addslot n/Coco t/10/4/2020 1300 d/90` +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `addslot n/Teddy t/11/4/2020 1500 d/45`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- **Find slots**: `findslots [n/PETNAME [PETNAME]] [t/DATE [DATE]]` +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `findslots n/Coco` +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `findslots n/Coco Teddy` +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `findslots n/Coco t/10/4/2020 11/4/2020` +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `findslots n/Coco Teddy t/10/4/2020 11/4/2020`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "- **Edit slot**: `editslot INDEX [n/PETNAME] [t/DATETIME] [d/DURATION]` +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `editslot 1 t/10/4/2020 1300 d/120` +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `editslot 3 d/45` +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "limdylan"
        },
        "content": "e.g. `editslot 12 n/Teddy`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "- **Delete slot**: `deleteslot INDEX` +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "e.g. `deleteslot 2`"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "- **Show conflicts**: `conflicts`"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "//tag::faq[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Pet Store Helper folder."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*Q*: Why did I added a schedule slot and it is not showing in the statistics page? +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*A*: The statistics page only provides the schedules of the nearest 3 days, according to the system time PSH operates on."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*Q*: What if I edit an attribute of a pet multiple times in a single command? eg. `editpet 1 n/Andy n/Andrew` +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*A*: For `f/` and `t/`, you can provide them for multiple times and all of them will be added to the attributes of the pet. However, for the other attributes, only the last entry is accepted, with a warning message generated."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*Q*: How do I start an empty application without the sample data? +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*A*: First start PSH, and then use `exit` to quit the application. Go to the data directory, and open `pettracker.json`. Delete all information in the json file and leave `pettracker.json` as an empty file. Restart PSH and PSH will be empty."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "//end::faq[]"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 8,
      "limdylan": 276,
      "tianqi77": 66,
      "Zhu-Ruicong": 27,
      "shenghaoc": 56,
      "-": 99
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: images/checkstyle-guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 47
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: images/travis-guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/index.html`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "-": 139
    }
  },
  {
    "path": "docs/team/limdylan.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d Lim Wei Yang, Dylan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Pet Store Helper is a desktop application designed for owners of pet stores to help them manage their store and operations. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Major enhancements"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* *Display*: Added a command to switch between different displays."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** What it does: Allows the user to switch between different displays of the program, such as to view pets, schedule, etc."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Justification: This is the fundamental command behind the user interface of the program, which is necessary to view different parts of the program."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Highlights: The need to support display for multiple types of different systems made the implementation of this command difficult. Implementation was further complicated by the need to ensure that the UI remains constantly updated upon any changes to data in the system."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* *Calendar*: Added a calendar view of slots."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** What it does: Allows the user to view the slots kept track of by the system to be shown in the form of a calendar."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Justification: This feature improves the usability of the program significantly because such a view allows many more slots to be seen at once, as opposed to when slots out listed one-by-one. Apart from that, from a quick glance, the relative durations and timings apart between slots can be seen."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Highlights: Implementation was challenging as it required a non-trivial way of laying out the positions of each slot. It also required an in-depth knowledge of the various components in JavaFX, as well as their interactions with each other."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "{nbsp} +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Minor enhancements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Refactored slots-related commands (https://github.com/AY1920S2-CS2103-W15-4/main/pull/22[#22], https://github.com/AY1920S2-CS2103-W15-4/main/pull/25[#25], https://github.com/AY1920S2-CS2103-W15-4/main/pull/63[#63])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Organized date and time related methods into a single class (https://github.com/AY1920S2-CS2103-W15-4/main/pull/45[#45])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Code contribution"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "My code contribution can be viewed https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dlimdylan[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** User Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*** Added screenshots in the User Guide to illustrate the various types of display of the program."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*** Wrote sections as indicated in \u003c\u003ccontributions-user-guide\u003e\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Developer Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*** Integrated information from other various guides into the developer guide."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*** Came up with instructions for manual testing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "*** Wrote sections as indicated in \u003c\u003ccontributions-dev-guide\u003e\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W15-4/main/pull/13[#13], https://github.com/AY1920S2-CS2103-W15-4/main/pull/24[#24], https://github.com/AY1920S2-CS2103-W15-4/main/pull/66[#66], https://github.com/AY1920S2-CS2103-W15-4/main/pull/107[#107]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "** Some parts of the display feature I wrote was made use of by several other class mates (https://github.com/AY1920S2-CS2103-W15-4/main/pull/66[#66], https://github.com/AY1920S2-CS2103-W15-4/main/pull/137[#137])"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[contributions-user-guide]]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Sections of the User Guide written by me include:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Overview of the https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html#schedule-system[schedule system]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html#Limitations[Limitations] of the program"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Usage of the https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html#changing-the-display-code-display-code[`display` command]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Usage of https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html#schedule-related-commands[schedule-related commands]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "////"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule-system]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlimitations]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddisplay]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dschedule-commands]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "////"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "[[contributions-dev-guide]]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "Sections of the Developer Guide written by me include:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Overview of https://ay1920s2-cs2103-w15-4.github.io/main/DeveloperGuide.html#Design-Ui[UI Component]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Implementation of the https://ay1920s2-cs2103-w15-4.github.io/main/DeveloperGuide.html#display-switching-feature[display switching feature]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "- Implementation of the https://ay1920s2-cs2103-w15-4.github.io/main/DeveloperGuide.html#calendar-feature[calendar feature]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "////"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddesign-ui]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimplementation-display]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "---"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimplementation-calendar]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "////"
      }
    ],
    "authorContributionMap": {
      "limdylan": 96
    }
  },
  {
    "path": "docs/team/shenghaoc.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d Chen Shenghao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d PROJECT: Pet Store Helper"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Pet Store Helper (PSH) is a desktop application used for pet store owners to manage different aspects of their pet store including pet logging, scheduling and inventory management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 15k LOC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Major enhancement*: added *the ability to back up/load app data*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** What it does: allows the user to back up the current state of the app and load app data from any compatible JSON file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Justification: This feature improves the product significantly because a store should maintain backups of their system files so that data can be recovered in case of a system failure. It is also important to retain past data so that they can be extracted for analysis in the future."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Highlights: This enhancement does not affect existing commands, allowing it to integrate seamlessly with the rest of the app. However, this is reliant on the fact that currently the commands are only affected by the data of the app. If an undo/redo command is added, past and undone commands would also need to be saved to avoid errors arising from mismatch of commands and app data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Credits: Code from Address Book Level 4 was referenced to set up temporary files for testing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Minor enhancement*: Updated Storage to allow saving of new/refactored classes to JSON format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dshenghaoc\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Reposense]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "* *Other contributions*: Refactored Storage package and tests for Logic package"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** Managed releases `v1.2.1` and `v1.3.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** Wrote additional tests for new JSON-adapted classes to maintain coverage (Pull requests https://github.com/AY1920S2-CS2103-W15-4/main/pull/21[#21], https://github.com/AY1920S2-CS2103-W15-4/main/pull/83/files[#83])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the Developer Guide: https://github.com/AY1920S2-CS2103-W15-4/main/pull/90[#90] (mainly adjusting the UML diagrams and removing references to AB3)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W15-4/main/pull/134[#134], https://github.com/AY1920S2-CS2103-W15-4/main/pull/144[#144]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1920S2/forum/issues/41[1], https://github.com/nus-cs2103-AY1920S2/forum/issues/56[2], https://github.com/nus-cs2103-AY1920S2/forum/issues/94[3])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "*** Integrated multiple new Github plugins (AppVeyor, Coveralls, CircleCI and Netlify) to the team repo"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":imagesDir: ../images/user-guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbackup-and-load]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ":imagesDir: ../images/dev-guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dStorage]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbackup_and_load_feature]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003d\u003d PROJECT: RTOS-Based Robotic Car"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "Under a computer engineering module, I am also currently involved in the development of RTOS-based software that allows a robotic car to be controlled for maze navigation via an Android app."
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 65
    }
  },
  {
    "path": "docs/team/tianqi77.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d Zhao Tianqi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ":imagesDir: ../images/dev-guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d PROJECT: Pet Store Helper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "Pet Store Helper is a desktop application used for pet store owner to manage the store. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 16 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* *Major Enhancement*: *Added the command to display overall statistics*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** What it does: Allows the user to take a look at the overall statistics of pets, recent schedule, and food data in the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Justification: This feature is important because it allows users, mostly pet store owners, to have an overview of the situation in his store. The owner can refer to the data to decide which species he should buy in more. Also, it allows him to have a rough idea of  when are the busy hours in recent days, and the weekly food consumption as well. Also, it saves effort for users to click into different displays one by one to check the situation of the store."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Highlights: This feature uses a pie chart, a timetable, and a bar chart to show the statistics of pet, recent schedule, and food respectively. It is allows visualisation of the overall situation of the pet store in a user friendly manner."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Credits: Resizing of charts and panes as the window resizes. Source from the link: https://www.javacodegeeks.com/2014/04/javafx-tip-1-resizable-canvas.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* *Minor enhancement*: Added warning messages to the user. When the user input contains more than 1 entry for name, species, date of birth, gender, slot time, and slot duration, there will be a warning message displayed to user. It states that the application only accepts the last entry for each field."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtianqi77\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtianqi77\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Managed releases `v1.3.1`, `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Refactored Logic component of AB3 to adapt to Pet Store Helper. (Pull Request https://github.com/AY1920S2-CS2103-W15-4/main/pull/15[#15])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Added warning message (Pull request https://github.com/AY1920S2-CS2103-W15-4/main/pull/81[#81])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Changed find commands to filter pets that contain the keyword (instead of pets that has certain word which match the keyword exactly) (Pull Request https://github.com/AY1920S2-CS2103-W15-4/main/pull/136[#136])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Make find commands to switch display automatically. (e.g. `findslots n/keyword` will switch to display of filtered slots.) Allowed find slots by more than 1 dates (Pull Request https://github.com/AY1920S2-CS2103-W15-4/main/pull/79[#79])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Avoid confusion in index involved commands (i.e. edit and delete commands). Make sure the index refers to the whole list when commands is in different system with displayed screen. (e.g. editpet when screen is displaying inventory)(Pull Request https://github.com/AY1920S2-CS2103-W15-4/main/pull/87[#87])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Fix bugs reported after practical exam dry run (https://github.com/AY1920S2-CS2103-W15-4/main/pull/134[#134], https://github.com/AY1920S2-CS2103-W15-4/main/pull/136[#136], https://github.com/AY1920S2-CS2103-W15-4/main/pull/133[#133])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/AY1920S2-CS2103-W15-4/main/pull/48[#48]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W15-4/main/pull/61[#61]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpet_commands]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlogic_diagram]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstats]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dconflict]"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 65
    }
  },
  {
    "path": "docs/team/umaikaze.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d Zhao Mingjian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ":imagesDir: ../images/dev-guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d PROJECT: Pet Store Helper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Pet Store Helper is a desktop application designed for owners of pet stores to help them manage their store and"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "operations. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "and has about 15 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* *Major enhancement*: added the ability to *schedule when to bathe my own (in-store) pets*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** What it does: allows the user to add/delete/edit/find slots with a specified timing and duration for their (in-store)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "pets"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Justification: This feature allows the user to manage the slots for their pets to avoid clashes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Highlights: This enhancement is the foundation to other systems such as calendar view and slot list view."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Integration between Pets and slots need to be carefully handled in order to achieve both immutability of the two systems"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "and synchronization between the two systems. It required an in-depth analysis of structural design to avoid promoting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "high coupling."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Credits: The use of a listener on the internal UniquePetList to update Slots automatically was inspired by my"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "teammates\u0027 efforts to synchronize the inventory system with the pet system."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* *Minor enhancement*: Changed the color scheme and modified the window properties of the UI to give the application a"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "cute look to fit its function"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Credits: Window resizing and dragging function implementation referenced from Alexander.Berg, Evgenii Kanivets,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "Zachary Perales from stackoverflow.com, retrieved:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://stackoverflow.com/questions/19455059/allow-user-to-resize-an-undecorated-stage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dumaikaze\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dumaikaze\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Managed releases `v1.2` \u0026 `v1.3.2` (2 releases) on GitHub"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Updated the GUI color scheme (Pull request https://github.com/AY1920S2-CS2103-W15-4/main/pull/107[#107])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Wrote additional tests for existing features, however Covaralls was not implemented at that time so coverage change"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "was unclear."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "(Pull requests https://github.com/AY1920S2-CS2103-W15-4/main/pull/14[#14], https://github.com/AY1920S2-CS2103-W15-4/main/pull/61[#61])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com/AY1920S2-CS2103-W15-4/main/pull/75[#75]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W15-4/main/pull/18[#18],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103-W15-4/main/pull/19[#19], https://github.com/AY1920S2-CS2103-W15-4/main/pull/20[#20],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103-W15-4/main/pull/21[#21], https://github.com/AY1920S2-CS2103-W15-4/main/pull/22[#22],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103-W15-4/main/pull/55[#55], https://github.com/AY1920S2-CS2103-W15-4/main/pull/106[#106],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103-W15-4/main/pull/146[#146]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Contributed to forum discussions: https://github.com/nus-cs2103-AY1920S2/forum/issues/63[63]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-4/main/issues/295[295], https://github.com/AY1920S2-CS2103T-W17-4/main/issues/296[296]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "https://github.com/AY1920S2-CS2103T-W17-4/main/issues/297[297], https://github.com/AY1920S2-CS2103T-W17-4/main/issues/298[298]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "*** Integrated a new Github plugin (TravisCI) to the team repo"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write a technical"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dschedule]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dappendix]"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 70
    }
  },
  {
    "path": "docs/team/zhu-ruicong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d Zhu Ruicong - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ":imagesDir: ../images/dev-guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d PROJECT: Pet Store Helper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Pet Store Helper(PSH) is a desktop application used for pet store owners to manage different aspects of their pet store including pet logging, scheduling and inventory management. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 16kLOC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* *Major enhancement*: *added the inventory display system*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** What it does: allows the user to view the summary of weekly food types and amounts required to maintain the pets in the store."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Justification: This feature improves the usefulness of the product for pet store owners significantly as it helps the user to visualize, understand and organize food consumptions in the pet shop."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Highlights: This enhancement uses a split screen which led to the redesign of the UI component. A major challenge tackled was the synchronization of data of the Inventory system with the Pet system, which required an in-depth analysis of design alternatives of the data model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* *Minor enhancement*: added a feature where users can click on each food item in the inventory to view the breakdown of food amounts by pet names."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dZhu-Ruicong\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d15-4\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dZhu-Ruicong\u0026tabRepo\u003dAY1920S2-CS2103-W15-4%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Contribution to Documentation:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** Maintained the AboutUs page.[https://github.com/AY1920S2-CS2103-W15-4/main/pull/6[#6]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** Maintained the Model component(2.4) of the Developer Guide.[https://github.com/AY1920S2-CS2103-W15-4/main/pull/74[#74]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** Maintained Inventory feature(3.3) of Developer Guide.[https://github.com/AY1920S2-CS2103-W15-4/main/pull/74[#74]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** Compiled and edited the materials for the Final Demo."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** Refactored Model package of AB3 and UI component for the use of PSH[https://github.com/AY1920S2-CS2103-W15-4/main/pull/13[#13]][https://github.com/AY1920S2-CS2103-W15-4/main/pull/19[#19]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** In charge of resolving major integration issues at the end of the morphing phase.[https://github.com/AY1920S2-CS2103-W15-4/main/pull/35[#35]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103-W15-4/main/pull/23[#23], https://github.com/AY1920S2-CS2103-W15-4/main/pull/48[#48], https://github.com/AY1920S2-CS2103-W15-4/main/pull/64[#64], https://github.com/AY1920S2-CS2103-W15-4/main/pull/78[#78], https://github.com/AY1920S2-CS2103-W15-4/main/pull/137[#137]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dModel]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinventory_feature]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfaq]"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 57
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 424
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::../dev-guide/ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "image::../dev-guide/ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "`clzzz.helper.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "shenghaoc": 1,
      "-": 255
    }
  },
  {
    "path": "src/main/java/clzzz/helper/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 11,
      "-": 53
    }
  },
  {
    "path": "src/main/java/clzzz/helper/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/clzzz/helper/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Config;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Version;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.PetTrackerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.StorageManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.Ui;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Pet Store Helper ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetTrackerStorage petTrackerStorage \u003d new JsonPetTrackerStorage(userPrefs.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s pet store helper and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The data from the sample pet store helper will be used instead if {@code storage}\u0027s pet store helper is not"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * found, or an empty pet store helper will be used instead if errors occur when reading {@code storage}\u0027s pet store"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * helper."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Optional\u003cReadOnlyPetTracker\u003e petTrackerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        ReadOnlyPetTracker initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            petTrackerOptional \u003d storage.readPetTracker();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            if (!petTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                logger.info(\"Data file not found. Starting with a sample pet store helper\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            initialData \u003d petTrackerOptional.orElseGet(SampleDataUtil::getSamplePetTrackerWithSlots);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Starting with an empty pet store helper\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            initialData \u003d new PetTracker();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Starting with an empty pet store helper\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            initialData \u003d new PetTracker();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Pet Tracker\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"Starting Pet Store Helper \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Pet Store Helper ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 19,
      "shenghaoc": 26,
      "-": 139
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String LOG_FILE \u003d \"psh.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_PET_DISPLAYED_INDEX \u003d \"The pet index provided is invalid. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"It is larger than the number of showing pets.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_SLOT_DISPLAYED_INDEX \u003d \"The slot index provided is invalid. \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"It is larger than the number of showing slots.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_PETS_LISTED_OVERVIEW \u003d \"%1$d pets listed!\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SLOTS_LISTED_OVERVIEW \u003d \"%1$d slots listed!\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_SLOT_NOT_IN_ONE_DAY \u003d \"Slot does not start and end on the same day!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"The date entered is not a valid date.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"The time entered is not a valid time.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_TIME \u003d \"The date and time entered are not valid.\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_DATE_TOO_EARLY \u003d \"Warning: The date entered might be too early.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_DATE_TOO_LATE \u003d \"Warning: The date entered might be too late.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_END \u003d \"Only the last one will be accepted.\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_NAME \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"name field n/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_GENDER \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"gender field g/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_SPECIES \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"species field s/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_DOB \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"date of birth field b/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String WARNING_MESSAGE_DATETIME \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"datetime field t/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String WARNING_MESSAGE_DURATION \u003d \"Warning: You have entered more than 1 entries for \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"duration field d/.\" + \" \" + WARNING_MESSAGE_END;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 3,
      "tianqi77": 26,
      "shenghaoc": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.function.Function;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ListChangeListener.Change;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.transformation.TransformationList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns an {@code ObservableList} consisting of the results of"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * applying {@code mapper} to the elements of {@code originalList}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The new {@code ObservableList} has all the listeners that {@code originalList} has."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Implementation heavily adapted from https://stackoverflow.com/a/32297235/13075103"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * with slight modifications."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static \u003cR, T\u003e ObservableList\u003cR\u003e map(ObservableList\u003cT\u003e originalList, Function\u003cT, R\u003e mapper) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new TransformationList\u003cR, T\u003e(originalList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            public int getSourceIndex(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            public int getViewIndex(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                return index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            public R get(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                T element \u003d getSource().get(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                return mapper.apply(element);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            public int size() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                return getSource().size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            protected void sourceChanged(Change\u003c? extends T\u003e change) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                fireChange(new Change\u003cR\u003e(this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean wasAdded() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.wasAdded();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean wasRemoved() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.wasRemoved();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean wasReplaced() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.wasReplaced();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean wasUpdated() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.wasUpdated();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean wasPermutated() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.wasPermutated();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public int getPermutation(int i) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.getPermutation(i);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    protected int[] getPermutation() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        // This method is only called by the superclass methods"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        // wasPermutated() and getPermutation(int), which are"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        // both overriden by this class. There is no other way"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        // this method can be called."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        throw new AssertionError(\"Unreachable code\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public List\u003cR\u003e getRemoved() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.getRemoved()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                                .stream()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                                .map(mapper)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public int getFrom() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.getFrom();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public int getTo() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.getTo();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public boolean next() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        return change.next();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    public void reset() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        change.reset();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 112,
      "shenghaoc": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/DateTimeUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Contains standard datetime and date patterns to be used in Pet Store Helper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DateTimeUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // datetime-related"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String DATETIME_PATTERN \u003d \"d/M/uuuu HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //used to check the format of date time"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATETIME_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeFormatter.ofPattern(DATETIME_PATTERN).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // date-related"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String DATE_PATTERN \u003d \"d/M/uuuu\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //used to check if the date format is valid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            DateTimeFormatter.ofPattern(DATE_PATTERN).withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    // back up-related"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String BACK_UP_PATTERN \u003d \"uuuuMMdd_HH_mm_ss\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final DateTimeFormatter BACK_UP_FORMAT \u003d DateTimeFormatter.ofPattern(BACK_UP_PATTERN);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // static methods"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // datetime-related"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Obtains an instance of LocalDateTime from a text string using {@code DateTimeUtil.DATETIME_FORMAT}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final LocalDateTime parseLocalDateTime(String text) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return LocalDateTime.parse(text, DATETIME_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Formats a given datetime using {@code DateTimeUtil.DATETIME_FORMAT}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String formatLocalDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return dateTime.format(DATETIME_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    // date-related"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Obtains an instance of LocalDate from a text string using {@code DateTimeUtil.DATE_FORMAT}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final LocalDate parseLocalDate(String text) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return LocalDate.parse(text, DATE_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Formats a given date using {@code DateTimeUtil.DATE_FORMAT}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String formatLocalDate(LocalDate date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return date.format(DATE_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 55,
      "tianqi77": 7,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/clzzz/helper/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                .anyMatch(eachWord -\u003e containsIgnoreCase(eachWord, preppedWord));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Check if the key word appears as a substring."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static boolean containsIgnoreCase(String wordInSentence, String keyWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return wordInSentence.toLowerCase().contains(keyWord.toLowerCase());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 8,
      "shenghaoc": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * API of the Logic component for Pet Store Helper"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the PetTracker."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list to be displayed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    ObservableList\u003cDisplayItem\u003e getFilteredDisplayList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    DisplaySystemType getDisplaySystemType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 8,
      "Zhu-Ruicong": 8,
      "shenghaoc": 11,
      "-": 33
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.PetTrackerParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * The main LogicManager of Pet Store Helper."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final PetTrackerParser petTrackerParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        petTrackerParser \u003d new PetTrackerParser(model, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Command command \u003d petTrackerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            storage.savePetTracker(model.getPetTracker());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getPetTracker();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cDisplayItem\u003e getFilteredDisplayList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return model.getFilteredDisplayList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getFilteredPetList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getFilteredSlotList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return model.getFilteredFoodCollectionList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getCurrentDisplaySystemType();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return model.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "tianqi77": 14,
      "Zhu-Ruicong": 17,
      "shenghaoc": 16,
      "-": 55
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/BackUpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.DateTimeUtil.BACK_UP_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.LogicManager.FILE_OPS_ERROR_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.time.LocalDateTime.now;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Saves the current state of the pet tracker in a separate JSON file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class BackUpCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"backup\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Current Pet Tracker information has been backed up to %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final LocalDateTime now;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public BackUpCommand(Storage storage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        now \u003d now();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            storage.savePetTracker(model.getPetTracker(), now);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, now.format(BACK_UP_FORMAT) + \".json\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                false, false, DisplaySystemType.NO_CHANGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 42
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 2,
      "shenghaoc": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Whether or not help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Whether or not the application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The system to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final DisplaySystemType type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                         DisplaySystemType type) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * while setting {@code changeDisplay} to its default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this(feedbackToUser, showHelp, exit, DisplaySystemType.NO_CHANGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this(feedbackToUser, false, false, DisplaySystemType.NO_CHANGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 type \u003d\u003d otherCommandResult.type;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, type);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 23,
      "tianqi77": 9,
      "shenghaoc": 2,
      "-": 64
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/DisplayCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Displays the specified system."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"display\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \": Changes the display board to show the specified system.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"Parameter: SYSTEM (must be p (pets), s (schedule), c (calendar) or i (inventory)).\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"Example: display p\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Display changed to %s. \\nShowing all.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String ADDITIONAL_MESSAGE_INVENTORY \u003d \"Double click on each item to view list breakdown.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_INVALID_SYSTEM_TYPE \u003d \"Invalid system type specified.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final DisplaySystemType type;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplayCommand(DisplaySystemType type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            model.updateAll();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            model.changeDisplaySystem(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_SYSTEM_TYPE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        String message \u003d String.format(getMessageSuccess(), type);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(message, false, false, type);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String getMessageSuccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (type.equals(DisplaySystemType.INVENTORY)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return MESSAGE_SUCCESS + \"\\n\" + ADDITIONAL_MESSAGE_INVENTORY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 35,
      "tianqi77": 3,
      "Zhu-Ruicong": 11,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Pet Store Helper as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/LoadCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.model.Model.PREDICATE_SHOW_ALL_PETS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.model.Model.PREDICATE_SHOW_ALL_SLOTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Loads a pet tracker from a file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class LoadCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"load\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + \": Loads the given backup file.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + \"Parameters: FILE_NAME (must be a valid file name)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 20200402_21_54_52\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Pet tracker loaded from %s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Data file not found\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_WRONG_FORMAT \u003d \"Data file not in the correct format\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_FILE_OPS_ERROR \u003d \"Problem while reading from the file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Creates a LoadCommand to load the specified {@code Path}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public LoadCommand(Storage storage, Path filePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Optional\u003cReadOnlyPetTracker\u003e petTrackerOptional;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTrackerOptional \u003d storage.readPetTracker(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            if (!petTrackerOptional.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            model.setPetTracker(petTrackerOptional.get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new CommandException(MESSAGE_WRONG_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_OPS_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model.updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model.updateFilteredSlotList(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, filePath.getFileName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                || (other instanceof LoadCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                \u0026\u0026 filePath.equals(((LoadCommand) other).filePath)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 71
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/StatsCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Shows the overall statistics."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Overall statistics for pets, recent schedule, and list of food.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateAll();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.changeDisplaySystem(DisplaySystemType.STATISTICS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, DisplaySystemType.STATISTICS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 22,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/pet/AddPetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Adds a pet to the pet tracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class AddPetCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addpet\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to the pet store helper. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_DOB + \"DATE OF BIRTH \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"SPECIES \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"FOOD NAME: AMOUNT \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_FOODLIST + \"FOOD NAME: AMOUNT]\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_NAME + \"Teddy \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"male \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DOB + \"01/01/2019 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_SPECIES + \"dog \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand A: 15 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_FOODLIST + \"brand B: 20 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"small \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_TAG + \"lazy \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New pet added: %1$s\\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the pet store helper\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Pet toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String warningMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddPetCommand to add the specified {@code Pet}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand(Pet pet, String warningMessage) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        toAdd \u003d pet;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.warningMessage \u003d warningMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (model.hasPet(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.addPet(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd) + warningMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof AddPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPetCommand) other).toAdd))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 warningMessage.equals(((AddPetCommand) other).warningMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 58,
      "Zhu-Ruicong": 3,
      "shenghaoc": 14
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/pet/DeletePetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Deletes a pet identified using it\u0027s displayed index from the pet tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class DeletePetCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletepet\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \": Deletes the pet identified by the index number used in the displayed pet list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DELETE_PET_SUCCESS \u003d \"Deleted Pet: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.deletePet(petToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PET_SUCCESS, petToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof DeletePetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePetCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 46,
      "Zhu-Ruicong": 2,
      "shenghaoc": 8
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/pet/EditPetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Edits the details of an existing pet in the pet tracker."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class EditPetCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editpet\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the pets identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"by the index number used in the displayed pets list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_DOB + \"DATE OF BIRTH] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_SPECIES + \"SPECIES] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_FOODLIST + \"LIST OF FOOD AND AMOUNT] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + PREFIX_GENDER + \"female \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + PREFIX_DOB + \"01/02/2013\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EDIT_PET_SUCCESS \u003d \"Edited Pet: %1$s\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"This pet already exists in the pet store helper.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EMPTY_FOODLIST \u003d \"The list of food should not be empty.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final EditPetDescriptor editPetDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String warningMessage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param index of the pet in the filtered pet list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param editPetDescriptor details to edit the pet with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand(Index index, EditPetDescriptor editPetDescriptor, String warningMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editPetDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.editPetDescriptor \u003d new EditPetDescriptor(editPetDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.warningMessage \u003d warningMessage;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Creates and returns a {@code Pet} with the details of {@code petToEdit}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * edited with {@code editPetDescriptor}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static Pet createEditedPet(Pet petToEdit, EditPetDescriptor editPetDescriptor) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assert petToEdit !\u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Name updatedName \u003d editPetDescriptor.getName().orElse(petToEdit.getName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Gender updatedGender \u003d editPetDescriptor.getGender().orElse(petToEdit.getGender());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DateOfBirth updatedDateOfBirth \u003d editPetDescriptor.getDateOfBirth().orElse(petToEdit.getDateOfBirth());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Species updatedSpecies \u003d editPetDescriptor.getSpecies().orElse(petToEdit.getSpecies());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cFood\u003e updatedFoodList \u003d editPetDescriptor.getFoodList().orElse(petToEdit.getFoodList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPetDescriptor.getTags().orElse(petToEdit.getTags());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Pet(updatedName, updatedGender, updatedDateOfBirth, updatedSpecies, updatedFoodList, updatedTags);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cPet\u003e lastShownList \u003d model.getFilteredPetList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet petToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet editedPet \u003d createEditedPet(petToEdit, editPetDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!petToEdit.isSamePet(editedPet) \u0026\u0026 model.hasPet(editedPet)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.setPet(petToEdit, editedPet);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        model.updateFilteredPetList(Model.PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PET_SUCCESS, editedPet) + warningMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!(other instanceof EditPetCommand)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand e \u003d (EditPetCommand) other;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 editPetDescriptor.equals(e.editPetDescriptor)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 warningMessage.equals(e.warningMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Stores the details to edit the pet with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * corresponding field value of the pet."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static class EditPetDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Species species;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cFood\u003e foodList;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public EditPetDescriptor(EditPetDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setGender(toCopy.gender);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setDateOfBirth(toCopy.dateOfBirth);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setSpecies(toCopy.species);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setFoodList(toCopy.foodList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cDateOfBirth\u003e getDateOfBirth() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(dateOfBirth);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setDateOfBirth(DateOfBirth dateOfBirth) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSpecies\u003e getSpecies() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.ofNullable(species);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setSpecies(Species species) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.species \u003d species;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cFood\u003e\u003e getFoodList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (foodList !\u003d null) ? Optional.of(Collections.unmodifiableSet(foodList)) : Optional.empty();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setFoodList(Set\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.foodList \u003d (foodList !\u003d null) ? new HashSet\u003c\u003e(foodList) : null;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (!(other instanceof EditPetDescriptor)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            EditPetDescriptor e \u003d (EditPetDescriptor) other;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getDateOfBirth().equals(e.getDateOfBirth())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getSpecies().equals(e.getSpecies())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getFoodList().equals(e.getFoodList())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "tianqi77": 185,
      "Zhu-Ruicong": 3,
      "shenghaoc": 57
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/pet/FindPetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Finds and lists all pets in pet tracker whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class FindPetCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findpets\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all pets whose names contain any of \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.changeDisplaySystem(DisplaySystemType.PETS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                String.format(Messages.MESSAGE_PETS_LISTED_OVERVIEW, model.getFilteredPetList().size()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                false, false, DisplaySystemType.PETS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || (other instanceof FindPetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 41,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/slot/AddSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Adds a slot to the schedule."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class AddSlotCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addslot\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a pet to the pet store helper. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_NAME + \"PETNAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DATETIME + \"DATETIME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DURATION + \"DURATION\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_NAME + \"Coco \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DATETIME + \"16/11/2020 1300 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DURATION + \"90 \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New slot added: %1$s\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Slot slotToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String warningMessage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Creates an AddSlotCommand to add the specified {@code slot}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddSlotCommand(Slot slot, String warningMessage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(slot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        slotToAdd \u003d slot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.warningMessage \u003d warningMessage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.addSlot(slotToAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, slotToAdd) + warningMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof AddSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 slotToAdd.equals(((AddSlotCommand) other).slotToAdd))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 warningMessage.equals(((AddSlotCommand) other).warningMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34,
      "tianqi77": 12,
      "shenghaoc": 14
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/slot/ConflictCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.SlotConflictPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Finds and lists all slots in the schedule which have conflicts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class ConflictCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"conflicts\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all slots that have conflicts.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        model.updateFilteredSlotList(new SlotConflictPredicate(model.getFilteredSlotList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.changeDisplaySystem(DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                String.format(Messages.MESSAGE_SLOTS_LISTED_OVERVIEW, model.getFilteredSlotList().size()),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                false, false, DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 20,
      "tianqi77": 4,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/slot/DeleteSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Deletes a slot identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class DeleteSlotCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteslot\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \": Deletes the slot identified by the index number used in the displayed slots list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_DELETE_SLOT_SUCCESS \u003d \"Deleted slot: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DeleteSlotCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slotToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.deleteSlot(slotToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof DeleteSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteSlotCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 47,
      "shenghaoc": 8
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/slot/EditSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Edits the details of an slot in the schedule."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class EditSlotCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editslot\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the slot identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"by the index number used in the displayed slots list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + \"[\" + PREFIX_DATETIME + \"DATETIME] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            + PREFIX_DURATION + \"360\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EDIT_SLOT_SUCCESS \u003d \"Edited slot: %1$s\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final EditSlotDescriptor editSlotDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final String warningMessage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param editSlotDescriptor details to edit the person with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditSlotCommand(Index index, EditSlotDescriptor editSlotDescriptor, String warningMessage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editSlotDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.editSlotDescriptor \u003d new EditSlotDescriptor(editSlotDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.warningMessage \u003d warningMessage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Creates and returns a {@code Slot} with the details of {@code slotToEdit}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * edited with {@code editSlotDescriptor}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static Slot createEditedSlot(Slot slotToEdit, EditSlotDescriptor editSlotDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assert slotToEdit !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet updatedPet \u003d editSlotDescriptor.getPet().orElse(slotToEdit.getPet());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime updatedDateTime \u003d editSlotDescriptor.getDateTime().orElse(slotToEdit.getDateTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        SlotDuration updatedDuration \u003d editSlotDescriptor.getDuration().orElse(slotToEdit.getDuration());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Slot(updatedPet, updatedDateTime, updatedDuration);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cSlot\u003e lastShownList \u003d model.getFilteredSlotList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slotToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot editedSlot \u003d createEditedSlot(slotToEdit, editSlotDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!editedSlot.isWithinOneDay()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_SLOT_NOT_IN_ONE_DAY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.setSlot(slotToEdit, editedSlot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        model.updateFilteredSlotList(Model.PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SLOT_SUCCESS, editedSlot) + warningMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!(other instanceof EditSlotCommand)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotCommand e \u003d (EditSlotCommand) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 editSlotDescriptor.equals(e.editSlotDescriptor)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 warningMessage.equals(e.warningMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static class EditSlotDescriptor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private Pet pet;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        private SlotDuration duration;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public EditSlotDescriptor() {}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public EditSlotDescriptor(EditSlotDescriptor toCopy) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setPet(toCopy.pet);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return CollectionUtil.isAnyNonNull(pet, dateTime, duration);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Optional\u003cPet\u003e getPet() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(pet);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPet(Pet pet) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.pet \u003d pet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public Optional\u003cSlotDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public void setDuration(SlotDuration duration) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (!(other instanceof EditSlotDescriptor)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            EditSlotDescriptor e \u003d (EditSlotDescriptor) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return getPet().equals(e.getPet())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 118,
      "limdylan": 15,
      "tianqi77": 18,
      "shenghaoc": 33
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/commands/slot/FindSlotCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Finds and lists all slots in the schedule whose contents contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class FindSlotCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findslots\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all slots where pet name contains keyword(s) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"(case-insensitive) or slots that is within the date specified (ignoring timing) and displays them as a \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"list with index numbers.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Parameters: [n/PET NAME] [t/DATE [MORE DATES]...]\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/garfield t/10/11/2020 5/12/2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EMPTY_NAME_FIELD \u003d \"n/ should not be followed by an empty entry!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_EMPTY_DATETIME_FIELD \u003d \"t/ should not be followed by an empty entry!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Predicate\u003cSlot\u003e predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private String warningMessage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindSlotCommand(Predicate\u003cSlot\u003e predicate, String warningMessage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.warningMessage \u003d warningMessage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public CommandResult execute(Model model) throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.updateFilteredSlotList(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.changeDisplaySystem(DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                String.format(Messages.MESSAGE_SLOTS_LISTED_OVERVIEW, model.getFilteredSlotList().size())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        + warningMessage, false, false, DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof FindSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindSlotCommand) other).predicate))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 warningMessage.equals(((FindSlotCommand) other).warningMessage); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 31,
      "limdylan": 1,
      "tianqi77": 20,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 2,
      "shenghaoc": 1,
      "-": 145
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DOB \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_FOODLIST \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_SPECIES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 17,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/DisplayCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Parses input arguments and creates a new DisplayCommand Object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DisplayCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DisplayCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * and returns an DisplayCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            DisplaySystemType type \u003d ParserUtil.parseDisplaySystemType(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (!type.equals(DisplaySystemType.PETS)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 !type.equals(DisplaySystemType.SCHEDULE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 !type.equals(DisplaySystemType.INVENTORY)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    \u0026\u0026 !type.equals(DisplaySystemType.CALENDAR)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DisplayCommand(type);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DisplayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 17,
      "tianqi77": 9,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/LoadCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Parses input arguments and creates a new LoadCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class LoadCommandParser implements Parser\u003cLoadCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public LoadCommandParser(Storage storage) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoadCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * and returns a LoadCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public LoadCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, LoadCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new LoadCommand(storage, storage.getPetTrackerFilePath().resolveSibling(trimmedArgs + \".json\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 31
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes under package parser/pet."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Gender parseGender(String gender) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Gender.valueOf(trimmedGender.toUpperCase());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String species} into an {@code Species}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code species} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Species parseSpecies(String species) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedSpecies \u003d species.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Species.isValidSpecies(trimmedSpecies)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Species(trimmedSpecies);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String dateOfBirth} into an {@code DateOfBirth}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code dateOfBirth} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static DateOfBirth parseDateOfBirth(String dateOfBirth) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedDateOfBirth \u003d dateOfBirth.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(trimmedDateOfBirth)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new DateOfBirth(trimmedDateOfBirth);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String food} into an {@code Food}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code food} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Food parseFood(String food) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] foodDetails \u003d food.split(\":\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedFood \u003d foodDetails[0].trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        int foodAmount;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            foodAmount \u003d Integer.parseInt(foodDetails[1].trim());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodName(trimmedFood)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Food.isValidFoodAmount(foodAmount)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Food(trimmedFood, foodAmount);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cFood\u003e parseFoodList(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(foodList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cFood\u003e foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String food : foodList) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            Food toBeAdded \u003d parseFood(food);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            for (Food f:foodSet) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                if (f.isSameType(toBeAdded)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    toBeAdded \u003d new Food(f.foodName, f.foodAmount + toBeAdded.foodAmount);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    foodSet.remove(f);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            foodSet.add(toBeAdded);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return foodSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses a {@code String type} into the corresponding {@code DisplaySystemType}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @throws ParseException if the given {@code type} is invalid."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static DisplaySystemType parseDisplaySystemType(String type) throws ParseException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return DisplaySystemType.fromCliArg(trimmedType);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new ParseException(DisplaySystemType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 16,
      "tianqi77": 153,
      "Zhu-Ruicong": 11,
      "shenghaoc": 10
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/PetTrackerParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.BackUpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.LoadCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.ConflictCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.pet.AddPetCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.pet.DeletePetCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.pet.EditPetCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.pet.FindPetCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.AddSlotCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.DeleteSlotCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.EditSlotCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.FindSlotCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.Storage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parse user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTrackerParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public PetTrackerParser(Model model, Storage storage) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return parseCommand(commandWord, arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @param commandWord the command name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @param arguments   the string of arguments to the command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Command parseCommand(String commandWord, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // general"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DisplayCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new DisplayCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        case BackUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new BackUpCommand(storage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        case LoadCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new LoadCommandParser(storage).parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // pet tracker"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case AddPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new AddPetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case EditPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new EditPetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case DeletePetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new DeletePetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case FindPetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new FindPetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // schedule"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case AddSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new AddSlotCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case EditSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new EditSlotCommandParser(model).parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case DeleteSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new DeleteSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case FindSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new FindSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case ConflictCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return new ConflictCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 38,
      "tianqi77": 47,
      "shenghaoc": 52
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/pet/AddPetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new AddPetCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddPetCommandParser implements Parser\u003cAddPetCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPetCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an AddPetCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public AddPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_SPECIES,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        PREFIX_FOODLIST, PREFIX_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB, PREFIX_FOODLIST, PREFIX_SPECIES)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    AddPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        DateOfBirth dateOfBirth \u003d ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Species species \u003d ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Set\u003cFood\u003e foodList \u003d ParserUtil.parseFoodList(argMultimap.getAllValues(PREFIX_FOODLIST));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Pet pet \u003d new Pet(name, gender, dateOfBirth, species, foodList, tagList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String warningMessage \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_NAME).size() \u003e 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_GENDER).size() \u003e 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_GENDER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_SPECIES).size() \u003e 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_SPECIES;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DOB).size() \u003e 1) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (dateOfBirth.value.isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_EARLY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } else if (dateOfBirth.value.isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_LATE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new AddPetCommand(pet, warningMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "tianqi77": 53,
      "Zhu-Ruicong": 4,
      "shenghaoc": 32
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/pet/DeletePetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new DeletePetCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetCommandParser implements Parser\u003cDeletePetCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePetCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a DeletePetCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public DeletePetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return new DeletePetCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 20,
      "Zhu-Ruicong": 1,
      "shenghaoc": 8
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/pet/EditPetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new EditPetCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetCommandParser implements Parser\u003cEditPetCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPetCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns an EditPetCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public EditPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_DOB,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        PREFIX_SPECIES, PREFIX_FOODLIST, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPetCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String warningMessage \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_NAME).size() \u003e 1) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_GENDER).size() \u003e 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_GENDER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_SPECIES).size() \u003e 1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_SPECIES;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DOB).size() \u003e 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand.EditPetDescriptor editPetDescriptor \u003d new EditPetCommand.EditPetDescriptor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DOB).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setDateOfBirth(ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()).value.isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_EARLY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            } else if (ParserUtil.parseDateOfBirth(argMultimap.getValue(PREFIX_DOB).get()).value"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    .isAfter(LocalDate.now())) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_LATE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPECIES).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            editPetDescriptor.setSpecies(ParserUtil.parseSpecies(argMultimap.getValue(PREFIX_SPECIES).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseFoodListForEdit(argMultimap.getAllValues(PREFIX_FOODLIST)).ifPresent(editPetDescriptor::setFoodList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPetDescriptor::setTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (!editPetDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(EditPetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new EditPetCommand(index, editPetDescriptor, warningMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e foodList} into a {@code Set\u003cFood\u003e} if {@code foodList} is non-empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code foodList} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cFood\u003e} containing zero food."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cFood\u003e\u003e parseFoodListForEdit(Collection\u003cString\u003e foodList) throws ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert foodList !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodList.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (foodList.stream().allMatch(t -\u003e t.equals(\"\"))) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(EditPetCommand.MESSAGE_EMPTY_FOODLIST);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Collection\u003cString\u003e foodSet \u003d foodList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseFoodList(foodSet));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 108,
      "Zhu-Ruicong": 2,
      "shenghaoc": 19
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/pet/FindPetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Parses input arguments and creates a new FindPetCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindPetCommandParser implements Parser\u003cFindPetCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPetCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * and returns a FindPetCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public FindPetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new FindPetCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 23,
      "shenghaoc": 9
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/slot/AddSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_SLOT_NOT_IN_ONE_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new AddSlotCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddSlotCommandParser implements Parser\u003cAddSlotCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public AddSlotCommandParser(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public AddSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DURATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_DATETIME, PREFIX_DURATION)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet pet \u003d SlotParserUtil.parsePet(argMultimap.getValue(PREFIX_NAME).get(), model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime dateTime \u003d SlotParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        SlotDuration duration \u003d SlotParserUtil.parseSlotDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slot \u003d new Slot(pet, dateTime, duration);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!slot.isWithinOneDay()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(MESSAGE_SLOT_NOT_IN_ONE_DAY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String warningMessage \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_NAME).size() \u003e 1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DATETIME).size() \u003e 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DURATION).size() \u003e 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (dateTime.toLocalDate().isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_EARLY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } else if (dateTime.toLocalDate().isAfter(LocalDate.now().plusYears(5))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_LATE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new AddSlotCommand(slot, warningMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34,
      "limdylan": 8,
      "tianqi77": 17,
      "shenghaoc": 29
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/slot/DeleteSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new DeleteSlotCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeleteSlotCommandParser implements Parser\u003cDeleteSlotCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public DeleteSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new DeleteSlotCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSlotCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 21,
      "shenghaoc": 10
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/slot/EditSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new EditSlotCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditSlotCommandParser implements Parser\u003cEditSlotCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditSlotCommandParser(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditSlotCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * and returns an EditSlotCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_DATETIME, PREFIX_DURATION, PREFIX_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            index \u003d SlotParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSlotCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotDescriptor editSlotDescriptor \u003d new EditSlotDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String warningMessage \u003d \"\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_NAME).size() \u003e 1) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DATETIME).size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DURATION).size() \u003e 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            warningMessage +\u003d Messages.WARNING_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Optional\u003cString\u003e newPetNameString \u003d argMultimap.getValue(PREFIX_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (newPetNameString.isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            editSlotDescriptor.setPet(SlotParserUtil.parsePet(newPetNameString.get(), model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Optional\u003cString\u003e newDateTimeString \u003d argMultimap.getValue(PREFIX_DATETIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (newDateTimeString.isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTime newDateTime \u003d SlotParserUtil.parseDateTime(newDateTimeString.get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            editSlotDescriptor.setDateTime(newDateTime);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (newDateTime.toLocalDate().isBefore(LocalDate.EPOCH)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_EARLY;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } else if (newDateTime.toLocalDate().isAfter(LocalDate.now().plusYears(5))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                warningMessage +\u003d Messages.WARNING_MESSAGE_DATE_TOO_LATE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Optional\u003cString\u003e newSlotDurationString \u003d argMultimap.getValue(PREFIX_DURATION);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (newSlotDurationString.isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            editSlotDescriptor.setDuration(SlotParserUtil.parseSlotDuration(newSlotDurationString.get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!editSlotDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(EditSlotCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new EditSlotCommand(index, editSlotDescriptor, warningMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 41,
      "limdylan": 17,
      "tianqi77": 15,
      "shenghaoc": 20
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/slot/FindSlotCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.Parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.SlotDatePredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.SlotPetNamePredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Parses input arguments and creates a new FindSlotCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindSlotCommandParser implements Parser\u003cFindSlotCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Predicate\u003cSlot\u003e getPredicates(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isEmpty()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(PREFIX_DATETIME).isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPredicate\u003cSlot\u003e\u003e predicates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (argMultimap.getValue(PREFIX_NAME).get().trim().equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                throw new ParseException(FindSlotCommand.MESSAGE_EMPTY_NAME_FIELD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            predicates.add(new SlotPetNamePredicate(Arrays.asList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (argMultimap.getValue(PREFIX_DATETIME).get().trim().equals(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                throw new ParseException(FindSlotCommand.MESSAGE_EMPTY_DATETIME_FIELD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            predicates.add(new SlotDatePredicate("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    SlotParserUtil.parseDates(argMultimap.getValue(PREFIX_DATETIME).get())));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assert !(predicates.isEmpty()) : \"No predicates for finding slots!\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return predicates.stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .reduce(Predicate::and)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindSlotCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * and returns a FindSlotCommand object for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public FindSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Predicate\u003cSlot\u003e predicates \u003d getPredicates(args);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DATETIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String warningMessage \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_NAME).size() \u003e 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            warningMessage +\u003d WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (argMultimap.getAllValues(PREFIX_DATETIME).size() \u003e 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            warningMessage +\u003d WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new FindSlotCommand(predicates, warningMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 34,
      "limdylan": 4,
      "tianqi77": 10,
      "shenghaoc": 33
    }
  },
  {
    "path": "src/main/java/clzzz/helper/logic/parser/slot/SlotParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date must follow format \" + DateTimeUtil.DATE_PATTERN + \".\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_DURATION \u003d \"Duration is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_INVALID_PETNAME \u003d \"Pet name is invalid.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String MESSAGE_PET_DOES_NOT_EXIST \u003d \"Pet name does not match any pet in record.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses a {@code String petName} into a {@code Pet}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code petName} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static Pet parsePet(String nameStr, Model model) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(nameStr);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedPetName \u003d nameStr.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (!Name.isValidName(trimmedPetName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PETNAME);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Name petName \u003d new Name(trimmedPetName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return model.getPet(petName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (PetNotFoundException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new ParseException(MESSAGE_PET_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code DateTime}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new DateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static LocalDate parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalDate parsedDate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            parsedDate \u003d DateTimeUtil.parseLocalDate(trimmedDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INVALID_DATE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parse a {@code String dates} into a {@code List\u003cLocalDate\u003e}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws ParseException if the dates is not in valid format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static List\u003cLocalDate\u003e parseDates(String dates) throws ParseException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(dates);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] trimmedDates \u003d dates.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ArrayList\u003cLocalDate\u003e parsedDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String date : trimmedDates) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            parsedDates.add(parseDate(date));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return parsedDates;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses a {@code String duration} into an {@code SlotDuration}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static SlotDuration parseSlotDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String trimmedDuration \u003d duration.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!SlotDuration.isValidDuration(trimmedDuration)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new SlotDuration(trimmedDuration);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 69,
      "limdylan": 31,
      "tianqi77": 18,
      "shenghaoc": 9
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * The API of the Pet Store Helper Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Predicate\u003cPet\u003e PREDICATE_SHOW_ALL_PETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Predicate\u003cSlot\u003e PREDICATE_SHOW_ALL_SLOTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Predicate\u003cFoodCollection\u003e PREDICATE_SHOW_ALL_FOOD_COLLECTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Sets the user prefs\u0027 pet tracker file path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setPetTrackerFilePath(Path petTrackerFilePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the PetTracker."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    ReadOnlyPetTracker getPetTracker();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Replaces pet tracker book data with the data in {@code petTracker}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void setPetTracker(ReadOnlyPetTracker petTracker);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    boolean hasPet(Pet pet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the pet with the given {@code name}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Pet getPet(Name name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Deletes the given pet."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must exist in the pet tracker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void deletePet(Pet target);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds the given pet."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code pet} must not already exist in the pet tracker."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void addPet(Pet pet);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the given pet {@code target} with {@code editedPet}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the pet tracker."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setPet(Pet target, Pet editedPet);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the filtered pet list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cPet\u003e getFilteredPetList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the filter of the filtered pet list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void updateFilteredPetList(Predicate\u003cPet\u003e predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // no need for hasSlot(), because duplicate slots are allowed"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Deletes the given slot."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The slot must exist in the pet tracker."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void deleteSlot(Slot target);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds the given slot."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void addSlot(Slot slot);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the given slot {@code target} with {@code editedSlot}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void setSlot(Slot target, Slot editedSlot);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cSlot\u003e getFilteredSlotList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the filter of the filtered slot list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the filtered slot list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Updates the filter of the filtered food colection list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void updateFilteredFoodCollectionList(Predicate\u003cFoodCollection\u003e predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    void updateAll();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of display items."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    ObservableList\u003cDisplayItem\u003e getFilteredDisplayList();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    DisplaySystemType getCurrentDisplaySystemType();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Changes the list to be displayed."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void changeDisplaySystem(DisplaySystemType newDisplayType) throws IllegalValueException;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10,
      "tianqi77": 15,
      "Zhu-Ruicong": 77,
      "shenghaoc": 17,
      "-": 52
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents the in-memory model of the pet tracker data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final PetTracker petTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final FilteredList\u003cPet\u003e filteredPets;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final FilteredList\u003cSlot\u003e filteredSlots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final FilteredList\u003cFoodCollection\u003e filteredFoodCollections;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private DisplaySystemType currentDisplaySystemType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private ObservableList\u003cDisplayItem\u003e filteredDisplayItems;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Initializes a ModelManager with the given petTracker and userPrefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ModelManager(ReadOnlyPetTracker petTracker, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(petTracker, userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        logger.fine(\"Initializing with pet tracker: \" + petTracker + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTracker \u003d new PetTracker(petTracker);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredPets \u003d new FilteredList\u003c\u003e(this.petTracker.getPetList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        filteredSlots \u003d new FilteredList\u003c\u003e(this.petTracker.getSlotList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredFoodCollections \u003d new FilteredList\u003c\u003e(this.petTracker.getFoodCollectionList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        filteredDisplayItems \u003d CollectionUtil.map(filteredPets, pet -\u003e pet); // display list of pets initially"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        currentDisplaySystemType \u003d DisplaySystemType.PETS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this(new PetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return userPrefs.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        userPrefs.setPetTrackerFilePath(petTrackerFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet Tracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void setPetTracker(ReadOnlyPetTracker petTracker) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.petTracker.resetData(petTracker);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTracker.hasPet(pet);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return petTracker.getPet(name);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.removePet(target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.addPet(pet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        updateFilteredPetList(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.setPet(target, editedPet);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Pet List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Pet} backed by the internal list of"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code versionedpetTracker}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return filteredPets;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredPets.setPredicate(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredSlots.setPredicate(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredFoodCollections.setPredicate(PREDICATE_SHOW_ALL_FOOD_COLLECTIONS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Slot  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void deleteSlot(Slot target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.removeSlot(target);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.addSlot(slot);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        updateFilteredSlotList(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(target, editedSlot);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petTracker.setSlot(target, editedSlot);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Slot List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Slot} backed by the internal list of"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code versionedpetTracker}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return filteredSlots;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        filteredSlots.setPredicate(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredPets.setPredicate(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredFoodCollections.setPredicate(PREDICATE_SHOW_ALL_FOOD_COLLECTIONS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food Collection List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the filter of the filtered food collection list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void updateFilteredFoodCollectionList(Predicate\u003cFoodCollection\u003e predicate) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        filteredFoodCollections.setPredicate(predicate);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredPets.setPredicate(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredSlots.setPredicate(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return filteredFoodCollections;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Common methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void updateAll() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredPets.setPredicate(PREDICATE_SHOW_ALL_PETS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredSlots.setPredicate(PREDICATE_SHOW_ALL_SLOTS);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        filteredFoodCollections.setPredicate(PREDICATE_SHOW_ALL_FOOD_COLLECTIONS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cDisplayItem\u003e getFilteredDisplayList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return filteredDisplayItems;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DisplaySystemType getCurrentDisplaySystemType() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assert !currentDisplaySystemType.equals(DisplaySystemType.NO_CHANGE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return currentDisplaySystemType;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Used for display all pets/slots/inventory in display command."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void changeDisplaySystem(DisplaySystemType newDisplayType) throws IllegalValueException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        switch (newDisplayType) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case PETS:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            filteredDisplayItems \u003d CollectionUtil.map(filteredPets, pet -\u003e pet);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            filteredDisplayItems \u003d CollectionUtil.map(filteredSlots, slot -\u003e slot);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        case INVENTORY:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            filteredDisplayItems \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    CollectionUtil.map(petTracker.getFoodCollectionList(), foodCollection -\u003e foodCollection);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case CALENDAR: // do nothing since calendar does not depend on filteredDisplayItems"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case STATISTICS: //same as calendar"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new IllegalValueException(DisplayCommand.MESSAGE_INVALID_SYSTEM_TYPE);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        currentDisplaySystemType \u003d newDisplayType;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTracker.equals(other.petTracker)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 filteredPets.equals(other.filteredPets)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 filteredSlots.equals(other.filteredSlots)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 filteredFoodCollections.equals(other.filteredFoodCollections)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 currentDisplaySystemType.equals(other.currentDisplaySystemType)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 filteredDisplayItems.equals(other.filteredDisplayItems);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 40,
      "tianqi77": 30,
      "Zhu-Ruicong": 87,
      "shenghaoc": 27,
      "-": 97
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/PetTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Wraps all pet system data at the pet-tracker level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Duplicates are not allowed (by .isSamePet comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class PetTracker implements ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final UniquePetList pets;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets \u003d new UniquePetList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetTracker(ReadOnlyPetTracker toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of the pet list with {@code pets}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code pets} must not contain duplicate persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setPets(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.pets.setPets(pets);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of the schedule with {@code slots}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.pets.setSlots(slots);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void resetData(ReadOnlyPetTracker newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPets(newData.getPetList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        setSlots(newData.getSlotList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    //// pet-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.contains(pet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if a pet with the same identity as {@code pet} exists in the pet tracker."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pets.getPet(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a pet to the pet tracker."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The pet must not already exist in the pet tracker."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void addPet(Pet p) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.add(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the given pet {@code target} in the list with {@code editedPet}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the pet tracker."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        requireNonNull(editedPet);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.setPet(target, editedPet);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes {@code key} from this {@code PetTracker}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code key} must exist in the pet tracker."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void removePet(Pet key) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        pets.remove(key);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    //// slot-level operations"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a slot to the schedule."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void addSlot(Slot p) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        pets.addSlot(p);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the given slot {@code target} in the list with {@code editedSlot}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(editedSlot);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        pets.setSlot(target, editedSlot);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes {@code key} from this {@code PetTracker}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code key} must exist in the pet tracker."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void removeSlot(Slot key) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        pets.removeSlot(key);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int numPets \u003d pets.asUnmodifiableObservableList().size();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int numSlots \u003d pets.acquireUnmodifiableSlotsList().size();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%d pets, %d slots\", numPets, numSlots);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPet\u003e getPetList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return pets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cSlot\u003e getSlotList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return pets.acquireUnmodifiableSlotsList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cFoodCollection\u003e getFoodCollectionList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return pets.acquireUnmodifiableFoodCollectionList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof PetTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 pets.equals(((PetTracker) other).pets));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return Objects.hash(pets);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 8,
      "limdylan": 57,
      "tianqi77": 98,
      "Zhu-Ruicong": 7,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/ReadOnlyPetTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public interface ReadOnlyPetTracker {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    ObservableList\u003cPet\u003e getPetList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns an unmodifiable view of the slots list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    ObservableList\u003cSlot\u003e getSlotList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an unmodifiable view of the food collection list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    ObservableList\u003cFoodCollection\u003e getFoodCollectionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 4,
      "tianqi77": 14,
      "Zhu-Ruicong": 6,
      "shenghaoc": 4
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 2,
      "shenghaoc": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/UniquePetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollectionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A list of pets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A pet is considered unique by comparing using {@code Pet#isSamePet(Pet)}. As such, adding and updating of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * pets uses Pet#isSamePet(Pet) for equality so as to ensure that the pet being added or updated is"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * unique in terms of identity in the UniquePetList. However, the removal of a pet uses Pet#equals(Object) so"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * as to ensure that the pet with exactly the same fields will be removed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * @see Pet#isSamePet(Pet)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class UniquePetList implements Iterable\u003cPet\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cPet\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final FoodCollectionList foodCollectionList \u003d new FoodCollectionList(internalList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final Schedule slots \u003d new Schedule();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public UniquePetList() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        setInternalListListenerForFoodCollectionList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setInternalListListenerForSchedule();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Sets a Listener on {@code internalList} so that whenever the {@code internalList} changes, the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * foodCollectionList is updated according to the change of internalList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setInternalListListenerForFoodCollectionList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.addListener((ListChangeListener\u003cPet\u003e) change -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            if (change.next()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                updateFoodCollectionList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setInternalListListenerForSchedule() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        internalList.addListener(new PetListChangeListener() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            protected void updateSlotsDueToPetEdit(Pet removed, Pet added) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ObservableList\u003cSlot\u003e toEdit \u003d slots.getInternalUnmodifiableListForPetName(removed.getName().fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                for (Slot slot : toEdit) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    slots.setSlot(slot, petReplacedSlot(slot, added));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            protected void removeExcessSlot(Pet removed) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                ObservableList\u003cSlot\u003e toRemove \u003d slots.getInternalUnmodifiableListForPetName(removed.getName().fullName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                for (Slot slot : toRemove) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    slots.remove(slot);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the list contains an equivalent pet as the given argument."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean contains(Pet toCheck) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the pet in the list with the matching name."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        List\u003cPet\u003e petsWithMatchingName \u003d internalList.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .filter(pet -\u003e pet.getName().equals(name))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assert petsWithMatchingName.size() \u003c\u003d 1 : \"Duplicate pets detected!\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (petsWithMatchingName.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return petsWithMatchingName.get(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds a pet to the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must not already exist in the list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void add(Pet toAdd) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the pet {@code target} in the list with {@code editedPet}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet identity of {@code editedPet} must not be the same as another existing pet in the list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(target, editedPet);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!target.isSamePet(editedPet) \u0026\u0026 contains(editedPet)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.set(index, editedPet);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Removes the equivalent pet from the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The pet must exist in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void remove(Pet toRemove) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new PetNotFoundException();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replace the contents of the list entire with the contents of {@code replacement}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(UniquePetList replacement) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Replaces the contents of this list with {@code pets}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * {@code pets} must not contain duplicate pets."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPets(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(pets);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!petsAreUnique(pets)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new DuplicatePetException();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(pets);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public List\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        List\u003cFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Pet pet:internalList) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            foods.addAll(pet.getFoodList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return foods;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Slots methods"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Replaces the contents of the schedule with {@code slots}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.slots.setSlots(slots);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        slots.add(slot);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Removes {@code key} from this {@code PetTracker}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * {@code key} must exist in the pet tracker."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void removeSlot(Slot key) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        slots.remove(key);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Replaces the given slot {@code target} in the list with {@code editedSlot}."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * {@code target} must exist in the pet tracker."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        requireNonNull(editedSlot);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        slots.setSlot(target, editedSlot);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cPet\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the list of food collections as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cFoodCollection\u003e acquireUnmodifiableFoodCollectionList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return foodCollectionList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public ObservableList\u003cSlot\u003e acquireUnmodifiableSlotsList() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return slots.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Iterator\u003cPet\u003e iterator() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof UniquePetList // instanceof handles nulls"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePetList) other).internalList));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if {@code pets} contains only unique pets."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private boolean petsAreUnique(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (int i \u003d 0; i \u003c pets.size() - 1; i++) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c pets.size(); j++) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                if (pets.get(i).isSamePet(pets.get(j))) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private void updateFoodCollectionList() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        foodCollectionList.update(internalList);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Listener class to look out for changes in the pet list and use to modify schedule correspondingly"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "abstract class PetListChangeListener implements ListChangeListener\u003cPet\u003e {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void onChanged (Change\u003c? extends Pet\u003e petChange) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003c? extends Pet\u003e removedPets;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003c? extends Pet\u003e addedPets;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        while (petChange.next()) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            removedPets \u003d petChange.getRemoved();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            addedPets \u003d petChange.getAddedSubList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (removedPets.size() \u003e 0 \u0026\u0026 addedPets.size() \u003e 0) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                for (int i \u003d 0; i \u003c removedPets.size(); i++) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    updateSlotsDueToPetEdit(removedPets.get(i), addedPets.get(i));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (removedPets.size() \u003e 0) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                for (Pet removedPet : removedPets) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    removeExcessSlot(removedPet);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected Slot petReplacedSlot(Slot slot, Pet newPet) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return slot.replacePetWith(newPet);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * To be filled up with methods accessible from UniquePetList to update the slots list"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param removed the pet that was removed on pet list change. We assume that only 1 pet is deleted at a time."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param added the pet that was added on pet list change. We assume that only 1 pet is added at a time."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected abstract void updateSlotsDueToPetEdit(Pet removed, Pet added);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    protected abstract void removeExcessSlot(Pet removed);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 95,
      "limdylan": 16,
      "Zhu-Ruicong": 175,
      "shenghaoc": 11
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Path petTrackerFilePath \u003d Paths.get(\"data\" , \"pettracker.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        setPetTrackerFilePath(newUserPrefs.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petTrackerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTrackerFilePath \u003d petTrackerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 petTrackerFilePath.equals(o.petTrackerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(guiSettings, petTrackerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + petTrackerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 10,
      "shenghaoc": 2,
      "-": 75
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/foodcollection/FoodAmountAndPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a relationship between pet and an integer attribute amount, which indicates the amount of a certain"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * type of food required by a pet. This item is stored under a FoodCollection object and thus the type of food the pet"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * requires is specified in FoodCollection."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodAmountAndPet implements DisplayItem {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d \"Food amount must be a positive integer number.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Integer foodAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final String petName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Instantiates a FoodAmountAndPet object which represents the relationship that the given pet requires"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * the given amount of a certain type of food."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param foodAmount the Amount of Food"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param petName the Name of the pet."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public FoodAmountAndPet(Integer foodAmount, String petName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidFoodAmount(foodAmount), MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmount \u003d foodAmount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if a given food amount is positive."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static boolean isValidFoodAmount(Integer test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return DisplaySystemType.FOOD_AMOUNT_AND_PET;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the food amount of the certain type of food kept by this pet."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Integer getFoodAmount() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return foodAmount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the petName involved in this relationship."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String getPetName() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(foodAmount, petName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return \"FoodAmountAndPet{\" + \"foodAmount\u003d\" + foodAmount + \", pet\u003d\" + petName + \u0027}\u0027;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 59,
      "shenghaoc": 12
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/foodcollection/FoodCollection.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Food Collection object in Pet Store Helper. It is used to model a collection of the same type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * of food that could exist in a pet list. (If there are 3 pets in a list, each requiring 10 units of cat food,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * a food collection of the cat food in the list will have name as catfood and amount as 30.)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFoodCollectionName(String)}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodCollection implements DisplayItem {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name and amount of food collection should both exist \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            + \"and separated by a colon \u0027:\u0027.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Food collection names should only contain alphanumeric \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            + \"characters and spaces only, and it should not be blank\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d \"Food collection amount must be a positive integer number.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private int amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private ObservableList\u003cFoodAmountAndPet\u003e foodAmountAndPets \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cFoodAmountAndPet\u003e unmodifiablePets \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FXCollections.unmodifiableObservableList(foodAmountAndPets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *  @param foodName A valid food name to generate Food Collection from."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param petName The owner of the food being added."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private FoodCollection(String foodName, Integer foodAmount, String petName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(petName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidFoodCollectionName(foodName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.name \u003d foodName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        checkArgument(isValidFoodCollectionAmount(foodAmount), MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.amount \u003d foodAmount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmountAndPets.add(new FoodAmountAndPet(foodAmount, petName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Generates a food collection from a given food object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static FoodCollection generateFoodCollection(Food food, Pet pet) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return new FoodCollection(food.foodName, food.foodAmount, pet.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given string is a valid food collection name."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodCollectionName(String test) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if a given food collection amount is positive."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidFoodCollectionAmount(Integer test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Adds food into the food collection."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param pet The owner of the food being added"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param other The food to be added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @return true if it is successfully added, which means"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * the type of food has the same name as that of the food collection."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public boolean addFoodToCollection(Food other, Pet pet) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (isSameType(other)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            amount +\u003d other.foodAmount;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            this.foodAmountAndPets.add(new FoodAmountAndPet(other.foodAmount, pet.getName().fullName));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food collection object is of same type as this food collection."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameType(FoodCollection other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return name.equals(other.name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same type as this food collection."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameType(Food other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return name.equals(other.foodName);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food collection object is of same amount as this food collection."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameAmount(FoodCollection other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return amount \u003d\u003d other.amount;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the name of this food collection."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the amount of food in this collection."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Integer getAmount() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns a list of FoodAmountAndPet as an ObservableList so that it can be displayed in Ui when the user"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * requires to view a breakdown of the composition of the amount of this food collection by the owners of food."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cFoodAmountAndPet\u003e getUnmodifiablePets() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return unmodifiablePets;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || ((other instanceof FoodCollection) // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameType((FoodCollection) other)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameAmount((FoodCollection) other)); // state checks"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(amount, name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return \"[\" + name + \"]: \" + amount;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return DisplaySystemType.INVENTORY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 148,
      "shenghaoc": 20
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/foodcollection/FoodCollectionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * A FoodCollectionList represents a list of unique Food Collections, where Food Collections are uniquely identified"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * through FoodCollection#name. FoodCollectionList wraps around an internal ObservableList of FoodCollection and it"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * mainly interacts with Food object or a list of Food objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodCollectionList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cFoodCollection\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final ObservableList\u003cFoodCollection\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Creates a FoodCollectionList that contains a given list of foods"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param pets The list of foods to be used to create the food collection list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public FoodCollectionList(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        addPetList(pets);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Checks if The if the type of the Food object input already exists in the food collection list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param toCheck The food item to be checked."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @return Returns true if it exists."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.stream().anyMatch(t-\u003e t.isSameType(toCheck));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Gets the food collection in the list whose food collection name is of the given input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Note that the caller of the function has to ensure that the input name given already"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * exists in the FoodCollectionList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param name The name of the Food Collection to be checked."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @return The FoodCollection with the matching name."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public FoodCollection getFoodCollection(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .filter(fc -\u003e fc.getName().equals(name))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .findFirst().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds a food item into the food collection list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param food The food to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addFood(Food food, Pet pet) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (contains(food)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            FoodCollection foodCollection \u003d getFoodCollection(food.foodName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            foodCollection.addFoodToCollection(food, pet);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            internalList.add(FoodCollection.generateFoodCollection(food, pet));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adds a list of food items into the food collection list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param pets The list of food to be added."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addPetList(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Pet pet:pets) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            Set\u003cFood\u003e foodList \u003d pet.getFoodList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            for (Food food:foodList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                addFood(food, pet);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Updates the food collection list by replacing the items originally in the list with the given list of foods."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param pets The list of pets used to replace the original list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void update(List\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        internalList.setAll(new FoodCollectionList(pets).asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public ObservableList\u003cFoodCollection\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 97
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/DateOfBirth.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s date of birth."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DateOfBirth {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String.format(\"Date of birth must be valid, and follow the format of %s.\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeUtil.DATE_PATTERN.replaceAll(\"u\", \"y\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param dateOfBirth A valid date of birth."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(dateOfBirth);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidDateOfBirth(dateOfBirth), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d LocalDate.parse(dateOfBirth, DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns if a given string is a valid format of date of birth."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static boolean isValidDateOfBirth(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeUtil.parseLocalDate(test); // parsed date is never used"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } catch (DateTimeParseException p) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof DateOfBirth // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 value.equals(((DateOfBirth) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "limdylan": 7,
      "tianqi77": 1,
      "Zhu-Ruicong": 47,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Food.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Food object in Pet Store Helper."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidFoodName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name and amount of food should both exist \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            + \"and separated by a colon \u0027:\u0027.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d \"Food names should only contain alphanumeric characters and \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            + \"spaces only, and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_AMOUNT_CONSTRAINTS \u003d \"Food amount must be a positive integer number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String foodName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final Integer foodAmount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Food}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param foodName A valid food name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Food(String foodName, int foodAmount) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(foodName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidFoodName(foodName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.foodName \u003d formatFoodName(foodName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidFoodAmount(foodAmount), MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmount \u003d foodAmount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if a given string is a valid food name."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static boolean isValidFoodName(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if a given food amount is positive."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static boolean isValidFoodAmount(Integer test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Transfer food name in to the format of \"Xxx Xxx ...\"."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param foodName The food name passed in by user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return The formatted food name"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String formatFoodName(String foodName) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] foodNameSubStrings \u003d foodName.split(\" \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String formattedFoodName \u003d \"\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String n : foodNameSubStrings) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            n \u003d n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            formattedFoodName +\u003d (n + \" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return formattedFoodName.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same type as this food."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameType(Food other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodName.equals(other.foodName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if the input food object is of same amount as this food."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSameAmount(Food other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return foodAmount.equals(other.foodAmount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || ((other instanceof Food) // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameType((Food) other)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 isSameAmount((Food) other)); // state checks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(foodAmount, foodName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return \"[\" + foodName + \"]: \" + foodAmount;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "tianqi77": 20,
      "Zhu-Ruicong": 67,
      "shenghaoc": 19
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Gender.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s gender in the pet store helper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: Only two valid constants: FEMALE and MALE."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public enum Gender {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    FEMALE (\"FEMALE\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    MALE (\"MALE\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Gender should be either male or female\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param gender A valid gender."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Gender(String gender) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.value \u003d gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return (test.equalsIgnoreCase(\"MALE\")) || (test.equalsIgnoreCase(\"FEMALE\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return value.substring(0, 1) + value.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 7,
      "Zhu-Ruicong": 23,
      "shenghaoc": 6
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s name in the pet store helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        fullName \u003d formatName(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Transfer name in to the format of \"Xxx Xxx ...\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param name The name passed in by user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return The formatted name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String formatName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] nameSubStrings \u003d name.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String formattedName \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String n : nameSubStrings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            n \u003d n.substring(0, 1).toUpperCase() + n.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            formattedName +\u003d (n + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return formattedName.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return fullName.compareTo(other.fullName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "tianqi77": 14,
      "Zhu-Ruicong": 4,
      "shenghaoc": 2,
      "-": 53
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Tests that a {@code Pet}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPet\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean test(Pet pet) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(pet.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4,
      "shenghaoc": 2,
      "-": 25
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Pet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet in the pet store helper."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Pet implements DisplayItem {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final DateOfBirth dateOfBirth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Species species;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cFood\u003e foodList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Pet(Name name, Gender gender, DateOfBirth dateOfBirth, Species species, Set\u003cFood\u003e foodList, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        initializeFoodList(foodList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DateOfBirth getDateOfBirth() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return dateOfBirth;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species getSpecies() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(foodList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if both pets have the same name."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a weaker notion of equality between two pets."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean isSamePet(Pet otherPet) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (otherPet \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return otherPet !\u003d null \u0026\u0026 otherPet.getName().equals(getName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return DisplaySystemType.PETS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns true if both pets have the same identity and data fields."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * This defines a stronger notion of equality between two pets."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof Pet)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Pet otherPet \u003d (Pet) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return otherPet.getName().equals(getName())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getGender().equals(getGender())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getDateOfBirth().equals(getDateOfBirth())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getSpecies().equals(getSpecies())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getFoodList().equals(getFoodList())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 otherPet.getTags().equals(getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Adding an input set of food into the foodList attribute of this pet. Note that items with repeating types are"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * combined to become one item."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param input The input set to food to be added."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void initializeFoodList(Set\u003cFood\u003e input) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Food toBeAdded:input) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            accumulateSameType(toBeAdded);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Add a food into the food list of the pet without creating items of duplicate names."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void accumulateSameType(Food toBeAdded) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Food food:foodList) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            if (food.isSameType(toBeAdded)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                toBeAdded \u003d new Food(toBeAdded.foodName, toBeAdded.foodAmount + food.foodAmount);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                foodList.remove(food);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        foodList.add(toBeAdded);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return Objects.hash(name, gender, dateOfBirth, species, foodList, tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Date Of Birth: \")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getDateOfBirth())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Species: \")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(getSpecies())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                .append(\" Foods: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getFoodList().forEach(builder::append);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 8,
      "Zhu-Ruicong": 145,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Species.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Pet\u0027s Species in the pet store helper."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSpecies(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class Species {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \"Species should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * The first character of the species must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final String species;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Constructs a {@code Species}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @param species A valid species name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Species(String species) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(species);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        checkArgument(isValidSpecies(species), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.species \u003d formatSpecies(species);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns true if a given string is a valid species."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static boolean isValidSpecies(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Transfer species string in to the format of \"Xxx Xxx ...\"."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param species The species passed in by user"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return The formatted species string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public String formatSpecies(String species) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String[] speciesSubStrings \u003d species.split(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String formattedSpecies \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (String s : speciesSubStrings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            s \u003d s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            formattedSpecies +\u003d (s + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return formattedSpecies.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                || (other instanceof Species // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 species.equals(((Species) other).species)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return species.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 16,
      "Zhu-Ruicong": 46,
      "shenghaoc": 11
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Tag in the pet store helper"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Tag implements Comparable\u003cTag\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric and restricted to 1 word only.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.tagName \u003d tagName.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(Tag o) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tagName.compareTo(o.tagName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 6,
      "tianqi77": 2,
      "Zhu-Ruicong": 2,
      "shenghaoc": 1,
      "-": 48
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/exceptions/DuplicatePetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation will result in duplicate Pets (Pets are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class DuplicatePetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public DuplicatePetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(\"Operation would result in duplicate pets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 10,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/pet/exceptions/PetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Signals that the operation is unable to find the specified pet."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class PetNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 5,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/DateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Represents the date-time of a slot. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * declared in {@link #isValidDateTime(String)}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DateTime implements Comparable\u003cDateTime\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            String.format(\"Date and time must be valid, and follow the format of %s.\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            DateTimeUtil.DATETIME_PATTERN.replaceAll(\"u\", \"y\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final LocalDateTime value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Constructs a {@code DateTime}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @param dateTime A valid date-time."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DateTime(String dateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d DateTimeUtil.parseLocalDateTime(dateTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the value as a {@code LocalDateTime}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDateTime toLocalDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the date of this object  as a {@code LocalDate}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDate toLocalDate() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.toLocalDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the time of this object as a {@code LocalTime}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalTime toLocalTime() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.toLocalTime();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns if a given string is in the correct format for date-time,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * and when parsed, the date-time comes after the Unix epoch."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalDateTime mightBeValid \u003d DateTimeUtil.parseLocalDateTime(test);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return isValidDateTime(mightBeValid);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (DateTimeParseException p) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static boolean isValidDateTime(LocalDateTime test) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return test.isAfter(LocalDate.EPOCH.atStartOfDay());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Checks if this date-time is before {@code other}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isBefore(DateTime other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.isBefore(other.value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Checks if this date-time is after {@code other}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isAfter(DateTime other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.isAfter(other.value);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns a copy of this date-time with the specified amount added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DateTime plus(TemporalAmount amountToAdd) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new DateTime(value.plus(amountToAdd));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.compareTo(other.value);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return DateTimeUtil.formatLocalDateTime(value);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 value.equals(((DateTime) other).value)); // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 123
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/Schedule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.stream.Collectors.toList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.exceptions.SlotNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ListChangeListener.Change;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A collection of slots that does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Unlike {@link package clzzz.helper.model.UniquePetList}, a schedule is allowed to contain duplicate slots."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final ObservableList\u003cSlot\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Schedule() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ListChangeListener\u003cSlot\u003e sortListOnChange \u003d (Change\u003c? extends Slot\u003e c) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                if (c.wasAdded() || c.wasRemoved()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    c.getList().sort(null); // sort using natural ordering"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.internalList.addListener(sortListOnChange);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if the schedule contains an identical slot as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean contains(Slot toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Adds a slot to the schedule."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void add(Slot toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the slot {@code target} in the schedule with {@code editedSlot}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code target} must exist in the schedule."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(target, editedSlot);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.set(index, editedSlot);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Removes the given slot from the schedule."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The slot must exist in the schedule."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void remove(Slot toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new SlotNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(Schedule replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Replaces the contents of this schedule with {@code slots}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void setSlots(List\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(slots);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        internalList.setAll(slots);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public ObservableList\u003cSlot\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns the backing list for a specific pet."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public ObservableList\u003cSlot\u003e getInternalUnmodifiableListForPetName(String petName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cString\u003e petNames \u003d new ArrayList\u003c\u003e(Arrays.asList(petName.split(\"\\\\s\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return internalUnmodifiableList.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .filter(new SlotPetNamePredicate(petNames))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .collect(Collectors.collectingAndThen(toList(), FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                || (other instanceof Schedule // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 internalList.equals(((Schedule) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 14,
      "limdylan": 105,
      "Zhu-Ruicong": 1,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/Slot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Represents a Slot in the pet store helper schedule system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class Slot implements Comparable\u003cSlot\u003e, DisplayItem {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Pet pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final SlotDuration duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Slot(Pet pet, DateTime dateTime, SlotDuration duration) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireAllNonNull(pet, dateTime, duration);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Pet getPet() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public SlotDuration getDuration() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the starting time of the slot, regardless of its date."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return dateTime.toLocalTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the date on which the slot falls on, regardless of time of day."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDateTime().toLocalDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the ending datetime of the slot, based on its starting datetime and duration."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDateTime().plus(duration);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the ending time of the slot, based on its starting time and duration."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public LocalTime getEndTime() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getTime().plus(duration);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if both slots fall on the same date, regardless of time of day."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isSameDate(Slot othersSlot) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDate().equals(othersSlot.getDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot starts and ends on the same date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isWithinOneDay() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalDate endDate \u003d getEndDateTime().toLocalDate();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getDate().equals(endDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot is in conflict with the given other slot."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean isInConflictWith(Slot otherSlot) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (this \u003d\u003d otherSlot) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            // otherSlot is a reference to this object,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            // and a slot cannot be in conflict with itself"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (this.equals(otherSlot)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            // two separate slots occuring on the same datetime"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            // and having the same duration must be in conflict with each other."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime start \u003d getDateTime();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime end \u003d getEndDateTime();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime otherStart \u003d otherSlot.getDateTime();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        DateTime otherEnd \u003d otherSlot.getEndDateTime();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return start.isBefore(otherEnd) \u0026\u0026 otherStart.isBefore(end);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if this slot is in conflict with one or more other slots."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean hasConflict(List\u003cSlot\u003e allSlots) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return allSlots.stream()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .anyMatch(otherSlot -\u003e isInConflictWith(otherSlot));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns a new slot, with the current pet replaced with {@code newPet}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Slot replacePetWith(Pet newPet) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new Slot(newPet, dateTime, duration);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Compares this slot to another slot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * The comparison is first done by their datetimes, then by their durations,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * then by the names of the pets occupying the slots."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(Slot other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (dateTime.compareTo(other.dateTime) !\u003d 0) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return dateTime.compareTo(other.dateTime);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (duration.compareTo(other.duration) !\u003d 0) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return duration.compareTo(other.duration);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return pet.getName().compareTo(other.pet.getName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplaySystemType getDisplaySystemType() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return DisplaySystemType.SCHEDULE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns true if all fields of both slots are the same."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!(other instanceof Slot)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Slot otherSlot \u003d (Slot) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return otherSlot.getPet().equals(getPet())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 otherSlot.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 otherSlot.getDuration().equals(getDuration());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return Objects.hash(pet, dateTime, duration);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.format(\"%s %s - %s (%s)\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getDate().format(DateTimeUtil.DATE_FORMAT),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                getTime(), getEndTime(), getPet().getName());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 171,
      "Zhu-Ruicong": 1,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/SlotConflictPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Tests that a {@code Slot} is in conflict with any other slots."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class SlotConflictPredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final List\u003cSlot\u003e allSlots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public SlotConflictPredicate(List\u003cSlot\u003e allSlots) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.allSlots \u003d new ArrayList\u003c\u003e(allSlots);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return slot.hasConflict(allSlots);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                || (other instanceof SlotConflictPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 allSlots.equals(((SlotConflictPredicate) other).allSlots)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 27,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/SlotDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code DateTime} matches the given date."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotDatePredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final List\u003cLocalDate\u003e dates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public SlotDatePredicate(List\u003cLocalDate\u003e dates) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.dates \u003d dates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (LocalDate date : dates) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (date.isEqual(slot.getDate())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof SlotDatePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                \u0026\u0026 dates.equals(((SlotDatePredicate) other).dates)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 21,
      "limdylan": 1,
      "tianqi77": 11,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/SlotDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.temporal.Temporal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.temporal.TemporalAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.temporal.TemporalUnit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Represents the duration of a slot. Guarantees: immutable; is valid as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * declared in {@link #isValidDuration(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class SlotDuration implements Comparable\u003cSlotDuration\u003e, TemporalAmount {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \"Duration must be positive, non-zero and shorter than a day.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final Duration value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public SlotDuration(String duration) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d Duration.ofMinutes(Long.parseLong(duration));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private SlotDuration(Duration duration) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.value \u003d duration;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns if a given string is a valid representation of number of minutes,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * and when parsed, the duration is positive, non-zero and shorter than a day."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static boolean isValidDuration(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            long minutes \u003d Long.parseLong(test);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Duration mightBeValid \u003d Duration.ofMinutes(minutes);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return isValidDuration(mightBeValid);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static boolean isValidDuration(Duration test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return !test.isNegative() // positive"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 !test.isZero() // non-zero"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 test.compareTo(Duration.ofDays(1)) \u003c 0; // shorter than a day"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static SlotDuration between(Temporal startInclusive, Temporal endExclusive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return new SlotDuration(Duration.between(startInclusive, endExclusive));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public long toMinutes() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.toMinutes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public long get(TemporalUnit unit) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.get(unit);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public List\u003cTemporalUnit\u003e getUnits() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.getUnits();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Temporal addTo(Temporal temporal) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.addTo(temporal);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Temporal subtractFrom(Temporal temporal) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.subtractFrom(temporal);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int compareTo(SlotDuration other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.compareTo(other.value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return String.valueOf(value.toMinutes());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                || (other instanceof SlotDuration // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 value.equals(((SlotDuration) other).value)); // state check"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 104
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/SlotPetNamePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Tests that a {@code Slot}\u0027s {@code Pet}\u0027s {@code Name} matches the given name exactly."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotPetNamePredicate implements Predicate\u003cSlot\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private final List\u003cString\u003e petName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public SlotPetNamePredicate(List\u003cString\u003e petName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean test(Slot slot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return petName.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(slot.getPet().getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                || (other instanceof SlotPetNamePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                \u0026\u0026 petName.equals(((SlotPetNamePredicate) other).petName)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 22,
      "tianqi77": 6,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/slot/exceptions/SlotNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.slot.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Signals that the operation is unable to find the specified slot."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class SlotNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Contains utility methods for populating {@code Pet Tracker} with sample data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static Pet[] getSamplePets() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return new Pet[] {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Alex\"), Gender.MALE, new DateOfBirth(\"1/12/2005\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        getFoodSet(\"cat food:10\"), getTagSet(\"dumb\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Bob\"), Gender.FEMALE, new DateOfBirth(\"10/12/2001\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        getFoodSet(\"cat food:10\"), getTagSet(\"tall\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Cindy\"), Gender.MALE, new DateOfBirth(\"2/10/2019\"), new Species(\"cat\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        getFoodSet(\"cat food:10\"), getTagSet(\"small\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"David\"), Gender.FEMALE, new DateOfBirth(\"4/12/2017\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"angry\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Elsa\"), Gender.FEMALE, new DateOfBirth(\"6/6/2019\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:15\"), getTagSet(\"lazy\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Pet(new Name(\"Foo\"), Gender.MALE, new DateOfBirth(\"1/1/2011\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Gru\"), Gender.MALE, new DateOfBirth(\"10/1/1999\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:15\"), getTagSet(\"oldest\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Helen\"), Gender.FEMALE, new DateOfBirth(\"1/1/2011\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Inn\"), Gender.MALE, new DateOfBirth(\"1/1/2011\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Judy\"), Gender.FEMALE, new DateOfBirth(\"1/1/2011\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Kelly\"), Gender.FEMALE, new DateOfBirth(\"1/4/2016\"), new Species(\"goose\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"goose food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Leo\"), Gender.MALE, new DateOfBirth(\"12/12/2000\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Molly\"), Gender.FEMALE, new DateOfBirth(\"1/1/2011\"), new Species(\"snake\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"snake food:20\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Newbie\"), Gender.MALE, new DateOfBirth(\"14/9/2018\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Oligay\"), Gender.FEMALE, new DateOfBirth(\"12/7/2019\"), new Species(\"snake\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"snake food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Pele\"), Gender.MALE, new DateOfBirth(\"1/12/2019\"), new Species(\"snake\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"snake food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Queen\"), Gender.MALE, new DateOfBirth(\"14/11/2019\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Real\"), Gender.FEMALE, new DateOfBirth(\"11/12/2019\"), new Species(\"hamster\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"hamster food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Silly\"), Gender.FEMALE, new DateOfBirth(\"12/1/2020\"), new Species(\"hamster\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"hamster food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Tear\"), Gender.FEMALE, new DateOfBirth(\"12/1/2019\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Ugly\"), Gender.MALE, new DateOfBirth(\"1/10/2018\"), new Species(\"dog\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"dog food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Villa\"), Gender.MALE, new DateOfBirth(\"4/6/2014\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Windy\"), Gender.MALE, new DateOfBirth(\"1/7/2019\"), new Species(\"hamster\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"hamster food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Xavi\"), Gender.MALE, new DateOfBirth(\"12/1/2019\"), new Species(\"hamster\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"hamster food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Yolo\"), Gender.MALE, new DateOfBirth(\"1/1/2011\"), new Species(\"rabbit\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        getFoodSet(\"rabbit food:10\"), getTagSet(\"new\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            new Pet(new Name(\"Zoo\"), Gender.MALE, new DateOfBirth(\"1/1/2011\"), new Species(\"hamster\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        getFoodSet(\"hamster food:10\"), getTagSet(\"new\"))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static Slot[] getSampleSlots(PetTracker samplePt) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Slot[] {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Alex\")), new DateTime(\"8/4/2020 1500\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"75\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"David\")), new DateTime(\"17/4/2020 1200\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Elsa\")), new DateTime(\"18/4/2020 1200\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"60\")),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Xavi\")), new DateTime(\"18/4/2020 1600\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"60\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Foo\")), new DateTime(\"18/4/2020 1800\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"80\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Gru\")), new DateTime(\"6/4/2020 1300\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Helen\")), new DateTime(\"7/4/2020 1600\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"135\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Oligay\")), new DateTime(\"8/4/2020 1800\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Zoo\")), new DateTime(\"8/4/2020 1000\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Yolo\")), new DateTime(\"12/4/2020 1100\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"90\")),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Villa\")), new DateTime(\"12/4/2020 1300\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Windy\")), new DateTime(\"12/4/2020 1500\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"60\")),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Elsa\")), new DateTime(\"13/4/2020 1900\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Kelly\")), new DateTime(\"14/4/2020 1300\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"90\")),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Leo\")), new DateTime(\"15/4/2020 1300\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"120\")),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Alex\")), new DateTime(\"9/4/2020 1700\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Bob\")), new DateTime(\"9/4/2020 1200\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"100\")),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            new Slot(samplePt.getPet(new Name(\"Newbie\")), new DateTime(\"10/4/2020 1200\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    new SlotDuration(\"60\"))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static ReadOnlyPetTracker getSamplePetTrackerWithSlots() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetTracker samplePt \u003d new PetTracker();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        for (Pet samplePet : getSamplePets()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            samplePt.addPet(samplePet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (Slot sampleSlot : getSampleSlots(samplePt)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            samplePt.addSlot(sampleSlot);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return samplePt;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Returns a food set containing the list of strings given."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static Set\u003cFood\u003e getFoodSet(String... strings) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cFood\u003e set \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (String t : strings) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            String[] temp \u003d t.split(\":\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Food food \u003d new Food(temp[0], Integer.parseInt(temp[1]));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            set.add(food);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return set;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 46,
      "Zhu-Ruicong": 58,
      "shenghaoc": 31,
      "-": 22
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonAdaptedFood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String foodName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String foodAmount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given {@code foodName}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedFood(String food) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String[] foodDetails \u003d food.split(\":\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.foodName \u003d foodDetails[0];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.foodAmount \u003d foodDetails[1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodName \u003d source.foodName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodAmount \u003d String.valueOf(source.foodAmount);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public String getFood() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return foodName + \":\" + foodAmount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Food.isValidFoodName(foodName)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Food.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Integer modelFoodAmount \u003d Integer.valueOf(foodAmount);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Food.isValidFoodAmount(modelFoodAmount)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Food.MESSAGE_AMOUNT_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Food(foodName, modelFoodAmount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 56
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonAdaptedPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Jackson-friendly version of {@link Pet}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonAdaptedPet {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String gender;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String dateOfBirth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String species;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foodList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonAdaptedPet} with the given pet details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public JsonAdaptedPet(@JsonProperty(\"name\") String name, @JsonProperty(\"gender\") String gender,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                @JsonProperty(\"dateOfBirth\") String dateOfBirth, @JsonProperty(\"species\") String species,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                @JsonProperty(\"foodList\") List\u003cJsonAdaptedFood\u003e foodList,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.dateOfBirth \u003d dateOfBirth;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.species \u003d species;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (foodList !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.foodList.addAll(foodList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code Pet} into this class for Jackson use."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedPet(Pet source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        gender \u003d source.getGender().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        dateOfBirth \u003d source.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        species \u003d source.getSpecies().toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        foodList.addAll(source.getFoodList().stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this Jackson-friendly adapted pet object into the model\u0027s {@code Pet} object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted pet."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Pet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final List\u003cTag\u003e petTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final List\u003cFood\u003e petFoods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedFood food : foodList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petFoods.add(food.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Gender.isValidGender(gender)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        final Gender modelGender \u003d Gender.valueOf(gender.toUpperCase()); // TODO: refactor gender"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (dateOfBirth \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                    DateOfBirth.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!DateOfBirth.isValidDateOfBirth(dateOfBirth)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final DateOfBirth modelDateOfBirth \u003d new DateOfBirth(dateOfBirth);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (species \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Species.isValidSpecies(species)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Species modelSpecies \u003d new Species(species);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(petTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Set\u003cFood\u003e modelFoods \u003d new HashSet\u003c\u003e(petFoods);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Pet(modelName, modelGender, modelDateOfBirth, modelSpecies, modelFoods, modelTags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 5,
      "shenghaoc": 120
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonAdaptedSlot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.slot.SlotParserUtil.MESSAGE_INVALID_PETNAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.slot.SlotParserUtil.MESSAGE_PET_DOES_NOT_EXIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Jackson-friendly version of {@link Slot}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class JsonAdaptedSlot {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Slot\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final String duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Constructs a {@code JsonAdaptedSlot} with the given {@code pet},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code dateTime} and {@code duration}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedSlot(@JsonProperty(\"name\") String name, @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            @JsonProperty(\"duration\") String duration) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code Slot} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonAdaptedSlot(Slot source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        name \u003d source.getPet().getName().fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        duration \u003d source.getDuration().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Converts this Jackson-friendly adapted slot object into the model\u0027s"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * {@code Slot} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *                               the adapted slot."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Slot toModelType(PetTracker petTracker) throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_PETNAME);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Pet modelPet;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            modelPet \u003d petTracker.getPet(new Name(name));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } catch (PetNotFoundException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new ParseException(MESSAGE_PET_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, SlotDuration.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!SlotDuration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                String.format(SlotDuration.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        final SlotDuration modelDuration \u003d new SlotDuration(duration);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new Slot(modelPet, modelDateTime, modelDuration);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 21,
      "shenghaoc": 71
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonPetTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.DateTimeUtil.BACK_UP_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A class to access PetTracker data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class JsonPetTrackerStorage implements PetTrackerStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPetTrackerStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonPetTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return readPetTracker(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Similar to {@link #readPetTracker()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Optional\u003cJsonSerializablePetTracker\u003e jsonPetTracker \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                filePath, JsonSerializablePetTracker.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (!jsonPetTracker.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return Optional.of(jsonPetTracker.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        savePetTracker(petTracker, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, LocalDateTime timestamp) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        savePetTracker(petTracker, filePath.resolveSibling(timestamp.format(BACK_UP_FORMAT) + \".json\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Similar to {@link #savePetTracker(ReadOnlyPetTracker)}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(petTracker);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePetTracker(petTracker), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 87
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonSerializablePetTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * An Immutable PetTracker that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "@JsonRootName(value \u003d \"pettracker\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class JsonSerializablePetTracker {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PET \u003d \"Pets list contains duplicate pet(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedPet\u003e pets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final List\u003cJsonAdaptedSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Constructs a {@code JsonSerializablePetTracker} with the given pets."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonSerializablePetTracker(@JsonProperty(\"pets\") List\u003cJsonAdaptedPet\u003e pets,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      @JsonProperty(\"slots\") List\u003cJsonAdaptedSlot\u003e slots) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.pets.addAll(pets);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.slots.addAll(slots);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts a given {@code ReadOnlyPetTracker} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePetTracker}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public JsonSerializablePetTracker(ReadOnlyPetTracker source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pets.addAll(source.getPetList().stream().map(JsonAdaptedPet::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        slots.addAll(source.getSlotList().stream().map(JsonAdaptedSlot::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Converts this pet tracker into the model\u0027s {@code PetTracker} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public PetTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker petTracker \u003d new PetTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedPet jsonAdaptedPet : pets) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Pet pet \u003d jsonAdaptedPet.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            if (petTracker.hasPet(pet)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTracker.addPet(pet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (JsonAdaptedSlot jsonAdaptedSlot: slots) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Slot slot \u003d jsonAdaptedSlot.toModelType(petTracker);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petTracker.addSlot(slot);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 68
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/PetTrackerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Represents a storage for {@link clzzz.helper.model.PetTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public interface PetTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns PetTracker data as a {@link ReadOnlyPetTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @see #getPetTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Saves the given {@link ReadOnlyPetTracker} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param petTracker cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Saves the given {@link ReadOnlyPetTracker} to the storage in a separate file with timestamp."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param petTracker cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @param timestamp cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker, LocalDateTime timestamp) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @see #savePetTracker(ReadOnlyPetTracker)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 54
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public interface Storage extends PetTrackerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Path getPetTrackerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4,
      "shenghaoc": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.DateTimeUtil.BACK_UP_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * Manages storage of PetTracker data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private PetTrackerStorage petTrackerStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public StorageManager(PetTrackerStorage petTrackerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.petTrackerStorage \u003d petTrackerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PetTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerStorage.getPetTrackerFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return readPetTracker(petTrackerStorage.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public Optional\u003cReadOnlyPetTracker\u003e readPetTracker(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return petTrackerStorage.readPetTracker(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        savePetTracker(petTracker, petTrackerStorage.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, LocalDateTime timestamp) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        savePetTracker(petTracker,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                petTrackerStorage.getPetTrackerFilePath().resolveSibling(timestamp.format(BACK_UP_FORMAT) + \".json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTrackerStorage.savePetTracker(petTracker, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 15,
      "shenghaoc": 16,
      "-": 55
    }
  },
  {
    "path": "src/main/java/clzzz/helper/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Represents a storage for {@link clzzz.helper.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (CommandException | IllegalValueException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "         * @see clzzz.helper.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, IllegalValueException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 3,
      "shenghaoc": 4,
      "-": 70
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/DisplaySystemType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Represents the type of system to be shown in the display board in the Pet Store Helper."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public enum DisplaySystemType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    PETS(\"p\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    SCHEDULE(\"s\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    INVENTORY(\"i\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    CALENDAR(\"c\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    FOOD_AMOUNT_AND_PET(\"fp\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    STATISTICS(\"stats\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    NO_CHANGE(DisplaySystemType.UNUSED_CLI_ARG);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            \"System type must be p (pets), s (schedule), c (calendar) or i(inventory).\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String UNUSED_CLI_ARG \u003d \"unused\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final String cliArg;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    DisplaySystemType(String cliArg) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.cliArg \u003d cliArg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the corresponding {@code DisplaySystemType} based on the {@code cliArg} passed in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static DisplaySystemType fromCliArg(String cliArg) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        for (DisplaySystemType type : DisplaySystemType.values()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (type.isAvailableToUser() \u0026\u0026 type.cliArg.equals(cliArg)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        throw new IllegalArgumentException(cliArg);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private boolean isAvailableToUser() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return !cliArg.equals(UNUSED_CLI_ARG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return name().toLowerCase();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 38,
      "tianqi77": 1,
      "Zhu-Ruicong": 2,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/FeedbackDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class FeedbackDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"FeedbackDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private TextArea feedbackDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public FeedbackDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        feedbackDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 5,
      "shenghaoc": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103-w15-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 2,
      "-": 99
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.calendar.CalendarPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private DisplayListPanel displayListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private FeedbackDisplay feedbackDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private OverallStats overallStats;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private StackPane feedbackDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        setWindowStyle();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        displayListPanel \u003d new DisplayListPanel(logic.getFilteredDisplayList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getPetTracker().getSlotList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(displayListPanel.getRoot());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        feedbackDisplay \u003d new FeedbackDisplay();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        feedbackDisplayPlaceholder.getChildren().add(feedbackDisplay.getRoot());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Changes the system being displayed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void handleChangeDisplay(DisplaySystemType type) throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case PETS: // fallthrough"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case SCHEDULE:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            displayListPanel.updateWith(logic.getFilteredDisplayList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            displayListPanel.collapseInformationView();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            resultDisplayPlaceholder.getChildren().set(0, displayListPanel.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case INVENTORY:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            displayListPanel.updateWith(logic.getFilteredDisplayList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            displayListPanel.expandInformationView();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            resultDisplayPlaceholder.getChildren().set(0, displayListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case CALENDAR:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            calendarPanel.construct();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            resultDisplayPlaceholder.getChildren().set(0, calendarPanel.getRoot());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        case STATISTICS:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            resultDisplayPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            overallStats \u003d new OverallStats(logic.getFilteredPetList(), logic.getFilteredSlotList(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    logic.getFilteredFoodCollectionList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            resultDisplayPlaceholder.getChildren().add(overallStats.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        case NO_CHANGE:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            handleChangeDisplay(logic.getDisplaySystemType());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new CommandException(DisplayCommand.MESSAGE_INVALID_SYSTEM_TYPE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void setWindowStyle() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        primaryStage.initStyle(StageStyle.TRANSPARENT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public OverallStats getOverallStats() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return overallStats;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * @see clzzz.helper.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            feedbackDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            handleChangeDisplay(commandResult.getDisplaySystemType());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            feedbackDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 6,
      "limdylan": 45,
      "tianqi77": 13,
      "Zhu-Ruicong": 1,
      "shenghaoc": 11,
      "-": 153
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/OverallStats.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.temporal.ChronoField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.beans.binding.DoubleBinding;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.shape.Rectangle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " * Panel containing the overall statistics as charts and tables. The stats are displayed vertically."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class OverallStats extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String FXML \u003d \"OverallStats.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private PieChart petStats;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private BarChart\u003cString, Number\u003e foodStats;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Text petTitle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Text foodTitle;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Text firstDay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Text secondDay;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Text thirdDay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Pane timeTablePlaceHolder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private HBox hbox;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private ArrayList\u003cRectangle\u003e rectangles;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public OverallStats(ObservableList\u003cPet\u003e pets, ObservableList\u003cSlot\u003e slots, ObservableList\u003cFoodCollection\u003e foodList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPaneProperty();;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setPetStats(pets);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setScheduleStats(slots);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setFoodStats(foodList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPaneProperty() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //make sure size of timetable is same as charts"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        hbox.prefWidthProperty().bind(this.getRoot().widthProperty().divide(2.5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        timeTablePlaceHolder.prefWidthProperty().bind(this.getRoot().widthProperty().divide(2.5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //60 is slightly larger than the sum of height of header and text \"Schedule\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        timeTablePlaceHolder.prefHeightProperty().bind(hbox.heightProperty().subtract(60));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setPetStats(ObservableList\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petStats.setData(getPieChartData(pets));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        petStats.setLabelsVisible(false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Group the pets by their species and returns the count number as data for pie chart"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param pets list of pets"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return data for pie chart"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e getPieChartData(ObservableList\u003cPet\u003e pets) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Map\u003cSpecies, Integer\u003e petsBySpecies \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (Pet p : pets) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (!petsBySpecies.containsKey(p.getSpecies())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                petsBySpecies.put(p.getSpecies(), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            petsBySpecies.replace(p.getSpecies(), petsBySpecies.get(p.getSpecies()) + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e data \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (Species s : petsBySpecies.keySet()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            data.add(new PieChart.Data(s.toString(), petsBySpecies.get(s)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return data;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Fill up the time table in recent 3 days, each rectangle represents the time slots where there is an appointment."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param slots The list of time slots"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setScheduleStats(ObservableList\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        setHeader();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rectangles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        getScheduleStats(slots);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (Rectangle rec : rectangles) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            timeTablePlaceHolder.getChildren().add(rec);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void getScheduleStats(ObservableList\u003cSlot\u003e slots) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (Slot s : slots) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            if (s.getDate().equals(LocalDate.now())) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                createRectangles(s.getTime(), s.getDuration(),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        timeTablePlaceHolder.widthProperty().divide(10000000));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            } else if (s.getDate().equals(LocalDate.now().plusDays(1))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                createRectangles(s.getTime(), s.getDuration(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        timeTablePlaceHolder.widthProperty().divide(3));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            } else if (s.getDate().equals(LocalDate.now().plusDays(2))) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                createRectangles(s.getTime(), s.getDuration(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                        timeTablePlaceHolder.widthProperty().divide(3).multiply(2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Create rectangles which represents slots."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param time start time of the appointment"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param duration duration of the appointment"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param xCoordinate x coordinate of the rectangle"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void createRectangles(LocalTime time, SlotDuration duration, DoubleBinding xCoordinate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Rectangle rec \u003d new Rectangle();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //find start point of the rectangle"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        long minutes \u003d time.get(ChronoField.MINUTE_OF_DAY);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //set position of the rectangles"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.xProperty().bind(xCoordinate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.yProperty().bind(timeTablePlaceHolder.heightProperty().multiply(minutes).divide(60 * 24));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //set style"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.arcHeightProperty().bind(timeTablePlaceHolder.widthProperty().divide(10));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.arcWidthProperty().bind(timeTablePlaceHolder.widthProperty().divide(10));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.setFill(Paint.valueOf(\"#ff8000\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //merge all conflicted slots together."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.setStrokeWidth(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //set size of rectangle"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rec.widthProperty().bind(timeTablePlaceHolder.widthProperty().divide(3));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        rec.heightProperty().bind(timeTablePlaceHolder.heightProperty().multiply(duration.toMinutes()).divide(24 * 60));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        rectangles.add(rec);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Set the header of time table to be recent dates."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setHeader() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String firstDayOfWeek \u003d LocalDate.now().getDayOfWeek().toString().substring(0, 1)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + LocalDate.now().getDayOfWeek().toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String secondDayOfWeek \u003d LocalDate.now().getDayOfWeek().plus(1).toString().substring(0, 1)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + LocalDate.now().getDayOfWeek().plus(1).toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String thirdDayOfWeek \u003d LocalDate.now().getDayOfWeek().plus(2).toString().substring(0, 1)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + LocalDate.now().getDayOfWeek().plus(2).toString().substring(1).toLowerCase();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String date1 \u003d LocalDate.now().format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String date2 \u003d LocalDate.now().plusDays(1).format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String date3 \u003d LocalDate.now().plusDays(2).format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        firstDay.setText(firstDayOfWeek.substring(0, 3) + \"\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + date1.substring(0, date1.length() - 5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        secondDay.setText(secondDayOfWeek.substring(0, 3) + \"\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + date2.substring(0, date2.length() - 5));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        thirdDay.setText(thirdDayOfWeek.substring(0, 3) + \"\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                + date3.substring(0, date3.length() - 5));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * create new bar chart and gather data"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param foodCollectionList list of food collections"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void setFoodStats(ObservableList\u003cFoodCollection\u003e foodCollectionList) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        BarChart\u003cString, Number\u003e tempFoodStats \u003d new BarChart\u003c\u003e(xAxis, yAxis);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        tempFoodStats.getData().add(getBarChartData(foodCollectionList));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        foodStats.setData(tempFoodStats.getData());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Get stats for food bar chart"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @param foodCollectionList The list of all food collections"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * @return data for bar chart"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e getBarChartData(ObservableList\u003cFoodCollection\u003e foodCollectionList) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e barChartData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        for (FoodCollection f : foodCollectionList) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            barChartData.getData().add(new XYChart.Data\u003c\u003e("
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    f.getName(), f.getAmount()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return barChartData;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 12,
      "tianqi77": 189,
      "Zhu-Ruicong": 1,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/ResizeHelper.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.event.EventType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Cursor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.MenuButton;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.ScrollBar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Custom class used for resizing the window after stage style is set to transparent"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Credit (StackOverflow)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * @author Alexander.Berg"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * @author Evgenii Kanivets"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * @author Zachary Perales"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class ResizeHelper {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final int CORNERDADIUS \u003d 20;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final int BORDERTHICKNESS \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static boolean doNotMoveWindow \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds resize listener that allows resize even if stage style is set to TRANSPARENT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * allows the user to drag the window at any part that is not a menu button, text field or scrollbar"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param stage must be already displayed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void addResizeListener(Stage stage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        addResizeListener(stage, 1, 1, Double.MAX_VALUE, Double.MAX_VALUE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds resize listener with specified maximum and minimum sizes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * @param stage must be already displayed"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void addResizeListener(Stage stage, double minWidth, double minHeight, double maxWidth,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                         double maxHeight) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ResizeListener resizeListener \u003d new ResizeListener(stage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.getScene().addEventHandler(MouseEvent.MOUSE_MOVED, resizeListener);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED, resizeListener);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.getScene().addEventHandler(MouseEvent.MOUSE_DRAGGED, resizeListener);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED, resizeListener);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, resizeListener);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        resizeListener.setMinWidth(minWidth);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        resizeListener.setMinHeight(minHeight);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        resizeListener.setMaxWidth(maxWidth);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        resizeListener.setMaxHeight(maxHeight);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ObservableList\u003cNode\u003e children \u003d stage.getScene().getRoot().getChildrenUnmodifiable();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Node child : children) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            doNotMoveWindow \u003d isUndraggable(resizeListener, child);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Allows the listener to detect if it is on an undraggable node even if the user is dragging the child of the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * undraggable node"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static void addListenerDeeply(Node node, EventHandler\u003cMouseEvent\u003e listener) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        node.addEventHandler(MouseEvent.MOUSE_MOVED, listener);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        node.addEventHandler(MouseEvent.MOUSE_PRESSED, listener);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        node.addEventHandler(MouseEvent.MOUSE_DRAGGED, listener);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        node.addEventHandler(MouseEvent.MOUSE_EXITED, listener);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        node.addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, listener);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (node instanceof Parent) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Parent parent \u003d (Parent) node;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            ObservableList\u003cNode\u003e children \u003d parent.getChildrenUnmodifiable();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            for (Node child : children) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                doNotMoveWindow \u003d isUndraggable(listener, child);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Determines if the current node should not be dragged"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static boolean isUndraggable(EventHandler\u003cMouseEvent\u003e listener, Node child) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        if (child instanceof ScrollBar || child instanceof MenuButton || child instanceof TextField) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            addListenerDeeply(child, listener);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * ResierListener class that handles both resize and dragging actions on given stage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    static class ResizeListener implements EventHandler\u003cMouseEvent\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private final Stage stage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private Cursor cursorEvent \u003d Cursor.DEFAULT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private boolean resizing \u003d true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private int border \u003d 4;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double startX \u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double startY \u003d 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double screenOffsetX \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double screenOffsetY \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Max and min sizes for controlled stage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double minWidth;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double maxWidth;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double minHeight;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private double maxHeight;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Initialize the ResizeLister to given stage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * @param stage must be already displayed, else NullPointerException will be thrown"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public ResizeListener(Stage stage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * @param minWidth minimum width"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setMinWidth(double minWidth) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.minWidth \u003d minWidth;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * @param maxWidth maximum width"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setMaxWidth(double maxWidth) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.maxWidth \u003d maxWidth;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * @param minHeight minimum height"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setMinHeight(double minHeight) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.minHeight \u003d minHeight;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * @param maxHeight maximum height"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setMaxHeight(double maxHeight) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            this.maxHeight \u003d maxHeight;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void handle(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            EventType\u003c? extends MouseEvent\u003e mouseEventType \u003d mouseEvent.getEventType();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            Scene scene \u003d stage.getScene();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double mouseEventX \u003d mouseEvent.getSceneX();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double mouseEventY \u003d mouseEvent.getSceneY();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double sceneWidth \u003d scene.getWidth();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double sceneHeight \u003d scene.getHeight();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (MouseEvent.MOUSE_MOVED.equals(mouseEventType) \u0026\u0026 !stage.isMaximized()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                handleMouseMovement(scene, mouseEventX, mouseEventY, sceneWidth, sceneHeight);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (MouseEvent.MOUSE_EXITED.equals(mouseEventType)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    || MouseEvent.MOUSE_EXITED_TARGET.equals(mouseEventType)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                scene.setCursor(Cursor.DEFAULT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (MouseEvent.MOUSE_PRESSED.equals(mouseEventType)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                handleMouseExit(mouseEventX, mouseEventY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (MouseEvent.MOUSE_DRAGGED.equals(mouseEventType) \u0026\u0026 !Cursor.DEFAULT.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                handleResize(mouseEvent, mouseEventX, mouseEventY);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (MouseEvent.MOUSE_PRESSED.equals(mouseEventType) \u0026\u0026 Cursor.DEFAULT.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                setScreenOffset(mouseEvent);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (MouseEvent.MOUSE_DRAGGED.equals(mouseEventType) \u0026\u0026 Cursor.DEFAULT.equals(cursorEvent) \u0026\u0026 !resizing) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                moveStage(mouseEvent);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void setScreenOffset(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            resizing \u003d false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            screenOffsetX \u003d stage.getX() - mouseEvent.getScreenX();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            screenOffsetY \u003d stage.getY() - mouseEvent.getScreenY();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void moveStage(MouseEvent mouseEvent) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setX(mouseEvent.getScreenX() + screenOffsetX);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setY(mouseEvent.getScreenY() + screenOffsetY);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void handleMouseMovement(Scene scene, double mouseEventX, double mouseEventY, double sceneWidth,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                         double sceneHeight) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            cursorEvent \u003d getCursorEventType(mouseEventX, mouseEventY, sceneWidth, sceneHeight);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            scene.setCursor(cursorEvent);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void handleMouseExit(double mouseEventX, double mouseEventY) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            startX \u003d stage.getWidth() - mouseEventX;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            startY \u003d stage.getHeight() - mouseEventY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Resizes the windows based on the current mouse event type and mouse position"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void handleResize(MouseEvent mouseEvent, double mouseEventX, double mouseEventY) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            resizing \u003d true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (!Cursor.W_RESIZE.equals(cursorEvent) \u0026\u0026 !Cursor.E_RESIZE.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                handleVerticalResize(mouseEvent, mouseEventY);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (!Cursor.N_RESIZE.equals(cursorEvent) \u0026\u0026 !Cursor.S_RESIZE.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                handleHorizontalResize(mouseEvent, mouseEventX);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            resizing \u003d false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Used when mouse event is on the left or right"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void handleHorizontalResize(MouseEvent mouseEvent, double mouseEventX) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double minWidth \u003d stage.getMinWidth() \u003e (border * 2) ? stage.getMinWidth() : (border * 2);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (Cursor.NW_RESIZE.equals(cursorEvent) || Cursor.W_RESIZE.equals(cursorEvent)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    || Cursor.SW_RESIZE.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (stage.getWidth() \u003e minWidth || mouseEventX \u003c 0) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    setStageWidth(stage.getX() - mouseEvent.getScreenX() + stage.getWidth());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    stage.setX(mouseEvent.getScreenX());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (stage.getWidth() \u003e minWidth || mouseEventX + startX - stage.getWidth() \u003e 0) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    setStageWidth(mouseEventX + startX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         * Used when mouse event is on the top or bottom"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void handleVerticalResize(MouseEvent mouseEvent, double mouseEventY) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            double minHeight \u003d stage.getMinHeight() \u003e (border * 2) ? stage.getMinHeight() : (border * 2);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (Cursor.NW_RESIZE.equals(cursorEvent) || Cursor.N_RESIZE.equals(cursorEvent)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    || Cursor.NE_RESIZE.equals(cursorEvent)) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (stage.getHeight() \u003e minHeight || mouseEventY \u003c 0) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    setStageHeight(stage.getY() - mouseEvent.getScreenY() + stage.getHeight());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    stage.setY(mouseEvent.getScreenY());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                if (stage.getHeight() \u003e minHeight || mouseEventY + startY - stage.getHeight() \u003e 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    setStageHeight(mouseEventY + startY);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private Cursor getCursorEventType(double mouseEventX, double mouseEventY, double sceneWidth,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                          double sceneHeight) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            if (mouseEventX \u003c border + CORNERDADIUS \u0026\u0026 mouseEventY \u003c border + CORNERDADIUS) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.NW_RESIZE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventX \u003c border + CORNERDADIUS \u0026\u0026 mouseEventY \u003e sceneHeight - border - CORNERDADIUS) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.SW_RESIZE;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventX \u003e sceneWidth - border - CORNERDADIUS \u0026\u0026 mouseEventY \u003c border + CORNERDADIUS) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.NE_RESIZE;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventX \u003e sceneWidth - border - CORNERDADIUS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                    \u0026\u0026 mouseEventY \u003e sceneHeight - border - CORNERDADIUS) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.SE_RESIZE;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventX \u003c border + BORDERTHICKNESS) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.W_RESIZE;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventX \u003e sceneWidth - border - BORDERTHICKNESS) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.E_RESIZE;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventY \u003c border + BORDERTHICKNESS) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.N_RESIZE;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else if (mouseEventY \u003e sceneHeight - border - BORDERTHICKNESS) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.S_RESIZE;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                return Cursor.DEFAULT;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void setStageWidth(double width) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            width \u003d Math.min(width, maxWidth);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            width \u003d Math.max(width, minWidth);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setWidth(width);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        private void setStageHeight(double height) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            height \u003d Math.min(height, maxHeight);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            height \u003d Math.max(height, minHeight);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            stage.setHeight(height);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 290,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.MainApp;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(clzzz.helper.ui.UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/pet_tracker.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/stylesheets/CuteTheme.css\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            ResizeHelper.addResizeListener(primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "shenghaoc": 26,
      "-": 60
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarBuffer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A region of a calendar view that acts a buffer between other regions, for padding purposes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class CalendarBuffer extends CalendarRegion {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarBuffer.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarBuffer(LocalTime start, LocalTime end) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML, SlotDuration.between(start, end).toMinutes());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 24,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarConflict.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A region of a calendar view that represents a multiple conflicted slots."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class CalendarConflict extends CalendarRegion {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String CONFLICT_MESSAGE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \"Do `conflicts` to view details about each individual conflicted slots\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarConflict.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String idText;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String dateText;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String timeText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String petText;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label ids;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label petName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarConflict(List\u003cSlot\u003e conflictSlots, LocalTime start, LocalTime end, int lastDisplayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML, SlotDuration.between(start, end).toMinutes());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Slot lastSlot \u003d conflictSlots.get(conflictSlots.size() - 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String idsString \u003d IntStream.rangeClosed(lastDisplayedIndex - conflictSlots.size() + 1, lastDisplayedIndex)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .mapToObj(i -\u003e Integer.toString(i))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .reduce((a, b) -\u003e a + \", \" + b).orElseThrow();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.idText \u003d String.format(\"%s.\", idsString);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.dateText \u003d String.format(\"%s, %s\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                lastSlot.getDate().getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                lastSlot.getDate().format(DateTimeUtil.DATE_FORMAT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.timeText \u003d String.format(\"%s - %s\", start, end);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.petText \u003d conflictSlots.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .map(slot -\u003e slot.getPet().getName().toString())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .collect(Collectors.toSet())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        setText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void setText() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ids.setText(idText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        time.setText(timeText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petName.setText(petText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Creates a tooltip containing information about the conflicted slots."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Tooltip createTooltip() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String pattern \u003d \"%s\\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Date: %s\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Time period affected: %s\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Affected pets: %s\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"%s\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String tooltipText \u003d String.format(pattern,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                idText, dateText, timeText, petText, CONFLICT_MESSAGE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(tooltipText);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        tooltip.getStyleClass().add(\"tooltip-conflict\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        tooltip.setShowDuration(javafx.util.Duration.seconds(30));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tooltip;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 88,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A region of a calendar view that indicates the date."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class CalendarDate extends CalendarRegion {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Used to determine the width of this component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final SlotDuration DURATION \u003d new SlotDuration(\"60\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarDate.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarDate(LocalDate dateToShow) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML, DURATION.toMinutes());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String dayText \u003d dateToShow.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String dateText \u003d dateToShow.format(DateTimeUtil.DATE_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        day.setText(dayText);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        date.setText(dateText);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static int getWidth() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return (int) Math.round(DURATION.toMinutes() * WIDTH_SCALING_FACTOR);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 48,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ListChangeListener.Change;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Panel containing a calendar view of the schedule."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String NO_SLOTS \u003d \"No slots!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private final ObservableList\u003cSlot\u003e allSlots;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private GridPane gridPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarPanel(ObservableList\u003cSlot\u003e allSlots) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.allSlots \u003d allSlots;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        ListChangeListener\u003cSlot\u003e reconstructOnChange \u003d (Change\u003c? extends Slot\u003e c) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            while (c.next()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                construct();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        allSlots.addListener(reconstructOnChange);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Fills the grid pane with the slots."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void construct() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        clearAll();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (allSlots.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Label label \u003d new Label(NO_SLOTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            label.getStyleClass().add(\"calendar_big_label\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            gridPane.add(label, 0, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalTime earliestTime \u003d allSlots.stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .map(slot -\u003e slot.getTime())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .reduce((time1, time2) -\u003e (time1.isBefore(time2) ? time1 : time2))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        construct(earliestTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Fills the grid pane with the slots, given the earliest time of all slots."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void construct(LocalTime earliestTime) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int rowIndex \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Holding h \u003d new Holding();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Slot firstSlot \u003d allSlots.get(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        flushOutDate(rowIndex, firstSlot.getDate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        flushOutBuffer(earliestTime, rowIndex, earliestTime, firstSlot.getTime());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        for (int slotIndex \u003d 0; slotIndex \u003c allSlots.size(); slotIndex++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            Slot currSlot \u003d allSlots.get(slotIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (h.size() \u003e 0 \u0026\u0026 !h.overlaps(currSlot)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                flushOutHolding(earliestTime, rowIndex, h, slotIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                if (h.sameDay(currSlot)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    flushOutBuffer(earliestTime, rowIndex, h.end(), currSlot.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    rowIndex++;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    flushOutDate(rowIndex, currSlot.getDate());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    flushOutBuffer(earliestTime, rowIndex, earliestTime, currSlot.getTime());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                h.reset();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            h.add(currSlot);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        flushOutHolding(earliestTime, rowIndex, h, allSlots.size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Clears the previously constructed calendar."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void clearAll() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.getChildren().clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.getRowConstraints().clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.getColumnConstraints().clear();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Flushes out and renders a {@code CalendarBuffer}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void flushOutBuffer(LocalTime earliestTime, int rowIndex,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            LocalTime bufferStartTime, LocalTime bufferEndTime) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!bufferEndTime.isAfter(bufferStartTime)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colIndex \u003d getColIndex(earliestTime, bufferStartTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colSpan \u003d getColSpan(bufferStartTime, bufferEndTime);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        CalendarBuffer calendarBuffer \u003d new CalendarBuffer(bufferStartTime, bufferEndTime);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.add(calendarBuffer.getRoot(), colIndex, rowIndex, colSpan, 1);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Flushes out and renders a {@code CalendarDate}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void flushOutDate(int rowIndex, LocalDate date) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colIndex \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colSpan \u003d getColSpan(CalendarDate.DURATION);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        CalendarDate calendarDate \u003d new CalendarDate(date);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.add(calendarDate.getRoot(), colIndex, rowIndex, colSpan, 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Flushes out and renders all slots in holding."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void flushOutHolding(LocalTime earliestTime, int rowIndex, Holding h, int lastDisplayedIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (h.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            flushOutHoldingSingle(earliestTime, rowIndex, h.slots.get(0), lastDisplayedIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            flushOutHoldingMultiple(earliestTime, rowIndex, h, lastDisplayedIndex);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Flushes out and renders a {@code CalendarSlot}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void flushOutHoldingSingle(LocalTime earliestTime, int rowIndex, Slot slot, int lastDisplayedIndex) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colIndex \u003d getColIndex(earliestTime, slot.getTime());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colSpan \u003d getColSpan(slot.getDuration());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        CalendarSlot calendarSlot \u003d new CalendarSlot(slot, lastDisplayedIndex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Tooltip.install(calendarSlot.getRoot(), calendarSlot.createTooltip());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.add(calendarSlot.getRoot(), colIndex, rowIndex, colSpan, 1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Flushes out and renders a {@code CalendarConflict}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void flushOutHoldingMultiple(LocalTime earliestTime, int rowIndex, Holding h, int lastDisplayedIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colIndex \u003d getColIndex(earliestTime, h.start());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int colSpan \u003d getColSpan(h.start(), h.end());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        CalendarConflict calendarConflict \u003d new CalendarConflict(h.all(), h.start(), h.end(), lastDisplayedIndex);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Tooltip.install(calendarConflict.getRoot(), calendarConflict.createTooltip());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        gridPane.add(calendarConflict.getRoot(), colIndex, rowIndex, colSpan, 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private int getColIndex(LocalTime earliestTime, LocalTime slotTime) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assert slotTime.isBefore(earliestTime) : \"Given slot time is earlier than the earliest time!\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int delta \u003d 0;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (earliestTime.isBefore(slotTime)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            delta \u003d Math.toIntExact(SlotDuration.between(earliestTime, slotTime).toMinutes());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return CalendarDate.getWidth() + delta;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private int getColSpan(SlotDuration duration) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return Math.toIntExact(duration.toMinutes());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private int getColSpan(LocalTime startTime, LocalTime endTime) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return getColSpan(SlotDuration.between(startTime, endTime));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Encapsulates the list of all currently conflicted slots in holding."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private class Holding {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        private List\u003cSlot\u003e slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        private LocalTime startTime \u003d LocalTime.MAX;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        private LocalTime endTime \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Holding() {}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        void add(Slot slot) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            slots.add(slot);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            startTime \u003d startTime.isBefore(slot.getTime()) ? startTime : slot.getTime();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            endTime \u003d endTime.isAfter(slot.getEndTime()) ? endTime : slot.getEndTime();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        void reset() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            slots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            startTime \u003d LocalTime.MAX;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            endTime \u003d LocalTime.MIN;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        boolean overlaps(Slot slot) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return slots.stream().anyMatch(s -\u003e slot.isInConflictWith(s));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        boolean sameDay(Slot slot) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return slots.get(0).isSameDate(slot);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        int size() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return slots.size();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        List\u003cSlot\u003e all() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return slots;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalTime start() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return startTime;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        LocalTime end() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return endTime;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return slots.toString();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 233,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarRegion.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A UI Component that that constitutes a region of a calendar view."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public abstract class CalendarRegion extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final double WIDTH_SCALING_FACTOR \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    protected HBox slotPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarRegion(String fxml, long minutes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        slotPane.setPrefWidth(minutes * WIDTH_SCALING_FACTOR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 28,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/calendar/CalendarSlot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A region of a calendar view that represents a single slot."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class CalendarSlot extends CalendarRegion {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"calendar/CalendarSlot.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String idText;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String dateText;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String timeText;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private String petText;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label petName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public CalendarSlot(Slot slot, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML, slot.getDuration().toMinutes());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.idText \u003d String.format(\"%d.\", displayedIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.dateText \u003d String.format(\"%s, %s\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                slot.getDate().getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                slot.getDate().format(DateTimeUtil.DATE_FORMAT));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.timeText \u003d String.format(\"%s - %s\", slot.getTime(), slot.getEndTime());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.petText \u003d slot.getPet().getName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        setText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private void setText() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        id.setText(idText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        time.setText(timeText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petName.setText(petText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Creates a tooltip containing information about this slot."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public Tooltip createTooltip() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String pattern \u003d \"%s\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Date: %s\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Time: %s\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + \"Pet: %s\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String tooltipText \u003d String.format(pattern,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                idText, dateText, timeText, petText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(tooltipText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        tooltip.getStyleClass().add(\"tooltip-slot\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        tooltip.setShowDuration(javafx.util.Duration.seconds(30));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return tooltip;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 72,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/DisplayItem.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * An item to be displayed in a list in the Pet Store Helper."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Any class that is intended to be displayed as an item in a list in the Pet"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Store Helper should implement this interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public interface DisplayItem {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Returns the type of system that this item constitutes of."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    DisplaySystemType getDisplaySystemType();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 14,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/DisplayListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodAmountAndPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * Panel containing the list of display items."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class DisplayListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"list/DisplayListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private static final ObservableList\u003cDisplayItem\u003e EMPTY_DISPLAY_ITEM_LIST \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private ListView\u003cDisplayItem\u003e displayListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private ListView\u003cDisplayItem\u003e displayInformationView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private VBox displayInformationViewContainer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public DisplayListPanel(ObservableList\u003cDisplayItem\u003e displayList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        displayListView.setItems(displayList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        displayListView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setCellFactory(listView -\u003e new DisplayListViewCell());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Changes the backing list of display items to {@code newDisplayList}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public final void updateWith(ObservableList\u003cDisplayItem\u003e newDisplayList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        displayListView.setItems(newDisplayList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setItems(EMPTY_DISPLAY_ITEM_LIST);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Collapses the displayInformationView so that the displayListView occupies the entire screen."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void collapseInformationView() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationViewContainer.setPrefWidth(0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationViewContainer.setMinWidth(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        HBox.setHgrow(displayInformationViewContainer, Priority.NEVER);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setPrefWidth(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setMinWidth(0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        HBox.setHgrow(displayInformationView, Priority.NEVER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.getStyleClass().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Expands the displayInformationView for the display of inventory system."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void expandInformationView() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationViewContainer.setPrefWidth(displayListView.getPrefWidth());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationViewContainer.setMinWidth(displayListView.getPrefWidth());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        HBox.setHgrow(displayInformationViewContainer, Priority.ALWAYS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setPrefWidth(displayListView.getPrefWidth());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setMinWidth(displayListView.getMinWidth());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        HBox.setHgrow(displayInformationView, Priority.ALWAYS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.getStyleClass().add(\"pane-with-border\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Displays the amount breakdown of the food collection being clicked on through the list provided."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final void handleClickOnList(ObservableList\u003cDisplayItem\u003e foodAmountAndPets) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        displayInformationView.setItems(foodAmountAndPets);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DisplayItem}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    class DisplayListViewCell extends ListCell\u003cDisplayItem\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        protected void updateItem(DisplayItem item, boolean empty) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                switch (item.getDisplaySystemType()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                case PETS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    setGraphic(new PetCard((Pet) item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                case SCHEDULE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    List\u003cSlot\u003e allSlots \u003d displayListView.getItems()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                            .map(slot -\u003e (Slot) slot)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    setGraphic(new SlotCard((Slot) item, getIndex() + 1, allSlots).getRoot());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                case INVENTORY:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    setGraphic(new FoodCollectionCard((FoodCollection) item,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                            getIndex() + 1, DisplayListPanel.this::handleClickOnList).getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                case FOOD_AMOUNT_AND_PET:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    FoodAmountAndPet foodAmountAndPet \u003d (FoodAmountAndPet) item;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    setGraphic(new FoodAmountAndPetCard(foodAmountAndPet).getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    setGraphic(null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    setText(null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 63,
      "Zhu-Ruicong": 50,
      "shenghaoc": 8
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/FoodAmountAndPetCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodAmountAndPet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * An UI component that displays information of a {@code FoodAmountAndPet}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodAmountAndPetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"list/FoodAmountAndPetCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final FoodAmountAndPet foodAmountAndPet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label petName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label foodAmount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public FoodAmountAndPetCard(FoodAmountAndPet foodAmountAndPet) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        requireNonNull(foodAmountAndPet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodAmountAndPet \u003d foodAmountAndPet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petName.setText(foodAmountAndPet.getPetName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        foodAmount.setText(foodAmountAndPet.getFoodAmount().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof FoodAmountAndPetCard)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        FoodAmountAndPetCard card \u003d (FoodAmountAndPetCard) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return foodAmountAndPet.equals(card.foodAmountAndPet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "Zhu-Ruicong": 51,
      "shenghaoc": 2
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/FoodCollectionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * An UI component that displays information of a {@code FoodCollection}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodCollectionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"list/FoodCollectionCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final FoodCollection foodCollection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final MouseClickedHandler mouseClickedHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public FoodCollectionCard(FoodCollection foodCollection, int displayedIndex,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                              MouseClickedHandler mouseClickedHandler) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.foodCollection \u003d foodCollection;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.mouseClickedHandler \u003d mouseClickedHandler;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        name.setText(foodCollection.getName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        amount.setText(foodCollection.getAmount().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof FoodCollectionCard)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        FoodCollectionCard card \u003d (FoodCollectionCard) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 foodCollection.equals(card.foodCollection);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Handler of a mouth clicking event. Triggers the displaying of amount breakdown of this food collection."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private void handleMouthClicked() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        ObservableList\u003cDisplayItem\u003e displayItems \u003d CollectionUtil.map(foodCollection.getUnmodifiablePets(), pet -\u003e pet);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        mouseClickedHandler.handle(displayItems);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Represents a function that can handle a mouth click."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public interface MouseClickedHandler {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        void handle(ObservableList\u003cDisplayItem\u003e foodAmountAndPets);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "Zhu-Ruicong": 79,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/PetCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " * An UI component that displays information of a {@code Pet}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class PetCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"list/PetCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public final Pet pet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label dateOfBirth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Label species;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private FlowPane foodList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public PetCard(Pet pet, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        name.setText(pet.getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        gender.setText(pet.getGender().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        dateOfBirth.setText(pet.getDateOfBirth().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        species.setText(pet.getSpecies().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        pet.getFoodList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .forEach(food -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    Label foodLabel \u003d new Label(food.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    foodList.getChildren().add(foodLabel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        pet.getTags()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .forEach(tag -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                    tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        if (!(other instanceof PetCard)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        PetCard card \u003d (PetCard) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u0026\u0026 pet.equals(card.pet);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 16,
      "Zhu-Ruicong": 66,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/main/java/clzzz/helper/ui/list/SlotCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui.list;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * An UI component that displays information of a {@code Slot}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "public class SlotCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String FXML \u003d \"list/SlotCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public final Slot slot;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label petName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public SlotCard(Slot slot, int displayedIndex, List\u003cSlot\u003e allSlots) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.slot \u003d slot;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String idText \u003d String.format(\"%d. %s\", displayedIndex, slot.hasConflict(allSlots) ? \"[CONFLICT]\" : \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String dateTimeText \u003d String.format(\"%s, %s, %s - %s\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                slot.getDate().getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.US),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                slot.getDate().format(DateTimeUtil.DATE_FORMAT),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                slot.getTime(), slot.getEndTime());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String petText \u003d slot.getPet().getName().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        id.setText(idText);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        dateTime.setText(dateTimeText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        petName.setText(petText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        if (!(other instanceof SlotCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        SlotCard card \u003d (SlotCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                \u0026\u0026 slot.equals(card.slot);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 70,
      "shenghaoc": 4
    }
  },
  {
    "path": "src/main/resources/view/FeedbackDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-transparent\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003cTextArea fx:id\u003d\"feedbackDisplay\" editable\u003d\"false\" styleClass\u003d\"feedback-display\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "tianqi77": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Pet Store Tracker App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cImage url\u003d\"@/images/pet_tracker.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cScene fill\u003d\"#ffffff00\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cURL value\u003d\"@stylesheets/CuteTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        \u003cURL value\u003d\"@stylesheets/Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cVBox style\u003d\"-fx-background-color: transparent;\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cStackPane fx:id\u003d\"feedbackDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-colored-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cVBox fx:id\u003d\"petList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "          \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 11,
      "limdylan": 2,
      "tianqi77": 1,
      "-": 44
    }
  },
  {
    "path": "src/main/resources/view/OverallStats.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cStackPane minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         \u003cHBox minHeight\u003d\"1.0\" minWidth\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "             \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                 \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                         \u003cPieChart fx:id\u003d\"petStats\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                             \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cInsets bottom\u003d\"0.1\" left\u003d\"0.1\" right\u003d\"0.1\" top\u003d\"0.001\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                             \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                         \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                         \u003cText fx:id\u003d\"petTitle\" fill\u003d\"#38141d\" stroke\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Pets\" textAlignment\u003d\"CENTER\" textOrigin\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                             \u003cfont\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                             \u003c/font\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                         \u003c/Text\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                 \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                 \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"140.0\" style\u003d\"-fx-background-color: derive(white, -5%);\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                         \u003cHBox fx:id\u003d\"hbox\" alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                             \u003cchildren\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                         \u003cText fx:id\u003d\"firstDay\" fill\u003d\"#38141d\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                                 \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                         \u003c/Text\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                     \u003c/children\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                          \u003cText fx:id\u003d\"secondDay\" fill\u003d\"#38141d\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                                \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                          \u003c/Text\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003cHBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                         \u003cText fx:id\u003d\"thirdDay\" fill\u003d\"#38141d\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" textAlignment\u003d\"CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                                \u003cFont size\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                          \u003c/Text\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003c/children\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003c/HBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                              \u003cPane fx:id\u003d\"timeTablePlaceHolder\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" style\u003d\"-fx-background-color: transparent;\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                              \u003cText fill\u003d\"#38141d\" stroke\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Schedule\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                    \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" style\u003d\"-fx-background-color: white;\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003cBarChart fx:id\u003d\"foodStats\" alternativeRowFillVisible\u003d\"false\" horizontalGridLinesVisible\u003d\"false\" horizontalZeroLineVisible\u003d\"false\" legendVisible\u003d\"false\" minHeight\u003d\"1.0\" minWidth\u003d\"1.0\" verticalGridLinesVisible\u003d\"false\" verticalZeroLineVisible\u003d\"false\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                \u003cxAxis\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                  \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                \u003cyAxis\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                  \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                              \u003cText fx:id\u003d\"foodTitle\" fill\u003d\"#38141d\" stroke\u003d\"WHITE\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Food\" textAlignment\u003d\"CENTER\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003cfont\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                    \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                 \u003c/font\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 10,
      "tianqi77": 84
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarBuffer.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003cHBox id\u003d\"slotPane\" fx:id\u003d\"slotPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        styleClass\u003d\"calendar-grid-buffer\" /\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 7
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarConflict.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"slotPane\" fx:id\u003d\"slotPane\" styleClass\u003d\"calendar-grid-conflict\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003cVBox alignment\u003d\"TOP_LEFT\" prefHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"ids\" styleClass\u003d\"calendar_small_label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"calendar_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"petName\" styleClass\u003d\"calendar_small_label\" text\u003d\"\\$petName\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "limdylan": 13,
      "tianqi77": 1
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarDate.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"slotPane\" fx:id\u003d\"slotPane\" alignment\u003d\"BOTTOM_RIGHT\" styleClass\u003d\"calendar-grid-date\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER_RIGHT\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"day\" styleClass\u003d\"calendar_big_label\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"calendar_big_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "limdylan": 11,
      "tianqi77": 1
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cVBox style\u003d\"-fx-background-color: white;\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"calendar-scroll\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cGridPane fx:id\u003d\"gridPane\" styleClass\u003d\"calendar-grid\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 1,
      "limdylan": 9,
      "tianqi77": 1
    }
  },
  {
    "path": "src/main/resources/view/calendar/CalendarSlot.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"slotPane\" fx:id\u003d\"slotPane\" styleClass\u003d\"calendar-grid-cell\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003cVBox alignment\u003d\"TOP_LEFT\" prefHeight\u003d\"50\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"calendar_small_label\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"calendar_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    \u003cLabel fx:id\u003d\"petName\" styleClass\u003d\"calendar_small_label\" text\u003d\"\\$petName\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 2,
      "limdylan": 13,
      "tianqi77": 1
    }
  },
  {
    "path": "src/main/resources/view/list/DisplayListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "  \u003cListView fx:id\u003d\"displayListView\" styleClass\u003d\"pane-transparent\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "  \u003cStackPane prefHeight\u003d\"10.0\" prefWidth\u003d\"10.0\" HBox.hgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "  \u003cVBox fx:id\u003d\"displayInformationViewContainer\" styleClass\u003d\"pane-transparent\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    \u003cListView fx:id\u003d\"displayInformationView\" minWidth\u003d\"0\" prefWidth\u003d\"0\" HBox.hgrow\u003d\"NEVER\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 4,
      "tianqi77": 1,
      "Zhu-Ruicong": 9
    }
  },
  {
    "path": "src/main/resources/view/list/FoodAmountAndPetCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cColumnConstraints halignment\u003d\"RIGHT\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"0.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"petName\" prefHeight\u003d\"17.0\" prefWidth\u003d\"80.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"foodAmount\" prefHeight\u003d\"17.0\" prefWidth\u003d\"62.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 36
    }
  },
  {
    "path": "src/main/resources/view/list/FoodCollectionCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" onMouseClicked\u003d\"#handleMouthClicked\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_RIGHT\" minHeight\u003d\"0.0\" prefHeight\u003d\"40.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" minHeight\u003d\"17.0\" prefWidth\u003d\"300.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" HBox.hgrow\u003d\"ALWAYS\" maxHeight\u003d\"Infinity\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cRegion prefHeight\u003d\"200.0\" prefWidth\u003d\"10.0\" HBox.hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                \u003cLabel fx:id\u003d\"amount\" prefHeight\u003d\"17.0\" prefWidth\u003d\"90.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 36
    }
  },
  {
    "path": "src/main/resources/view/list/PetCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"foodList\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateOfBirth\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cLabel fx:id\u003d\"species\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$species\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/list/SlotCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "      \u003c!-- //TODO: make the layout nicer --\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003cLabel fx:id\u003d\"petName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$petName\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "               \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 15,
      "limdylan": 1,
      "tianqi77": 1,
      "Zhu-Ruicong": 27
    }
  },
  {
    "path": "src/test/java/clzzz/helper/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/pet_tracker.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 1,
      "shenghaoc": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/clzzz/helper/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 2,
      "-": 140
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerStorage(temporaryFolder.resolve(\"petTracker.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String deleteCommand \u003d \"deletepet 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String statsCommand \u003d StatsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(statsCommand, StatsCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Setup LogicManager with JsonPetTrackerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionPetTracker.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String addCommand \u003d AddPetCommand.COMMAND_WORD + NAME_DESC_COCO + GENDER_DESC_COCO + DOB_DESC_COCO"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_COCO + FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(COCO).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.addPet(expectedPet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public void getFilteredDisplayList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredDisplayList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                      Model expectedModel) throws CommandException, IllegalValueException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static class JsonPetTrackerIoExceptionThrowingStub extends JsonPetTrackerStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        private JsonPetTrackerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void savePetTracker(ReadOnlyPetTracker petTracker, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 1,
      "tianqi77": 3,
      "shenghaoc": 52,
      "-": 114
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.SlotPetNamePredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.EditSlotDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String VALID_NAME_COCO \u003d \"Coco\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_NAME_GARFIELD \u003d \"Garfield\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_NAME_DOG \u003d \"Dog\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String VALID_GENDER_COCO \u003d \"female\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String VALID_GENDER_GARFIELD \u003d \"male\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DOB_COCO \u003d \"2/2/2015\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DOB_GARFIELD \u003d \"19/6/1978\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_COCO \u003d \"dog\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_SPECIES_GARFIELD \u003d \"cat\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_FOOD_COCO \u003d \"dogfood:10\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_FOOD_GARFIELD \u003d \"catfood:10\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_FAT \u003d \"fat\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_TAG_LAZY \u003d \"lazy\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DATETIME_COCO \u003d \"1/3/2020 1200\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DATETIME_GARFIELD \u003d \"1/4/2020 1200\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DURATION_COCO \u003d \"20\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String VALID_DURATION_GARFIELD \u003d \"120\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String NAME_DESC_COCO \u003d \" \" + PREFIX_NAME + VALID_NAME_COCO;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String NAME_DESC_GARFIELD \u003d \" \" + PREFIX_NAME + VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GENDER_DESC_COCO \u003d \" \" + PREFIX_GENDER + VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String GENDER_DESC_GARFIELD \u003d \" \" + PREFIX_GENDER + VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DOB_DESC_COCO \u003d \" \" + PREFIX_DOB + VALID_DOB_COCO;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DOB_DESC_GARFIELD \u003d \" \" + PREFIX_DOB + VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String SPECIES_DESC_COCO \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_COCO;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String SPECIES_DESC_GARFIELD \u003d \" \" + PREFIX_SPECIES + VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String FOOD_DESC_COCO \u003d \" \" + PREFIX_FOODLIST + VALID_FOOD_COCO;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String FOOD_DESC_GARFIELD \u003d \" \" + PREFIX_FOODLIST + VALID_FOOD_GARFIELD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TAG_DESC_LAZY \u003d \" \" + PREFIX_TAG + VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String TAG_DESC_FAT \u003d \" \" + PREFIX_TAG + VALID_TAG_FAT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DATETIME_DESC_COCO \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_COCO;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DATETIME_DESC_GARFIELD \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_GARFIELD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DURATION_DESC_COCO \u003d \" \" + PREFIX_DURATION + VALID_DURATION_COCO;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DURATION_DESC_GARFIELD \u003d \" \" + PREFIX_DURATION + VALID_DURATION_GARFIELD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"femali\"; // only \"male\" and \"female\" allowed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_DOB_DESC \u003d \" \" + PREFIX_DOB + \"07/04/00\"; // must follow d-M-yyyy format"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_SPECIES_DESC \u003d \" \" + PREFIX_SPECIES; // empty string not allowed for species"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_DATETIME \u003d \"1-3-2020 12:00\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + INVALID_DATETIME;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final EditPetCommand.EditPetDescriptor DESC_COCO;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final EditPetCommand.EditPetDescriptor DESC_GARFIELD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final EditSlotCommand.EditSlotDescriptor SLOT_DESC_COCO;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final EditSlotCommand.EditSlotDescriptor SLOT_DESC_GARFIELD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DESC_COCO \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withGender(VALID_GENDER_COCO.toString()).withDateOfBirth(VALID_DOB_COCO)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withSpecies(VALID_SPECIES_COCO).withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DESC_GARFIELD \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD.toString()).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_LAZY, VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        SLOT_DESC_COCO \u003d new EditSlotDescriptorBuilder().withPet(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withDateTime(VALID_DATETIME_COCO).withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        SLOT_DESC_GARFIELD \u003d new EditSlotDescriptorBuilder().withPet(VALID_NAME_GARFIELD)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .withDateTime(VALID_DATETIME_GARFIELD).withDuration(VALID_DURATION_GARFIELD).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (CommandException | IllegalValueException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * [Specifically for FindPetCommand] Convenience wrapper to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static void assertFindCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                                                   Model expectedModel, DisplaySystemType type) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new CommandResult(expectedMessage, false, false, type);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * - the address book, filtered pet list and selected pet in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PetTracker expectedPetTracker \u003d new PetTracker(actualModel.getPetTracker());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cPet\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPetList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedPetTracker, actualModel.getPetTracker());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPetList());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the pet at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * {@code model}\u0027s pet tracker."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void showPetAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Pet pet \u003d model.getFilteredPetList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final String[] splitName \u003d pet.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.updateFilteredPetList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(1, model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the slot at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * {@code model}\u0027s pet tracker."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static void showSlotAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredSlotList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot slot \u003d model.getFilteredSlotList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final String name \u003d slot.getPet().getName().fullName;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        model.updateFilteredSlotList(new SlotPetNamePredicate(Arrays.asList(name.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(1, model.getFilteredSlotList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 132,
      "limdylan": 3,
      "tianqi77": 16,
      "shenghaoc": 30,
      "-": 9
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/pet/AddPetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddPetCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void constructor_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPetCommand(null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_petAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommandTest.ModelStubAcceptingPetAdded modelStub \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new AddPetCommandTest.ModelStubAcceptingPetAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet validPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CommandResult commandResult \u003d new AddPetCommand(validPet, \"\").execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(String.format(AddPetCommand.MESSAGE_SUCCESS, validPet), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Arrays.asList(validPet), modelStub.petsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePet_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet validPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddPetCommand addCommand \u003d new AddPetCommand(validPet, \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPet(validPet);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(CommandException.class, AddPetCommand.MESSAGE_DUPLICATE_PET, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet alice \u003d new PetBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet bob \u003d new PetBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddPetCommand addAliceCommand \u003d new AddPetCommand(alice, \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddPetCommand addBobCommand \u003d new AddPetCommand(bob, \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddPetCommand addAliceCommandCopy \u003d new AddPetCommand(alice, \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPetTrackerFilePath(Path petTrackerFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPetTracker(ReadOnlyPetTracker newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void deleteSlot(Slot slot) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void updateFilteredFoodCollectionList(Predicate\u003cFoodCollection\u003e predicate) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public ObservableList\u003cDisplayItem\u003e getFilteredDisplayList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        public DisplaySystemType getCurrentDisplaySystemType() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void updateAll() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        public void changeDisplaySystem(DisplaySystemType newDisplayType) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A Model stub that contains a single pet."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStubWithPet extends ModelStub {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        private final Pet pet;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelStubWithPet(Pet pet) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            this.pet \u003d pet;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return this.pet.isSamePet(pet);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * A Model stub that always accept the pet being added."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private class ModelStubAcceptingPetAdded extends ModelStub {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final ArrayList\u003cPet\u003e petsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return petsAdded.stream().anyMatch(pet::isSamePet);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            requireNonNull(pet);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            petsAdded.add(pet);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            return new PetTracker();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 10,
      "tianqi77": 20,
      "Zhu-Ruicong": 6,
      "shenghaoc": 225
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/pet/DeletePetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.showPetAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * {@code DeletePetCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petToDelete \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePetCommand.MESSAGE_DELETE_PET_SUCCESS, petToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.deletePet(petToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petToDelete \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePetCommand.MESSAGE_DELETE_PET_SUCCESS, petToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.deletePet(petToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showNoPet(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getPetList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteCommand \u003d new DeletePetCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteFirstCommand \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteSecondCommand \u003d new DeletePetCommand(INDEX_SECOND_PET);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand deleteFirstCommandCopy \u003d new DeletePetCommand(INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private void showNoPet(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model.updateFilteredPetList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(model.getFilteredPetList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 109
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/pet/EditPetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_PET_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DESC_COCO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DESC_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_DOG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.showPetAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * EditPetCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(editedPet).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET, descriptor, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(model.getFilteredPetList().get(0), editedPet);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index indexLastPet \u003d Index.fromOneBased(model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet lastPet \u003d model.getFilteredPetList().get(indexLastPet.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetBuilder petInList \u003d new PetBuilder(lastPet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d petInList.withName(VALID_NAME_DOG).withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_DOG)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD.toString()).withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(indexLastPet, descriptor, \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(lastPet, editedPet);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET, new EditPetDescriptor(), \"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petInFilteredList \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedPet \u003d new PetBuilder(petInFilteredList).withName(VALID_NAME_DOG).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditPetDescriptorBuilder().withName(VALID_NAME_DOG).build(), \"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(EditPetCommand.MESSAGE_EDIT_PET_SUCCESS, editedPet);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.setPet(model.getFilteredPetList().get(0), editedPet);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePetUnfilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet firstPet \u003d model.getFilteredPetList().get(INDEX_FIRST_PET.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(firstPet).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_SECOND_PET, descriptor, \"\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPetCommand.MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_duplicatePetFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // edit pet in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet petInList \u003d model.getPetTracker().getPetList().get(INDEX_SECOND_PET.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(INDEX_FIRST_PET,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new EditPetDescriptorBuilder(petInList).build(), \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPetCommand.MESSAGE_DUPLICATE_PET);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidPetIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPetList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(outOfBoundIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_invalidPetIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showPetAtIndex(model, INDEX_FIRST_PET);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getPetList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand editCommand \u003d new EditPetCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditPetDescriptorBuilder().withName(VALID_NAME_GARFIELD).build(), \"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_PET_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final EditPetCommand standardCommand \u003d new EditPetCommand(INDEX_FIRST_PET, DESC_COCO, \"\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor copyDescriptor \u003d new EditPetDescriptor(DESC_COCO);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand commandWithSameValues \u003d new EditPetCommand(INDEX_FIRST_PET, copyDescriptor, \"\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPetCommand(INDEX_SECOND_PET, DESC_COCO, \"\")));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPetCommand(INDEX_FIRST_PET, DESC_GARFIELD, \"\")));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 3,
      "shenghaoc": 169
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/pet/FindPetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_PETS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertFindCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.ELLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.FIONA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPetCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindPetCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findFirstCommand \u003d new FindPetCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findSecondCommand \u003d new FindPetCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand findFirstCommandCopy \u003d new FindPetCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_zeroKeywords_noPetFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d new FindPetCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.PETS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPetList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void execute_multipleKeywords_multiplePetsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Carl Elle Fiona\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d new FindPetCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedModel.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.PETS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPetList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void execute_partialKeyWords_multiplePetsFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PETS_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Ca El na\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindPetCommand command \u003d new FindPetCommand(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.updateFilteredPetList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.PETS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL, ELLE, FIONA, GARFIELD), model.getFilteredPetList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 16,
      "shenghaoc": 80
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/AddSlotCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddSlotCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class AddSlotCommandIntegrationTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_newSlot_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot validSlot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.addSlot(validSlot);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertCommandSuccess(new AddSlotCommand(validSlot, \"\"), model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                String.format(AddSlotCommand.MESSAGE_SUCCESS, validSlot), expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 27,
      "tianqi77": 1,
      "shenghaoc": 10
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/AddSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.foodcollection.FoodCollection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.ui.list.DisplayItem;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class AddSlotCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void constructor_nullSlot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddSlotCommand(null, null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ModelStubAcceptingSlotAdded modelStub \u003d new ModelStubAcceptingSlotAdded();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot validSlot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        CommandResult commandResult \u003d new AddSlotCommand(validSlot, \"\").execute(modelStub);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(String.format(AddSlotCommand.MESSAGE_SUCCESS, validSlot), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(Arrays.asList(validSlot), modelStub.slotsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot alice \u003d new SlotBuilder().withPet(\"Coco\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot bob \u003d new SlotBuilder().withPet(\"Garfield\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddSlotCommand addAliceCommand \u003d new AddSlotCommand(alice, \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddSlotCommand addBobCommand \u003d new AddSlotCommand(bob, \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        AddSlotCommand addAliceCommandCopy \u003d new AddSlotCommand(alice, \"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // TODO Merge with the one in AddPetCommandTest"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Path getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setPetTrackerFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        public void setPetTracker(ReadOnlyPetTracker petTracker) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public boolean hasPet(Pet pet) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public Pet getPet(Name name) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void deletePet(Pet target) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void addPet(Pet pet) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setPet(Pet target, Pet editedPet) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public ObservableList\u003cPet\u003e getFilteredPetList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void updateFilteredPetList(Predicate\u003cPet\u003e predicate) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void deleteSlot(Slot target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void setSlot(Slot target, Slot editedSlot) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public ObservableList\u003cSlot\u003e getFilteredSlotList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void updateFilteredSlotList(Predicate\u003cSlot\u003e predicate) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public ObservableList\u003cFoodCollection\u003e getFilteredFoodCollectionList() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void updateFilteredFoodCollectionList(Predicate\u003cFoodCollection\u003e predicate) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public ObservableList\u003cDisplayItem\u003e getFilteredDisplayList() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        public void updateAll() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        public DisplaySystemType getCurrentDisplaySystemType() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void changeDisplaySystem(DisplaySystemType newDisplayType) throws IllegalValueException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * A Model stub that always accept the slot being added."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private class ModelStubAcceptingSlotAdded extends ModelStub {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        final ArrayList\u003cSlot\u003e slotsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public void addSlot(Slot slot) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            requireNonNull(slot);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            slotsAdded.add(slot);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        public ReadOnlyPetTracker getPetTracker() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            return new PetTracker();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 178,
      "tianqi77": 19,
      "Zhu-Ruicong": 6,
      "shenghaoc": 24
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/DeleteSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.showSlotAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * {@code DeleteSlotCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class DeleteSlotCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot slotToDelete \u003d model.getFilteredSlotList().get(INDEX_FIRST_SLOT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeleteSlotCommand deleteCommand \u003d new DeleteSlotCommand(INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSlotCommand.MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.deleteSlot(slotToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSlotList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DeleteSlotCommand deleteCommand \u003d new DeleteSlotCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showSlotAtIndex(model, INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot slotToDelete \u003d model.getFilteredSlotList().get(INDEX_FIRST_SLOT.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeleteSlotCommand deleteCommand \u003d new DeleteSlotCommand(INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteSlotCommand.MESSAGE_DELETE_SLOT_SUCCESS, slotToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.deleteSlot(slotToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        showNoSlot(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showSlotAtIndex(model, INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getSlotList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DeleteSlotCommand deleteCommand \u003d new DeleteSlotCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeleteSlotCommand deleteFirstCommand \u003d new DeleteSlotCommand(INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeleteSlotCommand deleteSecondCommand \u003d new DeleteSlotCommand(INDEX_SECOND_SLOT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeleteSlotCommand deleteFirstCommandCopy \u003d new DeleteSlotCommand(INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no slots."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private void showNoSlot(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        model.updateFilteredSlotList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(model.getFilteredSlotList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 83,
      "shenghaoc": 26
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/EditSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_SLOT_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SLOT_DESC_COCO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SLOT_DESC_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.showSlotAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.EditSlotDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class EditSlotCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot editedSlot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder(editedSlot).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(INDEX_FIRST_SLOT, descriptor, \"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(EditSlotCommand.MESSAGE_EDIT_SLOT_SUCCESS, editedSlot);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.setSlot(model.getFilteredSlotList().get(0), editedSlot);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Index indexLastSlot \u003d Index.fromOneBased(model.getFilteredSlotList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Slot lastSlot \u003d model.getFilteredSlotList().get(indexLastSlot.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        SlotBuilder slotInList \u003d new SlotBuilder(lastSlot);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot editedSlot \u003d slotInList.withPet(VALID_NAME_COCO).withDateTime(VALID_DATETIME_COCO)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder().withPet(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateTime(VALID_DATETIME_COCO).withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(indexLastSlot, descriptor, \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(EditSlotCommand.MESSAGE_EDIT_SLOT_SUCCESS, editedSlot);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.setSlot(lastSlot, editedSlot);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(INDEX_FIRST_SLOT, new EditSlotDescriptor(), \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot editedSlot \u003d model.getFilteredSlotList().get(INDEX_FIRST_SLOT.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(EditSlotCommand.MESSAGE_EDIT_SLOT_SUCCESS, editedSlot);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showSlotAtIndex(model, INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot slotInFilteredList \u003d model.getFilteredSlotList().get(INDEX_FIRST_SLOT.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot editedSlot \u003d new SlotBuilder(slotInFilteredList).withPet(VALID_NAME_COCO).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(INDEX_FIRST_SLOT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditSlotDescriptorBuilder().withPet(VALID_NAME_COCO).build(), \"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String expectedMessage \u003d String.format(EditSlotCommand.MESSAGE_EDIT_SLOT_SUCCESS, editedSlot);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new PetTracker(model.getPetTracker()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.setSlot(model.getFilteredSlotList().get(0), editedSlot);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_invalidSlotIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredSlotList().size() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withPet(VALID_NAME_COCO).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(outOfBoundIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void execute_invalidSlotIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        showSlotAtIndex(model, INDEX_FIRST_SLOT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of pet tracker list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPetTracker().getSlotList().size());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotCommand editCommand \u003d new EditSlotCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new EditSlotDescriptorBuilder().withPet(VALID_NAME_COCO).build(), \"\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_INVALID_SLOT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        final EditSlotCommand standardCommand \u003d new EditSlotCommand(INDEX_FIRST_SLOT, SLOT_DESC_COCO, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor copyDescriptor \u003d new EditSlotDescriptor(SLOT_DESC_COCO);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand commandWithSameValues \u003d new EditSlotCommand(INDEX_FIRST_SLOT, copyDescriptor, \"\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSlotCommand(INDEX_SECOND_SLOT, SLOT_DESC_COCO, \"\")));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditSlotCommand(INDEX_FIRST_SLOT, SLOT_DESC_GARFIELD, \"\")));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 98,
      "tianqi77": 2,
      "shenghaoc": 47
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/EditSlotDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SLOT_DESC_COCO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SLOT_DESC_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.EditSlotDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class EditSlotDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptorWithSameValues \u003d new EditSlotDescriptor(SLOT_DESC_COCO);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(SLOT_DESC_COCO.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(SLOT_DESC_COCO.equals(SLOT_DESC_COCO));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(SLOT_DESC_GARFIELD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor editedCocoSlot \u003d new EditSlotDescriptorBuilder(SLOT_DESC_COCO)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withPet(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(editedCocoSlot));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different datetime -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCocoSlot \u003d new EditSlotDescriptorBuilder(SLOT_DESC_COCO)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateTime(VALID_DATETIME_GARFIELD).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(editedCocoSlot));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different duration -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCocoSlot \u003d new EditSlotDescriptorBuilder(SLOT_DESC_COCO)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDuration(VALID_DURATION_GARFIELD).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(SLOT_DESC_COCO.equals(editedCocoSlot));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 51
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/commands/slot/FindSlotCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.commands.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_SLOTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.assertFindCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.FindSlotCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.SlotPetNamePredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.TypicalSlots;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import clzzz.helper.ui.DisplaySystemType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class FindSlotCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Predicate\u003cSlot\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new SlotPetNamePredicate(Arrays.asList(\"Coco\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        Predicate\u003cSlot\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new SlotPetNamePredicate(Arrays.asList(\"Garfield\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand findFirstCommand \u003d new FindSlotCommand(firstPredicate, \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand findSecondCommand \u003d new FindSlotCommand(secondPredicate, \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertNotEquals(1, findFirstCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand findFirstCommandCopy \u003d new FindSlotCommand(firstPredicate, \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(findFirstCommand, findFirstCommandCopy);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertNotEquals(null, findFirstCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertNotEquals(findFirstCommand, findSecondCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void execute_zeroKeywords_throwParseException() throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d FindSlotCommand.MESSAGE_EMPTY_NAME_FIELD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindSlotCommandParser parser \u003d new FindSlotCommandParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \" \" + PREFIX_NAME, expectedMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void execute_multiplePrefixes_oneSlotFound() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Predicate\u003cSlot\u003e predicate \u003d FindSlotCommandParser.getPredicates(NAME_DESC_COCO + \" \" + NAME_DESC_GARFIELD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand command \u003d new FindSlotCommand(predicate, \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SLOTS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.updateFilteredSlotList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.changeDisplaySystem(DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(Arrays.asList(TypicalSlots.GARFIELD_SLOT), expectedModel.getFilteredSlotList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void execute_multipleNames_multipleSlotsFound() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Predicate\u003cSlot\u003e predicate \u003d FindSlotCommandParser.getPredicates(NAME_DESC_COCO + \" \" + VALID_NAME_GARFIELD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand command \u003d new FindSlotCommand(predicate, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_SLOTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedModel.updateFilteredSlotList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.changeDisplaySystem(DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(TypicalSlots.getTypicalSlots(), expectedModel.getFilteredSlotList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void execute_partialKeyWords_multipleSlotsFound() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SLOTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Predicate\u003cSlot\u003e predicate \u003d FindSlotCommandParser.getPredicates(\" \" + PREFIX_NAME + \"CO garf\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        FindSlotCommand command \u003d new FindSlotCommand(predicate, \"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.updateFilteredSlotList(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        expectedModel.changeDisplaySystem(DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFindCommandSuccess(command, model, expectedMessage, expectedModel, DisplaySystemType.SCHEDULE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(TypicalSlots.getTypicalSlots(), model.getFilteredSlotList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 32,
      "tianqi77": 51,
      "shenghaoc": 19
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "shenghaoc": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/PetTrackerParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.PetUtil.getAddPetCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.PetUtil.getEditPetDescriptorDetails;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class PetTrackerParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private PetTrackerParser parser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerStorage(temporaryFolder.resolve(\"petTracker.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        parser \u003d new PetTrackerParser(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        AddPetCommand command \u003d (AddPetCommand) parser.parseCommand(getAddPetCommand(pet));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(new AddPetCommand(pet, \"\"), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DeletePetCommand command \u003d (DeletePetCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DeletePetCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PET.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new DeletePetCommand(INDEX_FIRST_PET), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand.EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder(pet).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand command \u003d (EditPetCommand) parser.parseCommand(EditPetCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + INDEX_FIRST_PET.getOneBased() + \" \" + getEditPetDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new EditPetCommand(INDEX_FIRST_PET, descriptor, \"\"), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand command \u003d (FindPetCommand) parser.parseCommand("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                FindPetCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new FindPetCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 87
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/pet/AddPetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DOB_DESC_GARFIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.FOOD_DESC_COCO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.FOOD_DESC_GARFIELD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SPECIES_DESC_GARFIELD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.TAG_DESC_FAT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddPetCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private AddPetCommandParser parser \u003d new AddPetCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(GARFIELD).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT, new AddPetCommand(expectedPet, \"\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_COCO + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new AddPetCommand(expectedPet, WARNING_MESSAGE_NAME));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_COCO + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new AddPetCommand(expectedPet, WARNING_MESSAGE_GENDER));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple dates of birth - last date of birth accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_COCO + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new AddPetCommand(expectedPet, WARNING_MESSAGE_DOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new AddPetCommand(expectedPet, WARNING_MESSAGE_SPECIES));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPetMultipleTags \u003d new PetBuilder(GARFIELD).withTags(VALID_TAG_LAZY, VALID_TAG_FAT)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, new AddPetCommand(expectedPetMultipleTags, \"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet expectedPet \u003d new PetBuilder(COCO).withTags().build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_COCO + GENDER_DESC_COCO + DOB_DESC_COCO + SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_COCO, new AddPetCommand(expectedPet, \"\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + VALID_GENDER_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing date of birth prefix"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + VALID_DOB_GARFIELD"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + VALID_SPECIES_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + VALID_GENDER_GARFIELD + VALID_DOB_GARFIELD"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + VALID_SPECIES_GARFIELD, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + INVALID_GENDER_DESC + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid date of birth"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + INVALID_DOB_DESC"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DateOfBirth.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + INVALID_SPECIES_DESC"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT, Species.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + INVALID_TAG_DESC + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD + INVALID_SPECIES_DESC"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + FOOD_DESC_GARFIELD, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_GARFIELD + GENDER_DESC_GARFIELD + DOB_DESC_GARFIELD"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + SPECIES_DESC_GARFIELD + FOOD_DESC_GARFIELD + TAG_DESC_LAZY + TAG_DESC_FAT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 153
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/pet/DeletePetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.DeletePetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * outside of the DeletePetCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * same path through the DeletePetCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class DeletePetCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private DeletePetCommandParser parser \u003d new DeletePetCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_validArgs_returnsDeletePetCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeletePetCommand(INDEX_FIRST_PET));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 32
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/pet/EditPetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_SPECIES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DOB_DESC_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DOB_DESC_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_DOB_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_SPECIES_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.SPECIES_DESC_GARFIELD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.TAG_DESC_FAT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_COCO;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_COCO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.EditPetDescriptorBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetCommandParserTest {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPetCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private EditPetCommandParser parser \u003d new EditPetCommandParser();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\", EditPetCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS); // invalid gender"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DOB_DESC, DateOfBirth.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SPECIES_DESC, Species.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // invalid gender followed by valid email"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC + DOB_DESC_COCO,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // valid gender followed by invalid gender. The test case for invalid gender followed by valid gender"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + GENDER_DESC_GARFIELD + INVALID_GENDER_DESC, Gender.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Pet} being edited,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FAT + TAG_DESC_LAZY + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FAT + TAG_EMPTY + TAG_DESC_LAZY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FAT + TAG_DESC_LAZY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_DOB_DESC + VALID_SPECIES_COCO"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                        + VALID_GENDER_COCO.toString(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PET;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_GARFIELD + TAG_DESC_LAZY"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DOB_DESC_COCO + SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + NAME_DESC_COCO + TAG_DESC_FAT;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_COCO)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_COCO)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_LAZY, VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_GARFIELD + DOB_DESC_COCO;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(VALID_DOB_COCO).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_COCO;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withName(VALID_NAME_COCO).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_COCO;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_COCO.toString()).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_COCO;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withDateOfBirth(VALID_DOB_COCO).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SPECIES_DESC_COCO;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withSpecies(VALID_SPECIES_COCO).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FAT;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_COCO"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + SPECIES_DESC_COCO + DOB_DESC_COCO + TAG_DESC_FAT"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + GENDER_DESC_COCO + SPECIES_DESC_COCO"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DOB_DESC_COCO + TAG_DESC_FAT + GENDER_DESC_GARFIELD + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DOB_DESC_GARFIELD + TAG_DESC_LAZY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(VALID_DOB_GARFIELD).withSpecies(VALID_SPECIES_GARFIELD)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withTags(VALID_TAG_FAT, VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String warningMessage \u003d WARNING_MESSAGE_GENDER + WARNING_MESSAGE_SPECIES + WARNING_MESSAGE_DOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, warningMessage);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_GENDER_DESC + GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, WARNING_MESSAGE_GENDER);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DOB_DESC_GARFIELD + INVALID_GENDER_DESC + SPECIES_DESC_GARFIELD"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + GENDER_DESC_GARFIELD;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptorBuilder().withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, WARNING_MESSAGE_GENDER);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PET;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetDescriptor descriptor \u003d new EditPetDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditPetCommand expectedCommand \u003d new EditPetCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 222
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/pet/FindPetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.FindPetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class FindPetCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private FindPetCommandParser parser \u003d new FindPetCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                FindPetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_validArgs_returnsFindPetCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        FindPetCommand expectedFindPetCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new FindPetCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPetCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPetCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 35
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/pet/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseDateOfBirth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseGender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseSpecies;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseTag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.ParserUtil.parseTags;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"mali\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_DATEOFBIRTH \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \"!fruitcake\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_GENDER \u003d \"FEMALE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_DATEOFBIRTH \u003d \"2/12/2019\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_SPECIES \u003d \"Raccoon\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbor\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()-\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(INDEX_FIRST_PET, parseIndex(\"1\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(INDEX_FIRST_PET, parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseName((String) null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedName, parseName(VALID_NAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedName, parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseGender((String) null));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseGender(INVALID_GENDER));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_validValueWithoutWhitespace_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Gender expectedGender \u003d Gender.valueOf(VALID_GENDER);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedGender, parseGender(VALID_GENDER));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseGender_validValueWithWhitespace_returnsTrimmedGender() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String genderWithWhitespace \u003d WHITESPACE + VALID_GENDER + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Gender expectedGender \u003d Gender.valueOf(VALID_GENDER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedGender, parseGender(genderWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseDateOfBirth((String) null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseDateOfBirth(INVALID_DATEOFBIRTH));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_validValueWithoutWhitespace_returnsDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATEOFBIRTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedDateOfBirth, parseDateOfBirth(VALID_DATEOFBIRTH));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseDateOfBirth_validValueWithWhitespace_returnsTrimmedDateOfBirth() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_DATEOFBIRTH + WHITESPACE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        DateOfBirth expectedDateOfBirth \u003d new DateOfBirth(VALID_DATEOFBIRTH);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedDateOfBirth, parseDateOfBirth(addressWithWhitespace));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseSpecies((String) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseSpecies(INVALID_SPECIES));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_validValueWithoutWhitespace_returnsSpecies() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedSpecies, parseSpecies(VALID_SPECIES));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseSpecies_validValueWithWhitespace_returnsTrimmedSpecies() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String speciesWithWhitespace \u003d WHITESPACE + VALID_SPECIES + WHITESPACE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Species expectedSpecies \u003d new Species(VALID_SPECIES);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedSpecies, parseSpecies(speciesWithWhitespace));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseTag(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedTag, parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedTag, parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e parseTags(null));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 202
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/AddSlotCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DATETIME_DESC_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DATETIME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DURATION_DESC_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DURATION_DESC_GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_COCO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_COCO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class AddSlotCommandParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private AddSlotCommandParser parser \u003d new AddSlotCommandParser(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot expectedSlot \u003d new SlotBuilder().withPet(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateTime(VALID_DATETIME_COCO).withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Whitespace only preamble"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_COCO + DATETIME_DESC_COCO"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DURATION_DESC_COCO, new AddSlotCommand(expectedSlot, \"\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Multiple pets - last pet accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_GARFIELD + NAME_DESC_COCO + DATETIME_DESC_COCO"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DURATION_DESC_COCO, new AddSlotCommand(expectedSlot, WARNING_MESSAGE_NAME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Multiple dateTime - last dateTime accepted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_COCO + DATETIME_DESC_GARFIELD + DATETIME_DESC_COCO"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                + DURATION_DESC_COCO, new AddSlotCommand(expectedSlot, WARNING_MESSAGE_DATETIME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // Multiple durations - last duration accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, NAME_DESC_COCO + DATETIME_DESC_COCO + DURATION_DESC_GARFIELD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DURATION_DESC_COCO, new AddSlotCommand(expectedSlot, WARNING_MESSAGE_DURATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_COCO + DATETIME_DESC_COCO + DURATION_DESC_COCO,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_COCO + VALID_DATETIME_COCO + DURATION_DESC_COCO,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, NAME_DESC_COCO + DATETIME_DESC_COCO + VALID_DURATION_COCO,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_COCO + VALID_DATETIME_COCO + VALID_DURATION_COCO,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 2,
      "shenghaoc": 74
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/DeleteSlotCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_PET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class DeleteSlotCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private DeleteSlotCommandParser parser \u003d new DeleteSlotCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseSuccess(parser, \"1\", new DeleteSlotCommand(INDEX_FIRST_PET));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DeleteSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 25
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/EditSlotCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DATETIME_DESC_COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DATETIME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DURATION_DESC_COCO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.DURATION_DESC_GARFIELD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.NAME_DESC_COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_COCO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_GARFIELD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_COCO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_GARFIELD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_THIRD_SLOT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.EditSlotDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class EditSlotCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private EditSlotCommandParser parser \u003d new EditSlotCommandParser(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // No index"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_COCO, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // No field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"1\", EditSlotCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // No index or field"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    // Invalid values use static functions in SlotParserUtil, so there is no need to test them here"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    // TODO Problem: Somehow they don\u0027t think the 2 predicates are the same"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_SLOT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_COCO"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DURATION_DESC_COCO + NAME_DESC_COCO;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withPet(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDateTime(VALID_DATETIME_COCO).withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_GARFIELD + DURATION_DESC_COCO;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder().withDateTime(VALID_DATETIME_GARFIELD)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_oneFieldSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // pet"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_SLOT;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_COCO;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withPet(VALID_NAME_COCO).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // dateTime"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_COCO;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditSlotDescriptorBuilder().withDateTime(VALID_DATETIME_COCO).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // duration"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_COCO;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditSlotDescriptorBuilder().withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_COCO + DURATION_DESC_COCO + DURATION_DESC_COCO"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DATETIME_DESC_COCO + DURATION_DESC_COCO + DURATION_DESC_COCO"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DATETIME_DESC_GARFIELD + DURATION_DESC_GARFIELD + DURATION_DESC_GARFIELD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder().withDateTime(VALID_DATETIME_GARFIELD)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDuration(VALID_DURATION_GARFIELD).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotCommand expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                WARNING_MESSAGE_DATETIME + WARNING_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_DATETIME_DESC + DATETIME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder().withDateTime(VALID_DATETIME_GARFIELD).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        EditSlotCommand expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor, WARNING_MESSAGE_DATETIME);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DURATION_DESC_GARFIELD + INVALID_DATETIME_DESC + DURATION_DESC_GARFIELD"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + DATETIME_DESC_GARFIELD;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditSlotDescriptorBuilder().withDateTime(VALID_DATETIME_GARFIELD)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withDuration(VALID_DURATION_GARFIELD).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        expectedCommand \u003d new EditSlotCommand(targetIndex, descriptor,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                WARNING_MESSAGE_DATETIME + WARNING_MESSAGE_DURATION);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 6,
      "shenghaoc": 137
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/FindSlotCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.CommandParserTestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class FindSlotCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private FindSlotCommandParser parser \u003d new FindSlotCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        CommandParserTestUtil.assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                FindSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 19
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/ScheduleParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.commons.core.Messages.WARNING_MESSAGE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.TypicalIndexes.INDEX_FIRST_SLOT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.DeleteSlotCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.FindSlotCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.PetTrackerParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonPetTrackerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.EditSlotDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.SlotUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class ScheduleParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private PetTrackerParser parser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonPetTrackerStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StorageManager storage \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        parser \u003d new PetTrackerParser(model, storage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot slot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        AddSlotCommand command \u003d (AddSlotCommand) parser.parseCommand(SlotUtil.getAddSlotCommand(slot));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(new AddSlotCommand(slot, \"\"), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        DeleteSlotCommand command \u003d (DeleteSlotCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                DeleteSlotCommand.COMMAND_WORD + \" \" + INDEX_FIRST_SLOT.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new DeleteSlotCommand(INDEX_FIRST_SLOT), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Slot slot \u003d new SlotBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotCommand.EditSlotDescriptor descriptor \u003d new EditSlotDescriptorBuilder(slot).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        EditSlotCommand command \u003d (EditSlotCommand) parser.parseCommand(EditSlotCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                + INDEX_FIRST_SLOT.getOneBased() + \" \" + SlotUtil.getEditSlotDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new EditSlotCommand(INDEX_FIRST_SLOT, descriptor, \"\"), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        keywords.forEach(x -\u003e sb.append(PREFIX_NAME).append(x).append(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        FindSlotCommand command \u003d (FindSlotCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                FindSlotCommand.COMMAND_WORD + \" \" + sb.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(new FindSlotCommand(FindSlotCommandParser.getPredicates(sb.toString()), WARNING_MESSAGE_NAME),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Test for help already done in PetTrackerParserTest"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 42,
      "tianqi77": 1,
      "shenghaoc": 50
    }
  },
  {
    "path": "src/test/java/clzzz/helper/logic/parser/slot/SlotParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.logic.parser.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.slot.SlotParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class SlotParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String NON_EXIST_PET \u003d \"Kyaru\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATETIME_FORMAT \u003d \"1-3-2020 12:00\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATETIME_1 \u003d \"30/2/2019 1200\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATETIME_2 \u003d \"12/2/2019 2400\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATETIME_3 \u003d \"30/2/2019 2400\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATE_FORMAT \u003d \"1-3-2020\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DATE \u003d \"29/2/2019\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"14.5\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String INVALID_INDEX \u003d \"1a\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String INVALID_PETNAME \u003d \"Bob*\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String EXIST_PET \u003d \"Coco\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_DATE \u003d \"1/3/2020\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"1/3/2020 1200\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String VALID_DURATION \u003d \"20\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final DateTime DATETIME \u003d new DateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final LocalDate DATE \u003d DateTimeUtil.parseLocalDate(VALID_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final SlotDuration DURATION \u003d new SlotDuration(VALID_DURATION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalPetTrackerWithSlots(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseIndex(INVALID_INDEX));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            -\u003e SlotParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parsePet_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Bad pet name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parsePet(INVALID_PETNAME, model));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Pet doesn\u0027t exist"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parsePet(NON_EXIST_PET, model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parsePet_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Both null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parsePet(null, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // model null"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parsePet(EXIST_PET, null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // nameStr null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parsePet(null, model));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(COCO, SlotParserUtil.parsePet(EXIST_PET, model));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(COCO, SlotParserUtil.parsePet(WHITESPACE + EXIST_PET + WHITESPACE, model));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDateTime_invalidInputFormat_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDateTime(INVALID_DATETIME_FORMAT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDateTime_invalidInputDate_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDateTime(INVALID_DATETIME_1));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDateTime_invalidInputTime_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDateTime(INVALID_DATETIME_2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDateTime_invalidInputDateAndTime_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDateTime(INVALID_DATETIME_3));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parseDateTime(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(DATETIME, SlotParserUtil.parseDateTime(VALID_DATETIME));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(DATETIME, SlotParserUtil.parseDateTime(WHITESPACE + VALID_DATETIME + WHITESPACE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDate_invalidInputFormat_throwsParseException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDate(INVALID_DATE_FORMAT));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDate_invalidInputDate_throwsParseException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(DATE, SlotParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(DATE, SlotParserUtil.parseDate(WHITESPACE + VALID_DATE + WHITESPACE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDuration_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e SlotParserUtil.parseSlotDuration(INVALID_DURATION));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDuration_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SlotParserUtil.parseSlotDuration(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDuration_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertEquals(DURATION, SlotParserUtil.parseSlotDuration(VALID_DURATION));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void parseDuration_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertEquals(DURATION, SlotParserUtil.parseSlotDuration(WHITESPACE + VALID_DURATION + WHITESPACE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 84,
      "limdylan": 10,
      "tianqi77": 51,
      "shenghaoc": 21
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/UniquePetListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.DuplicatePetException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.exceptions.PetNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class UniquePetListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private final UniquePetList uniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(uniquePetList.contains(COCO));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void contains_petWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(uniquePetList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void add_duplicatePet_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.add(COCO));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullTargetPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(null, COCO));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_nullEditedPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPet(COCO, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_targetPetNotInList_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.setPet(COCO, COCO));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetIsSamePet_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.setPet(COCO, COCO);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedUniquePetList.add(COCO);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasSameIdentity_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedAlice \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_FAT)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.setPet(COCO, editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        expectedUniquePetList.add(editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.setPet(COCO, GARFIELD);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPet_editedPetHasNonUniqueIdentity_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPet(COCO, GARFIELD));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.remove(null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_petDoesNotExist_throwsPetNotFoundException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(PetNotFoundException.class, () -\u003e uniquePetList.remove(COCO));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void remove_existingPet_removesPet() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.remove(COCO);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullUniquePetList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((UniquePetList) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_uniquePetList_replacesOwnListWithProvidedUniquePetList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(expectedUniquePetList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePetList.setPets((List\u003cPet\u003e) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        uniquePetList.add(COCO);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        List\u003cPet\u003e petList \u003d Collections.singletonList(GARFIELD);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        uniquePetList.setPets(petList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        UniquePetList expectedUniquePetList \u003d new UniquePetList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        expectedUniquePetList.add(GARFIELD);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertEquals(expectedUniquePetList, uniquePetList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void setPets_listWithDuplicatePets_throwsDuplicatePetException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        List\u003cPet\u003e listWithDuplicatePets \u003d Arrays.asList(COCO, COCO);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DuplicatePetException.class, () -\u003e uniquePetList.setPets(listWithDuplicatePets));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            -\u003e uniquePetList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 123,
      "Zhu-Ruicong": 2,
      "shenghaoc": 46
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/foodcollection/FoodAmountAndPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "class FoodAmountAndPetTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FoodAmountAndPet(0, null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    void constructor_invalidFoodAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet validPet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        int invalidAmount \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FoodAmountAndPet(invalidAmount,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                validPet.getName().fullName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 4,
      "shenghaoc": 20
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/foodcollection/FoodCollectionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.ELLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodCollectionListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private final FoodCollectionList foodCollectionList \u003d new FoodCollectionList(getTypicalPets());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void contains_nullFood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e foodCollectionList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Food food \u003d (Food) AMY.getFoodList().toArray()[0];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(foodCollectionList.contains(food));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Food food \u003d new Food(\"not in the list\", 10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(foodCollectionList.contains(food));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void addFood_and_getFoodCollection() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        Food food \u003d new Food(\"unique food\", 10);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d ELLE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        foodCollectionList.addFood(food, pet);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(foodCollectionList.contains(food));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        FoodCollection foodCollection \u003d foodCollectionList.getFoodCollection(food.foodName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(foodCollection.isSameType(food) \u0026 foodCollection.getAmount().equals(food.foodAmount));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void getUnmodifiablePets_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                foodCollectionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 44,
      "shenghaoc": 9
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/foodcollection/FoodCollectionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.foodcollection;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "public class FoodCollectionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Food foodA1 \u003d new Food(\"first food\", 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Food foodA2 \u003d new Food(\"first food\", 2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Food foodB1 \u003d new Food(\"second food\", 1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private Food foodB2 \u003d new Food(\"second food\", 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Pet pet1 \u003d COCO;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private Pet pet2 \u003d GARFIELD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void isValidFoodCollectionName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FoodCollection.isValidFoodCollectionName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionName(\"one line isn\u0027t\\nenough for this food\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"hot coca* for dogs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"very delicious cat food\")); // alphabets only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"195\")); // numbers only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"best food 4 cats\")); // alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"CAT FOOD very good hmm\")); // with capital letters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"meshed food made for lazy cats staying at home\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"can use more than ₉99 times\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"the Ⅸth test\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"high Ω3 content\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"∀ I forgot what this sign means\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"∆nutrition is top tier\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"∑s up all the benefits\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"⋮⋰⋯⋱\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"ni↗ce↘ fo↗od↘\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionName(\"⑨ strongest food\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void isValidFoodCollectionAmount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionAmount(0)); // reaches zero"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionAmount(-1)); // negative"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.isValidFoodCollectionAmount(Integer.MIN_VALUE)); // negative"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionAmount(1)); // positive integer"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.isValidFoodCollectionAmount(Integer.MAX_VALUE)); // positive integer"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // food amount of food type is different"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.generateFoodCollection(foodA1, pet1).equals("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                FoodCollection.generateFoodCollection(foodB1, pet1)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.generateFoodCollection(foodA1, pet1).equals("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                FoodCollection.generateFoodCollection(foodA2, pet1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // both unequal"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(FoodCollection.generateFoodCollection(foodA1, pet1).equals("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                FoodCollection.generateFoodCollection(foodB2, pet1)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        // equal"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(FoodCollection.generateFoodCollection(foodA1, pet1).equals("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                FoodCollection.generateFoodCollection(foodA1, pet1)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    void addFoodToCollectionTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        FoodCollection foodCollection \u003d FoodCollection.generateFoodCollection(foodA1, pet1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        //food is of the same type"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(foodCollection.addFoodToCollection(foodA1, pet2)); //same amount"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertTrue(foodCollection.addFoodToCollection(foodA2, pet2)); //different amount"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        //food is of different type"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(foodCollection.addFoodToCollection(foodB1, pet2));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        assertFalse(foodCollection.addFoodToCollection(foodB2, pet2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public void getUnmodifiablePets_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        FoodCollection foodCollection \u003d FoodCollection.generateFoodCollection(foodA1, pet1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "                foodCollection.getUnmodifiablePets().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 96,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/DateOfBirthTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class DateOfBirthTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateOfBirth(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateOfBirth(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidDateOfBirth() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Non-dates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\" \")); // just empty space"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"not a date\")); // a sentence"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Badly formatted dates"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-Mar-2020\")); // d MMM yyyy"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020-03-10\")); // yyyy mm dd"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"10-3-20\")); // d-M-yy"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7_3_2020\")); // bad seperator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-3-2020\")); // bad seperator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"2020\")); // year only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"7-3\")); // date and month only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        //Invalid dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"29/2/2019\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"-1/1/2019\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateOfBirth.isValidDateOfBirth(\"31/4/2019\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // Good dates"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7/3/2020\")); // d/M/uuuu"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07/03/2020\")); // dd/MM/uuuu"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"7/03/2020\")); // d/MM/uuuu"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateOfBirth.isValidDateOfBirth(\"07/3/2020\")); // dd/M/uuuu"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 35,
      "limdylan": 8,
      "tianqi77": 2,
      "shenghaoc": 4
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/FoodTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class FoodTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Food(null, 0));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String validName \u003d \"kibbles\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int invalidAmount \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        int validAmount \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidName, validAmount));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Food(validName, invalidAmount));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Food.isValidFoodName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"\")); // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\" \")); // spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodName(\"one line isn\u0027t\\nenough for this food\")); // multiple lines"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"hot coca* for dogs\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"very delicious cat food\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"195\")); // numbers only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"best food 4 cats\")); // alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"CAT FOOD very good hmm\")); // with capital letters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"meshed food made for lazy cats staying at home\")); // long names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"can use more than ₉99 times\")); // subscripts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"the Ⅸth test\")); // roman numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"high Ω3 content\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∀ I forgot what this sign means\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∆nutrition is top tier\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"∑s up all the benefits\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⋮⋰⋯⋱\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"ni↗ce↘ fo↗od↘\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodName(\"⑨ strongest food\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidFoodAmount() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(0)); // reaches zero"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(-1)); // negative"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Food.isValidFoodAmount(Integer.MIN_VALUE)); // negative"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid amount"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(1)); // positive integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Food.isValidFoodAmount(Integer.MAX_VALUE)); // positive integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName1 \u003d \"first food\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String foodName2 \u003d \"second food\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt1 \u003d 1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        int amt2 \u003d 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // one equal but the other isn\u0027t"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName1, amt2)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // both unequal"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(new Food(foodName1, amt1).equals(new Food(foodName2, amt2)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // equal"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(new Food(foodName1, amt1).equals(new Food(foodName1, amt1)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 76,
      "Zhu-Ruicong": 1,
      "shenghaoc": 6
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Name.isValidName(\"coca*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"very big dog\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"no 1 dogggg\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Ozzy Pawsborne\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Name.isValidName(\"Doc McDoggins Successor of Paws Davis the 3rd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 35,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/PetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.PetBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class PetTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet pet \u003d new PetBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e pet.getTags().remove(new Tag(\"unused\")));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void isSamePet() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.isSamePet(COCO));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.isSamePet(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different species -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same name, same gender, same date of birth, same species, different foodList -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // TBD after SampleDataUtil is finished!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different gender and date of birth -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same name, different gender, different date of birth, different species, different  tags -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).withDateOfBirth(VALID_DOB_GARFIELD)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .withSpecies(VALID_SPECIES_GARFIELD).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same name, same gender, same date of birth, same species, different tags -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.isSamePet(editedCoco));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet aliceCopy \u003d new PetBuilder(COCO).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.equals(aliceCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(COCO.equals(COCO));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different pet -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(GARFIELD));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet editedCoco \u003d new PetBuilder(COCO).withName(VALID_NAME_GARFIELD).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withGender(VALID_GENDER_GARFIELD).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different date of birth -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withDateOfBirth(VALID_DOB_GARFIELD).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withSpecies(VALID_SPECIES_GARFIELD).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        editedCoco \u003d new PetBuilder(COCO).withTags(VALID_TAG_FAT).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertFalse(COCO.equals(editedCoco));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void initializeFoodList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Food typeA10 \u003d new Food(\"type A\", 10);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Food typeA20 \u003d new Food(\"type A\", 20);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Food typeA30 \u003d new Food(\"type A\", 30);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cFood\u003e setWithRepeatingTypes \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        setWithRepeatingTypes.add(typeA10);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        setWithRepeatingTypes.add(typeA20);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Pet cocoCopy \u003d new PetBuilder(COCO).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        cocoCopy.initializeFoodList(setWithRepeatingTypes);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertTrue(cocoCopy.getFoodList().contains(typeA30));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 115
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/SpeciesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "class SpeciesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Species(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void constructor_invalidSpecies_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        String invalidSpecies \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Species(invalidSpecies));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    void isValidSpecies() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // null Species"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Species.isValidSpecies(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // invalid Species"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertFalse(Species.isValidSpecies(\"dog*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        // valid Species"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"dog cat\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"101\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"genetically engineered cat girls \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"prototype 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"Omega Wolf\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        assertTrue(Species.isValidSpecies(\"As if the previous species name is not long enough here is \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "                + \"one to bring it to the next level\")); // long Speciess"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 37,
      "shenghaoc": 5
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/pet/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "package clzzz.helper.model.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/slot/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.commons.util.DateTimeUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void isValidDateTime() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Non-date-times"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // just empty space"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"not a datetime\")); // a sentence"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Badly formatted dates"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"not a date 2130\")); // not a date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7-Mar-2020 2130\")); // d MMM yyyy"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-03-10 2130\")); // yyyy mm dd"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"10-3-20 2130\")); // d-M-yy"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7_3_2020 2130\")); // bad seperator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7-3-2020 2130\")); // bad seperator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020 2130\")); // year only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7-3 2130\")); // date and month only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Badly formatted times"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 not a time\")); // not a time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 45\")); // HHmm not a 4 digit number"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 12345\")); // HHmm not a 4 digit number"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 -1000\")); // HHmm not a 4 digit number"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 2400\")); // HH greater than 23"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/2020 0060\")); // mm greater than 59"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Other invalid date-times"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"7/3/20202130\")); // no space separator between date and time"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2130 7/3/2020\")); // wrong sequence of date and time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String epoch \u003d DateTimeUtil.formatLocalDateTime(LocalDate.EPOCH.atStartOfDay());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(epoch)); // not after the epoch, exactly on the epoch"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Good dates"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"7/3/2020 2130\")); // d/M/yyyy"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"07/03/2020 2130\")); // dd/MM/yyyy"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"7/03/2020 2130\")); // d/MM/yyyy"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"07/3/2020 2130\")); // dd/M/yyyy"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 62
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/slot/SlotDurationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "class SlotDurationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SlotDuration(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String invalidDuration \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SlotDuration(invalidDuration));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void isValidDuration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Cannot cast from String to long"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"word\")); // contains no digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"ff\")); // not a valid number in base 10"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"0xff\")); // not a valid number in base 10"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"23.0\")); // cannot contain the decimal point"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Zero length duration"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"0\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Negative duration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Not shorter than length of day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"1440\")); // exact length of day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"1441\")); // longer than a day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Good slot durations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"023\")); // allow leading \u00270\u0027 digits; parsed as 23 minutes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"1\")); // minimum allowed length"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"1439\")); // maximum allowed length"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 45
    }
  },
  {
    "path": "src/test/java/clzzz/helper/model/slot/SlotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limdylan"
        },
        "content": "package clzzz.helper.model.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "class SlotTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SlotDuration(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String invalidDuration \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SlotDuration(invalidDuration));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    void isValidDuration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Cannot cast from String to long"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"word\")); // contains no digits"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"ff\")); // not a valid number in base 10"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"0xff\")); // not a valid number in base 10"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"23.0\")); // cannot contain the decimal point"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Zero length duration"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"0\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Negative duration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"-1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Not shorter than length of day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"1440\")); // exact length of day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertFalse(SlotDuration.isValidDuration(\"1441\")); // longer than a day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limdylan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        // Good slot durations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"023\")); // allow leading \u00270\u0027 digits; parsed as 23 minutes"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"1\")); // minimum allowed length"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        assertTrue(SlotDuration.isValidDuration(\"1439\")); // maximum allowed length"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 45
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/JsonAdaptedPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.storage.JsonAdaptedPet.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.GARFIELD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonAdaptedPetTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_DOB \u003d \"01 Mar 2010\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"m\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_SPECIES \u003d \"cat^\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD_NAME \u003d \"ABC\u0026\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD_AMOUNT \u003d \"-1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_FOOD \u003d INVALID_FOOD_NAME + \":\" + INVALID_FOOD_AMOUNT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#lazy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_NAME \u003d GARFIELD.getName().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_DOB \u003d GARFIELD.getDateOfBirth().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_GENDER \u003d GARFIELD.getGender().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_SPECIES \u003d GARFIELD.getSpecies().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final List\u003cJsonAdaptedFood\u003e VALID_FOODLIST \u003d GARFIELD.getFoodList().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .map(JsonAdaptedFood::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d GARFIELD.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_validPetDetails_returnsPet() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet(GARFIELD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(GARFIELD, pet.toModelType());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(INVALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                null, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, INVALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, null, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, INVALID_DOB, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d DateOfBirth.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullDateOfBirth_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, VALID_GENDER, null, VALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateOfBirth.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, INVALID_SPECIES, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        String expectedMessage \u003d Species.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_nullSpecies_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d new JsonAdaptedPet("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                VALID_NAME, VALID_GENDER, VALID_DOB, null, VALID_FOODLIST, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Species.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, pet::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidFoodList_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cJsonAdaptedFood\u003e invalidFoodList \u003d new ArrayList\u003c\u003e(VALID_FOODLIST);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        invalidFoodList.add(new JsonAdaptedFood(INVALID_FOOD));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, invalidFoodList, VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, pet::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonAdaptedPet pet \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                new JsonAdaptedPet(VALID_NAME, VALID_GENDER, VALID_DOB, VALID_SPECIES, VALID_FOODLIST, invalidTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, pet::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 97,
      "shenghaoc": 32
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/JsonAdaptedSlotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.storage.JsonAdaptedSlot.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTrackerWithSlots;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.slot.TypicalSlots.GARFIELD_SLOT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.parser.slot.SlotParserUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class JsonAdaptedSlotTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_DATE_TIME \u003d \"01 Mar 2010\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String INVALID_DURATION \u003d \"0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_NAME \u003d GARFIELD_SLOT.getPet().getName().fullName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private static final String VALID_DATE_TIME \u003d GARFIELD_SLOT.getDateTime().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String VALID_DURATION \u003d GARFIELD_SLOT.getDuration().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private PetTracker typicalPetTracker \u003d getTypicalPetTrackerWithSlots();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_validSlotDetails_returnsSlot() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(GARFIELD_SLOT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(GARFIELD_SLOT, slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                new JsonAdaptedSlot(INVALID_NAME, VALID_DATE_TIME, VALID_DURATION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d SlotParserUtil.MESSAGE_INVALID_PETNAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(null, VALID_DATE_TIME, VALID_DURATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(VALID_NAME, INVALID_DATE_TIME, VALID_DURATION);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(VALID_NAME, null, VALID_DURATION);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_invalidDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(VALID_NAME, VALID_DATE_TIME, INVALID_DURATION);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String expectedMessage \u003d SlotDuration.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_nullDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonAdaptedSlot slot \u003d new JsonAdaptedSlot(VALID_NAME, VALID_DATE_TIME, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, SlotDuration.class.getSimpleName());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, () -\u003e slot.toModelType(typicalPetTracker));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limdylan": 7,
      "shenghaoc": 71
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/JsonPetTrackerStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.HOON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.IDA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonPetTrackerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonPetTrackerStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPetTracker(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPetTracker\u003e readPetTracker(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return new JsonPetTrackerStorage(Paths.get(filePath)).readPetTracker(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertFalse(readPetTracker(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"notJsonFormatPetTracker.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_invalidPetTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"invalidPetTracker.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readPetTracker_invalidAndValidPetTracker_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPetTracker(\"invalidAndValidPetTracker.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void readAndSavePetTracker_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPetTracker.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker original \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonPetTrackerStorage jsonPetTrackerStorage \u003d new JsonPetTrackerStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ReadOnlyPetTracker readBack \u003d jsonPetTrackerStorage.readPetTracker(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        original.addPet(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        original.removePet(AMY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        readBack \u003d jsonPetTrackerStorage.readPetTracker(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        original.addPet(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        jsonPetTrackerStorage.savePetTracker(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        readBack \u003d jsonPetTrackerStorage.readPetTracker().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void savePetTracker_nullPetTracker_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePetTracker(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Saves {@code petTracker} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private void savePetTracker(ReadOnlyPetTracker petTracker, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            new JsonPetTrackerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                    .savePetTracker(petTracker, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void savePetTracker_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePetTracker(new PetTracker(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 91,
      "shenghaoc": 19
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/JsonSerializablePetTrackerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.pet.TypicalPets;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "public class JsonSerializablePetTrackerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializablePetTrackerTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path TYPICAL_PETS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPetTracker.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path INVALID_PET_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPetTracker.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    private static final Path DUPLICATE_PET_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePetTracker.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Path TYPICAL_SLOTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPetTrackerWithSlots.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final Path INVALID_SLOT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPetTrackerWithSlots.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_typicalPetsFile_success() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PETS_FILE,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker petTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        PetTracker typicalPetTracker \u003d TypicalPets.getTypicalPetTracker();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(petTrackerFromFile, typicalPetTracker);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_invalidPetFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PET_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void toModelType_duplicatePets_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PET_FILE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializablePetTracker.MESSAGE_DUPLICATE_PET,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_typicalSlotsFile_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_SLOTS_FILE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker petTrackerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker typicalPetTracker \u003d TypicalPets.getTypicalPetTracker();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertEquals(petTrackerFromFile, typicalPetTracker);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public void toModelType_invalidSlotFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonSerializablePetTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_SLOT_FILE,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                JsonSerializablePetTracker.class).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 39,
      "shenghaoc": 26
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.Assert;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Assert.assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        userPrefs.setPetTrackerFilePath(Paths.get(\"pettracker.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "shenghaoc": 9,
      "-": 112
    }
  },
  {
    "path": "src/test/java/clzzz/helper/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.ReadOnlyPetTracker;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        JsonPetTrackerStorage petTrackerStorage \u003d new JsonPetTrackerStorage(getTempFilePath(\"pt\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        storageManager \u003d new StorageManager(petTrackerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void petTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * {@link JsonPetTrackerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPetTrackerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker original \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        storageManager.savePetTracker(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        ReadOnlyPetTracker retrieved \u003d storageManager.readPetTracker().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertEquals(original, new PetTracker(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public void getPetTrackerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        assertNotNull(storageManager.getPetTrackerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 9,
      "shenghaoc": 9,
      "-": 50
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                    Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/PetTrackerBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class to help with building PetTracker objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " *     {@code PetTracker pt \u003d new PetTrackerBuilder().withPet(COCO).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetTrackerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private PetTracker petTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetTrackerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        petTracker \u003d new PetTracker();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetTrackerBuilder(PetTracker petTracker) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.petTracker \u003d petTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Adds a new {@code Pet} to the {@code PetTracker} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    public PetTrackerBuilder withPet(Pet pet) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        petTracker.addPet(pet);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetTracker build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return petTracker;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 29,
      "Zhu-Ruicong": 2,
      "shenghaoc": 3
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the middle index of the pet in the {@code model}\u0027s pet list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPetList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the last index of the pet in the {@code model}\u0027s pet list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPetList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the pet in the {@code model}\u0027s pet list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static Pet getPet(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return model.getFilteredPetList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_FIRST_PET \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_SECOND_PET \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Index INDEX_THIRD_PET \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Index INDEX_FIRST_SLOT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Index INDEX_SECOND_SLOT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final Index INDEX_THIRD_SLOT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 5,
      "shenghaoc": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/pet/EditPetDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A utility class to help with building EditPetDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class EditPetDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private EditPetDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder(EditPetDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.descriptor \u003d new EditPetDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns an {@code EditPetDescriptor} with fields containing {@code pet}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder(Pet pet) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor \u003d new EditPetDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setName(pet.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setGender(pet.getGender());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setDateOfBirth(pet.getDateOfBirth());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setSpecies(pet.getSpecies());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setFoodList(pet.getFoodList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setTags(pet.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        descriptor.setGender(Gender.valueOf(gender.toUpperCase()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withDateOfBirth(String dateOfBirth) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setDateOfBirth(new DateOfBirth(dateOfBirth));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Sets the {@code Species} of the {@code EditPetDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setSpecies(new Species(species));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPetDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditPetDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tianqi77": 1,
      "Zhu-Ruicong": 1,
      "shenghaoc": 86
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/pet/PetBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.DateOfBirth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Gender;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Species;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limdylan"
        },
        "content": " * A utility class to help with building Pet objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class PetBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Kiruya Momochi\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"female\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public static final String DEFAULT_DOB \u003d \"2/9/1998\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_SPECIES \u003d \"Cat\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private static final String DEFAULT_FOOD_NAME \u003d \"catfood\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    private static final Integer DEFAULT_FOOD_AMOUNT \u003d 30;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private DateOfBirth dob;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Species species;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cFood\u003e foodSet;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        gender \u003d Gender.valueOf(DEFAULT_GENDER.toUpperCase());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d new DateOfBirth(DEFAULT_DOB);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d new Species(DEFAULT_SPECIES);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        foodSet.add(new Food(DEFAULT_FOOD_NAME, DEFAULT_FOOD_AMOUNT));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Initializes the PetBuilder with the data of {@code petToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder(Pet petToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        name \u003d petToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        gender \u003d petToCopy.getGender();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dob \u003d petToCopy.getDateOfBirth();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        species \u003d petToCopy.getSpecies();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        foodSet \u003d new HashSet\u003c\u003e(petToCopy.getFoodList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(petToCopy.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Name} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Pet} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Species} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    public PetBuilder withSpecies(String species) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.species \u003d new Species(species);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code Gender} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.gender \u003d Gender.valueOf(gender.toUpperCase());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code DateOfBirth} of the {@code Pet} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public PetBuilder withDateOfBirth(String dob) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.dob \u003d new DateOfBirth(dob);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     * Parses the {@code foodList} into a {@code Set\u003cFood\u003e} and set it to the {@code Pet} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public PetBuilder withFoodList(String ... foodList) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        this.foodSet \u003d SampleDataUtil.getFoodSet(foodList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tianqi77"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Pet build() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new Pet(name, gender, dob, species, foodSet, tags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 71,
      "limdylan": 10,
      "tianqi77": 12,
      "Zhu-Ruicong": 3,
      "shenghaoc": 12
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/pet/PetUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DOB;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_FOODLIST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_SPECIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.AddPetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.pet.EditPetCommand.EditPetDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "import clzzz.helper.model.pet.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * A utility class for Pet."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class PetUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns an add command string for adding the {@code pet}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getAddPetCommand(Pet pet) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return AddPetCommand.COMMAND_WORD + \" \" + getPetDetails(pet);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the part of command string for the given {@code pet}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getPetDetails(Pet pet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_NAME + pet.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_GENDER + pet.getGender().toString() + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_DOB + pet.getDateOfBirth().toString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        sb.append(PREFIX_SPECIES + pet.getSpecies().toString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pet.getFoodList().stream().forEach(s -\u003e sb.append(PREFIX_FOODLIST + s.foodName + \":\" + s.foodAmount + \" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pet.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns the part of command string for the given {@code EditPetDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static String getEditPetDescriptorDetails(EditPetDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getDateOfBirth().ifPresent(dateOfBirth -\u003e sb.append(PREFIX_DOB).append(dateOfBirth.toString())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                .append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getFoodList().get().forEach(s -\u003e sb.append(PREFIX_FOODLIST + s.foodName + \":\" + s.foodAmount + \" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.getSpecies().ifPresent(species -\u003e sb.append(PREFIX_SPECIES).append(species.toString()).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 63
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/pet/TypicalPets.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.pet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_COCO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DOB_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_FOOD_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_FOOD_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_GENDER_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_COCO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_SPECIES_GARFIELD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_FAT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_TAG_LAZY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.testutil.slot.TypicalSlots;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "//TODO the package it belongs to does not fit its usage (potentially used for slots too, make it outside or split up)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class containing a list of {@code Pet} objects to be used in tests."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class TypicalPets {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet AMY \u003d new PetBuilder().withName(\"Amy\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limdylan"
        },
        "content": "            .withSpecies(\"Dog\").withDateOfBirth(\"1/6/2015\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .withGender(\"female\").withFoodList(\"Brand A:10\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"darkFur\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet BOB \u003d new PetBuilder().withName(\"Bob\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withSpecies(\"Cat\").withFoodList(\"Brand B:10\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "            .withDateOfBirth(\"19/6/1978\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            .withTags(\"fat\", \"lazy\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet CARL \u003d new PetBuilder().withName(\"Carl\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"1/3/2015\").withSpecies(\"Husky\").withFoodList(\"Brand C:10\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet DANIEL \u003d new PetBuilder().withName(\"Daniel\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"2/3/2015\").withSpecies(\"Dolphin\").withTags(\"pink\").withFoodList(\"Brand D:10\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet ELLE \u003d new PetBuilder().withName(\"Elle\").withGender(\"FEMALE\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"3/3/2015\").withFoodList(\"Brand E:10\").withSpecies(\"Parrot\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet FIONA \u003d new PetBuilder().withName(\"Fiona\").withGender(\"FEMALE\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"4/3/2015\").withFoodList(\"Brand F:10\").withSpecies(\"Goldfish\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet GEORGE \u003d new PetBuilder().withName(\"George\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"5/3/2015\").withSpecies(\"Slug\").withFoodList(\"Brand G:10\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet HOON \u003d new PetBuilder().withName(\"Hoon\").withGender(\"male\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"6/3/2015\").withSpecies(\"passerine\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tianqi77"
        },
        "content": "    public static final Pet IDA \u003d new PetBuilder().withName(\"Ida\").withGender(\"MALE\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(\"7/3/2015\").withSpecies(\"bull\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    // Manually added - Pet\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet COCO \u003d new PetBuilder().withName(VALID_NAME_COCO).withGender(VALID_GENDER_COCO)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(VALID_DOB_COCO).withSpecies(VALID_SPECIES_COCO).withFoodList(VALID_FOOD_COCO)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withTags(VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Pet GARFIELD \u003d new PetBuilder().withName(VALID_NAME_GARFIELD).withGender(VALID_GENDER_GARFIELD)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateOfBirth(VALID_DOB_GARFIELD).withSpecies(VALID_SPECIES_GARFIELD).withFoodList(VALID_FOOD_GARFIELD)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withTags(VALID_TAG_FAT, VALID_TAG_LAZY).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private TypicalPets() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "     * Returns a {@code PetTracker} with all the typical pets."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static PetTracker getTypicalPetTracker() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        PetTracker pt \u003d new PetTracker();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        for (Pet pet : getTypicalPets()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "            pt.addPet(pet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return pt;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static PetTracker getTypicalPetTrackerWithSlots() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        PetTracker pt \u003d new PetTracker();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (Pet pet : getTypicalPets()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            pt.addPet(pet);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        for (Slot slot : TypicalSlots.getTypicalSlots()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            pt.addSlot(slot);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return pt;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static List\u003cPet\u003e getTypicalPets() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AMY, BOB, CARL, DANIEL, ELLE, FIONA, GEORGE, COCO, GARFIELD));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 35,
      "limdylan": 1,
      "tianqi77": 9,
      "shenghaoc": 49
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/slot/EditSlotDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class to help with building EditSlotDescriptor objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class EditSlotDescriptorBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private PetTracker typicalPetTracker \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private EditSlotDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor \u003d new EditSlotDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptorBuilder(EditSlotDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        this.descriptor \u003d new EditSlotDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns an {@code EditSlotDescriptor} with fields containing {@code pet}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptorBuilder(Slot slot) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor \u003d new EditSlotDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.setPet(slot.getPet());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.setDateTime(slot.getDateTime());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.setDuration(slot.getDuration());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Pet} of the {@code EditSlotDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public EditSlotDescriptorBuilder withPet(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        descriptor.setPet(typicalPetTracker.getPet(new Name(name)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditSlotDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code SlotDuration} of the {@code EditSlotDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptorBuilder withDuration(String dateOfBirth) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        descriptor.setDuration(new SlotDuration(dateOfBirth));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public EditSlotDescriptor build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 50,
      "limdylan": 6,
      "shenghaoc": 9
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/slot/SlotBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.pet.TypicalPets.getTypicalPetTracker;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.CommandTestUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.PetTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.pet.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limdylan"
        },
        "content": "import clzzz.helper.model.slot.SlotDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class to help with building Slot objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final String DEFAULT_NAME \u003d CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"1/3/2020 1200\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static final String DEFAULT_DURATION \u003d \"20\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    private PetTracker typicalPetTracker \u003d getTypicalPetTracker();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    private Pet pet;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limdylan"
        },
        "content": "    private SlotDuration duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public SlotBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        pet \u003d typicalPetTracker.getPet(new Name(DEFAULT_NAME));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        duration \u003d new SlotDuration(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Initializes the SlotBuilder with the data of {@code slotToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public SlotBuilder(Slot slotToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        pet \u003d slotToCopy.getPet();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        dateTime \u003d slotToCopy.getDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        duration \u003d slotToCopy.getDuration();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Sets the {@code Pet} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public SlotBuilder withPet(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        this.pet \u003d typicalPetTracker.getPet(new Name(name));;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public SlotBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limdylan"
        },
        "content": "     * Sets the {@code SlotDuration} of the {@code Slot} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public SlotBuilder withDuration(String duration) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        this.duration \u003d new SlotDuration(duration);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public Slot build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return new Slot(pet, dateTime, duration);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 44,
      "limdylan": 10,
      "shenghaoc": 13
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/slot/SlotUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.AddSlotCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.logic.commands.slot.EditSlotCommand.EditSlotDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " * A utility class for Slot."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "umaikaze"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "public class SlotUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns an add command string for adding the {@code slot}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static String getAddSlotCommand(Slot slot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return AddSlotCommand.COMMAND_WORD + \" \" + getSlotDetails(slot);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns the part of command string for the given {@code slot}\u0027s details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static String getSlotDetails(Slot slot) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        sb.append(PREFIX_NAME + slot.getPet().getName().toString() + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        sb.append(PREFIX_DATETIME + slot.getDateTime().toString() + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limdylan"
        },
        "content": "        sb.append(PREFIX_DURATION + slot.getDuration().toString() + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "umaikaze"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     * Returns the part of command string for the given {@code EditSlotDescriptor}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    public static String getEditSlotDescriptorDetails(EditSlotDescriptor descriptor) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.getPet().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.getName()).append(\" \"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.getDateTime().ifPresent(dateTime -\u003e sb.append(PREFIX_DATETIME)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .append(dateTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        descriptor.getDuration().ifPresent(duration -\u003e sb.append(PREFIX_DURATION)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limdylan"
        },
        "content": "                .append(duration.toString()).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "umaikaze"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "umaikaze": 35,
      "limdylan": 4,
      "shenghaoc": 7
    }
  },
  {
    "path": "src/test/java/clzzz/helper/testutil/slot/TypicalSlots.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.testutil.slot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_COCO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DATETIME_GARFIELD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_COCO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_DURATION_GARFIELD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_COCO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.logic.commands.CommandTestUtil.VALID_NAME_GARFIELD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.model.slot.Slot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " * Class to generate sample slots, needs to be initialized first in order to correctly reference the pets in model"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "public class TypicalSlots {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Slot COCO_SLOT \u003d new SlotBuilder().withPet(VALID_NAME_COCO)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateTime(VALID_DATETIME_COCO)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDuration(VALID_DURATION_COCO).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static final Slot GARFIELD_SLOT \u003d new SlotBuilder().withPet(VALID_NAME_GARFIELD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDateTime(VALID_DATETIME_GARFIELD)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "            .withDuration(VALID_DURATION_GARFIELD).build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    public static List\u003cSlot\u003e getTypicalSlots() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(COCO_SLOT, GARFIELD_SLOT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 32
    }
  },
  {
    "path": "src/test/java/clzzz/helper/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/clzzz/helper/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "package clzzz.helper.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import static clzzz.helper.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "import clzzz.helper.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "        String testFilePathInView \u003d \"/petview/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1,
      "shenghaoc": 3,
      "-": 110
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/invalidFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 1
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003c?import clzzz.helper.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 3,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/test/resources/petview/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003cfx:root type\u003d\"clzzz.helper.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Zhu-Ruicong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Zhu-Ruicong": 5,
      "shenghaoc": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003c?import clzzz.helper.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shenghaoc"
        },
        "content": "\u003cfx:root type\u003d\"clzzz.helper.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "shenghaoc": 1,
      "-": 5
    }
  }
]
