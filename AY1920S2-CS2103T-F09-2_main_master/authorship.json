[
  {
    "path": ".classpath",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cclasspath\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"src\" output\u003d\"bin/main\" path\u003d\"src/main/java\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cattributes\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_scope\" value\u003d\"main\"/\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_used_by_scope\" value\u003d\"main,test\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/attributes\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/classpathentry\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"src\" output\u003d\"bin/main\" path\u003d\"src/main/resources\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cattributes\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_scope\" value\u003d\"main\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_used_by_scope\" value\u003d\"main,test\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/attributes\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/classpathentry\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"src\" output\u003d\"bin/test\" path\u003d\"src/test/java\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cattributes\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_scope\" value\u003d\"test\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_used_by_scope\" value\u003d\"test\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/attributes\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/classpathentry\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"src\" output\u003d\"bin/test\" path\u003d\"src/test/resources\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cattributes\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_scope\" value\u003d\"test\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cattribute name\u003d\"gradle_used_by_scope\" value\u003d\"test\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/attributes\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/classpathentry\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"con\" path\u003d\"org.eclipse.buildship.core.gradleclasspathcontainer\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cclasspathentry kind\u003d\"output\" path\u003d\"bin/default\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/classpath\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 30
    }
  },
  {
    "path": ".editorconfig",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "[*]"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "charset \u003d utf-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "end_of_line \u003d lf"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "indent_style \u003d space"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "insert_final_newline \u003d false"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "max_line_length \u003d 120"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "tab_width \u003d 4"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ij_continuation_indent_size \u003d 8"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ij_formatter_off_tag \u003d @formatter:off"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ij_formatter_on_tag \u003d @formatter:on"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ij_formatter_tags_enabled \u003d false"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ij_smart_tabs \u003d false"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ij_visual_guides \u003d 110,120"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ij_wrap_on_typing \u003d true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "[*.css]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_align_closing_brace_with_properties \u003d false"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_blank_lines_around_nested_selector \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_blank_lines_between_blocks \u003d 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_brace_placement \u003d 0"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_enforce_quotes_on_format \u003d false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_hex_color_long_format \u003d false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_hex_color_lower_case \u003d false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_hex_color_short_format \u003d false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_hex_color_upper_case \u003d false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_keep_single_line_blocks \u003d false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_properties_order \u003d font,font-family,font-size,font-weight,font-style,font-variant,font-size-adjust,font-stretch,line-height,position,z-index,top,right,bottom,left,display,visibility,float,clear,overflow,overflow-x,overflow-y,clip,zoom,align-content,align-items,align-self,flex,flex-flow,flex-basis,flex-direction,flex-grow,flex-shrink,flex-wrap,justify-content,order,box-sizing,width,min-width,max-width,height,min-height,max-height,margin,margin-top,margin-right,margin-bottom,margin-left,padding,padding-top,padding-right,padding-bottom,padding-left,table-layout,empty-cells,caption-side,border-spacing,border-collapse,list-style,list-style-position,list-style-type,list-style-image,content,quotes,counter-reset,counter-increment,resize,cursor,user-select,nav-index,nav-up,nav-right,nav-down,nav-left,transition,transition-delay,transition-timing-function,transition-duration,transition-property,transform,transform-origin,animation,animation-name,animation-duration,animation-play-state,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,text-align,text-align-last,vertical-align,white-space,text-decoration,text-emphasis,text-emphasis-color,text-emphasis-style,text-emphasis-position,text-indent,text-justify,letter-spacing,word-spacing,text-outline,text-transform,text-wrap,text-overflow,text-overflow-ellipsis,text-overflow-mode,word-wrap,word-break,tab-size,hyphens,pointer-events,opacity,color,border,border-width,border-style,border-color,border-top,border-top-width,border-top-style,border-top-color,border-right,border-right-width,border-right-style,border-right-color,border-bottom,border-bottom-width,border-bottom-style,border-bottom-color,border-left,border-left-width,border-left-style,border-left-color,border-radius,border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius,border-image,border-image-source,border-image-slice,border-image-width,border-image-outset,border-image-repeat,outline,outline-width,outline-style,outline-color,outline-offset,background,background-color,background-image,background-repeat,background-attachment,background-position,background-position-x,background-position-y,background-clip,background-origin,background-size,box-decoration-break,box-shadow,text-shadow"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_space_after_colon \u003d true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_space_before_opening_brace \u003d true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "ij_css_value_alignment \u003d 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[*.feature]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "ij_gherkin_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[*.gsp]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "ij_gsp_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[*.haml]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ij_haml_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[*.java]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "ij_continuation_indent_size \u003d 4"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ij_wrap_on_typing \u003d false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_consecutive_assignments \u003d false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_consecutive_variable_declarations \u003d false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_group_field_declarations \u003d false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_annotation_parameters \u003d false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_array_initializer_expression \u003d false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_assignment \u003d false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ij_java_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_chained_methods \u003d false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_for \u003d false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_method_parentheses \u003d false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_parameters \u003d false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ij_java_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_parenthesized_expression \u003d false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_resources \u003d true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_text_blocks \u003d false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_multiline_throws_list \u003d false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_subsequent_simple_methods \u003d true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_align_throws_keyword \u003d false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_annotation_parameter_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_array_initializer_wrap \u003d normal"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_assert_statement_colon_on_next_line \u003d false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_assert_statement_wrap \u003d normal"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_assignment_wrap \u003d normal"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_binary_operation_sign_on_next_line \u003d true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_binary_operation_wrap \u003d normal"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_after_anonymous_class_header \u003d 0"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_after_class_header \u003d 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_after_imports \u003d 1"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_after_package \u003d 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_class \u003d 1"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_field \u003d 0"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_field_in_interface \u003d 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_initializer \u003d 1"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_method \u003d 1"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_around_method_in_interface \u003d 1"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_before_class_end \u003d 0"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_before_imports \u003d 1"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_before_method_body \u003d 0"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_blank_lines_before_package \u003d 0"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_block_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_call_parameters_right_paren_on_new_line \u003d true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_call_parameters_wrap \u003d normal"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_case_statement_on_separate_line \u003d true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_class_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_class_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_class_count_to_use_import_on_demand \u003d 999"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_class_names_in_javadoc \u003d 1"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_do_not_indent_top_level_class_members \u003d false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_do_not_wrap_after_single_annotation \u003d false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_do_while_brace_force \u003d always"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_add_blank_line_after_description \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_add_blank_line_after_param_comments \u003d false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_add_blank_line_after_return \u003d false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_add_p_tag_on_empty_lines \u003d true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_align_exception_comments \u003d true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_align_param_comments \u003d true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_do_not_wrap_if_one_line \u003d false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_enable_formatting \u003d true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_enable_leading_asterisks \u003d true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_indent_on_continuation \u003d false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_keep_empty_lines \u003d true"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_keep_empty_parameter_tag \u003d true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_keep_empty_return_tag \u003d true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_keep_empty_throws_tag \u003d true"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_keep_invalid_tags \u003d true"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_param_description_on_new_line \u003d false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_preserve_line_breaks \u003d false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_doc_use_throws_not_exception_tag \u003d true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_dd_suffix \u003d EJB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_eb_suffix \u003d Bean"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_hi_suffix \u003d Home"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_lhi_prefix \u003d Local"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_lhi_suffix \u003d Home"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_li_prefix \u003d Local"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_pk_class \u003d java.lang.String"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_entity_vo_suffix \u003d VO"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_enum_constants_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_extends_keyword_wrap \u003d normal"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_extends_list_wrap \u003d normal"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_field_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_for_brace_force \u003d always"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_for_statement_wrap \u003d normal"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_generate_final_locals \u003d false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_generate_final_parameters \u003d false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_if_brace_force \u003d always"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_imports_layout \u003d $*,|,java.**,javax.**,|,org.**,|,com.**,|,*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_indent_case_from_switch \u003d false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_insert_inner_class_imports \u003d false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_insert_override_annotation \u003d true"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_blank_lines_before_right_brace \u003d 2"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_blank_lines_between_package_declaration_and_header \u003d 2"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_blank_lines_in_declarations \u003d 1"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_control_statement_in_one_line \u003d false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_first_column_comment \u003d false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ij_java_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_multiple_expressions_in_one_line \u003d false"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_simple_blocks_in_one_line \u003d false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_simple_classes_in_one_line \u003d false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_simple_lambdas_in_one_line \u003d false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_keep_simple_methods_in_one_line \u003d false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_label_indent_absolute \u003d false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_label_indent_size \u003d 0"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_lambda_brace_style \u003d next_line_if_wrapped"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_layout_static_imports_separately \u003d true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_line_comment_add_space \u003d true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_line_comment_at_first_column \u003d false"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_message_dd_suffix \u003d EJB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_message_eb_suffix \u003d Bean"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_call_chain_wrap \u003d normal"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_method_parameters_wrap \u003d normal"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_modifier_list_wrap \u003d false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_names_count_to_use_import_on_demand \u003d 999"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_parameter_annotation_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_place_assignment_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_prefer_longer_names \u003d true"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_prefer_parameters_wrap \u003d false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_repeat_synchronized \u003d true"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_replace_instanceof_and_cast \u003d false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_replace_null_check \u003d true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_replace_sum_lambda_with_method_ref \u003d true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_resource_list_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_resource_list_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_resource_list_wrap \u003d normal"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_dd_suffix \u003d EJB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_eb_suffix \u003d Bean"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_hi_suffix \u003d Home"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_lhi_prefix \u003d Local"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_lhi_suffix \u003d Home"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_li_prefix \u003d Local"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_session_si_suffix \u003d Service"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_closing_angle_bracket_in_type_argument \u003d false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_colon \u003d true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_comma \u003d true"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_comma_in_type_arguments \u003d true"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_for_semicolon \u003d true"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_quest \u003d true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_after_type_cast \u003d true"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_annotation_array_initializer_left_brace \u003d false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_annotation_parameter_list \u003d false"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_array_initializer_left_brace \u003d false"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_class_left_brace \u003d true"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_colon \u003d true"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_colon_in_foreach \u003d true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_comma \u003d false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_do_left_brace \u003d true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_finally_keyword \u003d true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_finally_left_brace \u003d true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_opening_angle_bracket_in_type_parameter \u003d false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_quest \u003d true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_synchronized_left_brace \u003d true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_synchronized_parentheses \u003d true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_try_parentheses \u003d true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_type_parameter_list \u003d false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_inside_one_line_enum_braces \u003d false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_within_empty_array_initializer_braces \u003d false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_within_empty_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_space_within_empty_method_parentheses \u003d false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_lambda_arrow \u003d true"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_method_ref_dbl_colon \u003d false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_type_bounds_in_type_parameters \u003d true"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_angle_brackets \u003d false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_annotation_parentheses \u003d false"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_array_initializer_braces \u003d false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_braces \u003d false"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_cast_parentheses \u003d false"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_parentheses \u003d false"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_synchronized_parentheses \u003d false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_try_parentheses \u003d false"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_special_else_if_treatment \u003d true"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_subclass_name_suffix \u003d Impl"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_ternary_operation_signs_on_next_line \u003d false"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_ternary_operation_wrap \u003d normal"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_test_name_suffix \u003d Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_throws_keyword_wrap \u003d normal"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_throws_list_wrap \u003d normal"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_use_external_annotations \u003d false"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_use_fq_class_names \u003d false"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_use_relative_indents \u003d true"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_use_single_class_imports \u003d true"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_variable_annotation_wrap \u003d normal"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_visibility \u003d public"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_while_brace_force \u003d always"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_wrap_comments \u003d false"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_wrap_first_method_in_call_chain \u003d false"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "ij_java_wrap_long_lines \u003d true"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[*.less]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_align_closing_brace_with_properties \u003d false"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_blank_lines_around_nested_selector \u003d 1"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_blank_lines_between_blocks \u003d 1"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_brace_placement \u003d 0"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_enforce_quotes_on_format \u003d false"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_hex_color_long_format \u003d false"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_hex_color_lower_case \u003d false"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_hex_color_short_format \u003d false"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_hex_color_upper_case \u003d false"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_keep_single_line_blocks \u003d false"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_properties_order \u003d font,font-family,font-size,font-weight,font-style,font-variant,font-size-adjust,font-stretch,line-height,position,z-index,top,right,bottom,left,display,visibility,float,clear,overflow,overflow-x,overflow-y,clip,zoom,align-content,align-items,align-self,flex,flex-flow,flex-basis,flex-direction,flex-grow,flex-shrink,flex-wrap,justify-content,order,box-sizing,width,min-width,max-width,height,min-height,max-height,margin,margin-top,margin-right,margin-bottom,margin-left,padding,padding-top,padding-right,padding-bottom,padding-left,table-layout,empty-cells,caption-side,border-spacing,border-collapse,list-style,list-style-position,list-style-type,list-style-image,content,quotes,counter-reset,counter-increment,resize,cursor,user-select,nav-index,nav-up,nav-right,nav-down,nav-left,transition,transition-delay,transition-timing-function,transition-duration,transition-property,transform,transform-origin,animation,animation-name,animation-duration,animation-play-state,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,text-align,text-align-last,vertical-align,white-space,text-decoration,text-emphasis,text-emphasis-color,text-emphasis-style,text-emphasis-position,text-indent,text-justify,letter-spacing,word-spacing,text-outline,text-transform,text-wrap,text-overflow,text-overflow-ellipsis,text-overflow-mode,word-wrap,word-break,tab-size,hyphens,pointer-events,opacity,color,border,border-width,border-style,border-color,border-top,border-top-width,border-top-style,border-top-color,border-right,border-right-width,border-right-style,border-right-color,border-bottom,border-bottom-width,border-bottom-style,border-bottom-color,border-left,border-left-width,border-left-style,border-left-color,border-radius,border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius,border-image,border-image-source,border-image-slice,border-image-width,border-image-outset,border-image-repeat,outline,outline-width,outline-style,outline-color,outline-offset,background,background-color,background-image,background-repeat,background-attachment,background-position,background-position-x,background-position-y,background-clip,background-origin,background-size,box-decoration-break,box-shadow,text-shadow"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_space_after_colon \u003d true"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_space_before_opening_brace \u003d true"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "ij_less_value_alignment \u003d 0"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[*.sass]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_align_closing_brace_with_properties \u003d false"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_blank_lines_around_nested_selector \u003d 1"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_blank_lines_between_blocks \u003d 1"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_brace_placement \u003d 0"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_enforce_quotes_on_format \u003d false"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_hex_color_long_format \u003d false"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_hex_color_lower_case \u003d false"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_hex_color_short_format \u003d false"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_hex_color_upper_case \u003d false"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_keep_single_line_blocks \u003d false"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_properties_order \u003d font,font-family,font-size,font-weight,font-style,font-variant,font-size-adjust,font-stretch,line-height,position,z-index,top,right,bottom,left,display,visibility,float,clear,overflow,overflow-x,overflow-y,clip,zoom,align-content,align-items,align-self,flex,flex-flow,flex-basis,flex-direction,flex-grow,flex-shrink,flex-wrap,justify-content,order,box-sizing,width,min-width,max-width,height,min-height,max-height,margin,margin-top,margin-right,margin-bottom,margin-left,padding,padding-top,padding-right,padding-bottom,padding-left,table-layout,empty-cells,caption-side,border-spacing,border-collapse,list-style,list-style-position,list-style-type,list-style-image,content,quotes,counter-reset,counter-increment,resize,cursor,user-select,nav-index,nav-up,nav-right,nav-down,nav-left,transition,transition-delay,transition-timing-function,transition-duration,transition-property,transform,transform-origin,animation,animation-name,animation-duration,animation-play-state,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,text-align,text-align-last,vertical-align,white-space,text-decoration,text-emphasis,text-emphasis-color,text-emphasis-style,text-emphasis-position,text-indent,text-justify,letter-spacing,word-spacing,text-outline,text-transform,text-wrap,text-overflow,text-overflow-ellipsis,text-overflow-mode,word-wrap,word-break,tab-size,hyphens,pointer-events,opacity,color,border,border-width,border-style,border-color,border-top,border-top-width,border-top-style,border-top-color,border-right,border-right-width,border-right-style,border-right-color,border-bottom,border-bottom-width,border-bottom-style,border-bottom-color,border-left,border-left-width,border-left-style,border-left-color,border-radius,border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius,border-image,border-image-source,border-image-slice,border-image-width,border-image-outset,border-image-repeat,outline,outline-width,outline-style,outline-color,outline-offset,background,background-color,background-image,background-repeat,background-attachment,background-position,background-position-x,background-position-y,background-clip,background-origin,background-size,box-decoration-break,box-shadow,text-shadow"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_space_after_colon \u003d true"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_space_before_opening_brace \u003d true"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "ij_sass_value_alignment \u003d 0"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[*.scss]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_align_closing_brace_with_properties \u003d false"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_blank_lines_around_nested_selector \u003d 1"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_blank_lines_between_blocks \u003d 1"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_brace_placement \u003d 0"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_enforce_quotes_on_format \u003d false"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_hex_color_long_format \u003d false"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_hex_color_lower_case \u003d false"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_hex_color_short_format \u003d false"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_hex_color_upper_case \u003d false"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_keep_single_line_blocks \u003d false"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_properties_order \u003d font,font-family,font-size,font-weight,font-style,font-variant,font-size-adjust,font-stretch,line-height,position,z-index,top,right,bottom,left,display,visibility,float,clear,overflow,overflow-x,overflow-y,clip,zoom,align-content,align-items,align-self,flex,flex-flow,flex-basis,flex-direction,flex-grow,flex-shrink,flex-wrap,justify-content,order,box-sizing,width,min-width,max-width,height,min-height,max-height,margin,margin-top,margin-right,margin-bottom,margin-left,padding,padding-top,padding-right,padding-bottom,padding-left,table-layout,empty-cells,caption-side,border-spacing,border-collapse,list-style,list-style-position,list-style-type,list-style-image,content,quotes,counter-reset,counter-increment,resize,cursor,user-select,nav-index,nav-up,nav-right,nav-down,nav-left,transition,transition-delay,transition-timing-function,transition-duration,transition-property,transform,transform-origin,animation,animation-name,animation-duration,animation-play-state,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,text-align,text-align-last,vertical-align,white-space,text-decoration,text-emphasis,text-emphasis-color,text-emphasis-style,text-emphasis-position,text-indent,text-justify,letter-spacing,word-spacing,text-outline,text-transform,text-wrap,text-overflow,text-overflow-ellipsis,text-overflow-mode,word-wrap,word-break,tab-size,hyphens,pointer-events,opacity,color,border,border-width,border-style,border-color,border-top,border-top-width,border-top-style,border-top-color,border-right,border-right-width,border-right-style,border-right-color,border-bottom,border-bottom-width,border-bottom-style,border-bottom-color,border-left,border-left-width,border-left-style,border-left-color,border-radius,border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius,border-image,border-image-source,border-image-slice,border-image-width,border-image-outset,border-image-repeat,outline,outline-width,outline-style,outline-color,outline-offset,background,background-color,background-image,background-repeat,background-attachment,background-position,background-position-x,background-position-y,background-clip,background-origin,background-size,box-decoration-break,box-shadow,text-shadow"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_space_after_colon \u003d true"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_space_before_opening_brace \u003d true"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "ij_scss_value_alignment \u003d 0"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[*.styl]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_align_closing_brace_with_properties \u003d false"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_blank_lines_around_nested_selector \u003d 1"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_blank_lines_between_blocks \u003d 1"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_brace_placement \u003d 0"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_enforce_quotes_on_format \u003d false"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_hex_color_long_format \u003d false"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_hex_color_lower_case \u003d false"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_hex_color_short_format \u003d false"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_hex_color_upper_case \u003d false"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_keep_single_line_blocks \u003d false"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_properties_order \u003d font,font-family,font-size,font-weight,font-style,font-variant,font-size-adjust,font-stretch,line-height,position,z-index,top,right,bottom,left,display,visibility,float,clear,overflow,overflow-x,overflow-y,clip,zoom,align-content,align-items,align-self,flex,flex-flow,flex-basis,flex-direction,flex-grow,flex-shrink,flex-wrap,justify-content,order,box-sizing,width,min-width,max-width,height,min-height,max-height,margin,margin-top,margin-right,margin-bottom,margin-left,padding,padding-top,padding-right,padding-bottom,padding-left,table-layout,empty-cells,caption-side,border-spacing,border-collapse,list-style,list-style-position,list-style-type,list-style-image,content,quotes,counter-reset,counter-increment,resize,cursor,user-select,nav-index,nav-up,nav-right,nav-down,nav-left,transition,transition-delay,transition-timing-function,transition-duration,transition-property,transform,transform-origin,animation,animation-name,animation-duration,animation-play-state,animation-timing-function,animation-delay,animation-iteration-count,animation-direction,text-align,text-align-last,vertical-align,white-space,text-decoration,text-emphasis,text-emphasis-color,text-emphasis-style,text-emphasis-position,text-indent,text-justify,letter-spacing,word-spacing,text-outline,text-transform,text-wrap,text-overflow,text-overflow-ellipsis,text-overflow-mode,word-wrap,word-break,tab-size,hyphens,pointer-events,opacity,color,border,border-width,border-style,border-color,border-top,border-top-width,border-top-style,border-top-color,border-right,border-right-width,border-right-style,border-right-color,border-bottom,border-bottom-width,border-bottom-style,border-bottom-color,border-left,border-left-width,border-left-style,border-left-color,border-radius,border-top-left-radius,border-top-right-radius,border-bottom-right-radius,border-bottom-left-radius,border-image,border-image-source,border-image-slice,border-image-width,border-image-outset,border-image-repeat,outline,outline-width,outline-style,outline-color,outline-offset,background,background-color,background-image,background-repeat,background-attachment,background-position,background-position-x,background-position-y,background-clip,background-origin,background-size,box-decoration-break,box-shadow,text-shadow"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_space_after_colon \u003d true"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_space_before_opening_brace \u003d true"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "ij_stylus_value_alignment \u003d 0"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "[.editorconfig]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_align_group_field_declarations \u003d false"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_space_after_colon \u003d false"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_space_after_comma \u003d true"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_space_before_colon \u003d false"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_space_before_comma \u003d false"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "ij_editorconfig_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.as,*.js2,*.es}]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_imports \u003d false"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_array_initializer_expression \u003d false"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_chained_methods \u003d false"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_for \u003d true"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_object_properties \u003d 0"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_union_types \u003d false"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_align_var_statements \u003d 0"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_array_initializer_wrap \u003d off"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_binary_operation_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_binary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blacklist_imports \u003d rxjs/Rx,node_modules/**/*,@angular/material,@angular/material/typings/**,~/node_modules/**/*,@/node_modules/**/*"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_after_imports \u003d 1"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_after_package \u003d 0"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_around_function \u003d 1"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_around_method \u003d 1"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_before_imports \u003d 1"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_blank_lines_before_package \u003d 0"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_chained_call_dot_on_new_line \u003d true"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_class_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_comma_on_new_line \u003d false"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_do_while_brace_force \u003d never"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_enforce_trailing_comma \u003d keep"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_extends_keyword_wrap \u003d off"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_extends_list_wrap \u003d off"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_field_prefix \u003d _"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_file_name_style \u003d relaxed"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_for_brace_force \u003d never"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_for_statement_wrap \u003d off"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_force_quote_style \u003d false"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_force_semicolon_style \u003d false"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_function_expression_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_if_brace_force \u003d never"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_import_merge_members \u003d global"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_import_prefer_absolute_path \u003d global"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_import_sort_members \u003d true"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_import_sort_module_name \u003d false"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_import_use_node_resolution \u003d true"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_imports_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_indent_case_from_switch \u003d true"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_indent_chained_calls \u003d true"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_indent_package_children \u003d 0"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_jsx_attribute_value \u003d braces"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_simple_blocks_in_one_line \u003d false"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_keep_simple_methods_in_one_line \u003d false"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_line_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_method_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_method_call_chain_wrap \u003d off"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_object_literal_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_place_assignment_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_prefer_as_type_cast \u003d false"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_prefer_parameters_wrap \u003d false"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_reformat_c_style_comments \u003d false"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_colon \u003d true"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_comma \u003d true"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_dots_in_rest_parameter \u003d false"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_generator_mult \u003d true"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_property_colon \u003d true"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_quest \u003d true"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_type_colon \u003d false"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_after_unary_not \u003d false"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_async_arrow_lparen \u003d true"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_class_lbrace \u003d true"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_colon \u003d true"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_comma \u003d false"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_do_left_brace \u003d true"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_finally_keyword \u003d true"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_finally_left_brace \u003d true"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_function_left_parenth \u003d true"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_generator_mult \u003d false"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_property_colon \u003d false"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_quest \u003d true"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_type_colon \u003d false"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_unary_not \u003d false"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_arrow_function_operator \u003d true"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_array_initializer_brackets \u003d false"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_imports \u003d false"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_interpolation_expressions \u003d false"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_object_literal_braces \u003d false"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_object_type_braces \u003d true"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_parentheses \u003d false"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_type_assertion \u003d false"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_union_types \u003d true"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_special_else_if_treatment \u003d true"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_ternary_operation_signs_on_next_line \u003d false"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_ternary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_union_types_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_chained_calls_group_indents \u003d false"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_explicit_js_extension \u003d global"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_path_mapping \u003d always"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_public_modifier \u003d false"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_use_semicolon_after_statement \u003d true"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_var_declaration_wrap \u003d normal"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_while_brace_force \u003d never"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "ij_actionscript_wrap_comments \u003d false"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.cfml,*.cfm,*.cfc}]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_align_multiline_for \u003d true"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_binary_operation_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_binary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_for_statement_wrap \u003d off"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_method_brace_style \u003d next_line"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_place_assignment_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_after_colon \u003d true"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_after_comma \u003d true"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_after_for_semicolon \u003d true"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_after_quest \u003d true"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_colon \u003d true"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_comma \u003d false"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_quest \u003d true"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_special_else_if_treatment \u003d false"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_ternary_operation_signs_on_next_line \u003d false"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_ternary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "ij_cfml_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.cjs,*.js}]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "ij_continuation_indent_size \u003d 4"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_imports \u003d false"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_array_initializer_expression \u003d false"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_chained_methods \u003d false"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_for \u003d true"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_object_properties \u003d 0"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_union_types \u003d false"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_align_var_statements \u003d 0"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_array_initializer_wrap \u003d off"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_binary_operation_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_binary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blacklist_imports \u003d rxjs/Rx,node_modules/**/*,@angular/material,@angular/material/typings/**,~/node_modules/**/*,@/node_modules/**/*"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blank_lines_after_imports \u003d 1"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blank_lines_around_class \u003d 1"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blank_lines_around_field \u003d 0"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blank_lines_around_function \u003d 1"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_blank_lines_around_method \u003d 1"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_chained_call_dot_on_new_line \u003d true"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_class_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_comma_on_new_line \u003d false"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_do_while_brace_force \u003d never"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_enforce_trailing_comma \u003d keep"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_extends_keyword_wrap \u003d off"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_extends_list_wrap \u003d off"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_field_prefix \u003d _"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_file_name_style \u003d relaxed"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_for_brace_force \u003d never"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_for_statement_wrap \u003d off"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_force_quote_style \u003d false"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_force_semicolon_style \u003d false"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_function_expression_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_if_brace_force \u003d never"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_import_merge_members \u003d global"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_import_prefer_absolute_path \u003d global"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_import_sort_members \u003d true"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_import_sort_module_name \u003d false"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_import_use_node_resolution \u003d true"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_imports_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_indent_case_from_switch \u003d true"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_indent_chained_calls \u003d true"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_indent_package_children \u003d 0"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_jsx_attribute_value \u003d braces"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_simple_blocks_in_one_line \u003d false"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_keep_simple_methods_in_one_line \u003d false"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_line_comment_add_space \u003d true"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_line_comment_at_first_column \u003d false"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_method_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_method_call_chain_wrap \u003d off"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_object_literal_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_place_assignment_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_prefer_as_type_cast \u003d false"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_prefer_parameters_wrap \u003d false"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_reformat_c_style_comments \u003d false"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_colon \u003d true"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_comma \u003d true"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_dots_in_rest_parameter \u003d false"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_generator_mult \u003d true"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_property_colon \u003d true"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_quest \u003d true"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_type_colon \u003d true"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_after_unary_not \u003d false"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_async_arrow_lparen \u003d true"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_class_lbrace \u003d true"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_class_left_brace \u003d true"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_colon \u003d true"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_comma \u003d false"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_do_left_brace \u003d true"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_finally_keyword \u003d true"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_finally_left_brace \u003d true"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_function_left_parenth \u003d true"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_generator_mult \u003d false"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_property_colon \u003d false"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_quest \u003d true"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_type_colon \u003d false"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_unary_not \u003d false"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_arrow_function_operator \u003d true"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_array_initializer_brackets \u003d false"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_imports \u003d false"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_interpolation_expressions \u003d false"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_object_literal_braces \u003d false"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_object_type_braces \u003d true"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_parentheses \u003d false"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_type_assertion \u003d false"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_union_types \u003d true"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_special_else_if_treatment \u003d true"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_ternary_operation_signs_on_next_line \u003d false"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_ternary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_union_types_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_chained_calls_group_indents \u003d false"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_explicit_js_extension \u003d global"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_path_mapping \u003d always"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_public_modifier \u003d false"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_use_semicolon_after_statement \u003d true"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_var_declaration_wrap \u003d normal"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_while_brace_force \u003d never"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "ij_javascript_wrap_comments \u003d false"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.cjsx,*.coffee}]"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "tab_width \u003d 2"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "ij_continuation_indent_size \u003d 2"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_function_body \u003d false"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_imports \u003d false"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_multiline_array_initializer_expression \u003d true"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_object_properties \u003d 0"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_union_types \u003d false"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_align_var_statements \u003d 0"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_array_initializer_wrap \u003d normal"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_blacklist_imports \u003d rxjs/Rx,node_modules/**/*,@angular/material,@angular/material/typings/**,~/node_modules/**/*,@/node_modules/**/*"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_blank_lines_around_function \u003d 1"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_call_parameters_wrap \u003d normal"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_chained_call_dot_on_new_line \u003d true"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_comma_on_new_line \u003d false"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_enforce_trailing_comma \u003d keep"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_field_prefix \u003d _"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_file_name_style \u003d relaxed"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_force_quote_style \u003d false"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_force_semicolon_style \u003d false"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_function_expression_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_import_merge_members \u003d global"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_import_prefer_absolute_path \u003d global"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_import_sort_members \u003d true"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_import_sort_module_name \u003d false"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_import_use_node_resolution \u003d true"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_imports_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_indent_chained_calls \u003d true"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_indent_package_children \u003d 0"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_jsx_attribute_value \u003d braces"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_keep_simple_methods_in_one_line \u003d false"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_object_literal_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_prefer_as_type_cast \u003d false"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_reformat_c_style_comments \u003d false"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_comma \u003d true"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_dots_in_rest_parameter \u003d false"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_generator_mult \u003d true"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_property_colon \u003d true"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_type_colon \u003d true"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_after_unary_not \u003d false"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_async_arrow_lparen \u003d true"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_class_lbrace \u003d true"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_comma \u003d false"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_function_left_parenth \u003d true"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_generator_mult \u003d false"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_property_colon \u003d false"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_type_colon \u003d false"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_space_before_unary_not \u003d false"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_arrow_function_operator \u003d true"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_array_initializer_braces \u003d false"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_array_initializer_brackets \u003d false"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_imports \u003d false"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_index_brackets \u003d false"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_interpolation_expressions \u003d false"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_object_braces \u003d false"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_object_literal_braces \u003d false"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_object_type_braces \u003d true"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_range_brackets \u003d false"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_type_assertion \u003d false"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_spaces_within_union_types \u003d true"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_union_types_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_chained_calls_group_indents \u003d false"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_explicit_js_extension \u003d global"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_path_mapping \u003d always"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_public_modifier \u003d false"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_use_semicolon_after_statement \u003d false"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "ij_coffeescript_var_declaration_wrap \u003d normal"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.gson,*.gradle,*.groovy,*.gdsl,*.gy,*.gant}]"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_group_field_declarations \u003d false"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_array_initializer_expression \u003d false"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_assignment \u003d false"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_chained_methods \u003d false"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_for \u003d true"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_method_parentheses \u003d false"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_resources \u003d true"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_multiline_throws_list \u003d false"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_align_throws_keyword \u003d false"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_array_initializer_wrap \u003d off"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_assert_statement_wrap \u003d off"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_binary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_after_class_header \u003d 0"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_after_imports \u003d 1"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_after_package \u003d 1"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_around_class \u003d 1"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_around_field \u003d 0"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_around_field_in_interface \u003d 0"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_around_method \u003d 1"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_around_method_in_interface \u003d 1"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_before_imports \u003d 1"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_before_method_body \u003d 0"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_blank_lines_before_package \u003d 0"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_block_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_class_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_class_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_do_while_brace_force \u003d never"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_enum_constants_wrap \u003d off"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_extends_keyword_wrap \u003d off"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_extends_list_wrap \u003d off"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_field_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_for_brace_force \u003d never"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_for_statement_wrap \u003d off"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_if_brace_force \u003d never"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_indent_case_from_switch \u003d true"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_blank_lines_before_right_brace \u003d 2"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_blank_lines_in_declarations \u003d 2"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_control_statement_in_one_line \u003d true"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_multiple_expressions_in_one_line \u003d false"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_simple_blocks_in_one_line \u003d false"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_simple_classes_in_one_line \u003d true"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_simple_lambdas_in_one_line \u003d true"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_keep_simple_methods_in_one_line \u003d true"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_label_indent_absolute \u003d false"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_label_indent_size \u003d 0"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_lambda_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_line_comment_add_space \u003d false"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_line_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_call_chain_wrap \u003d off"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_modifier_list_wrap \u003d false"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_parameter_annotation_wrap \u003d off"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_prefer_parameters_wrap \u003d false"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_resource_list_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_resource_list_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_resource_list_wrap \u003d off"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_colon \u003d true"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_comma \u003d true"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_comma_in_type_arguments \u003d true"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_for_semicolon \u003d true"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_quest \u003d true"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_after_type_cast \u003d true"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_annotation_parameter_list \u003d false"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_array_initializer_left_brace \u003d false"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_class_left_brace \u003d true"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_colon \u003d true"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_comma \u003d false"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_do_left_brace \u003d true"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_finally_keyword \u003d true"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_finally_left_brace \u003d true"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_quest \u003d true"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_synchronized_left_brace \u003d true"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_synchronized_parentheses \u003d true"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_try_parentheses \u003d true"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_within_empty_array_initializer_braces \u003d false"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_space_within_empty_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_lambda_arrow \u003d true"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_annotation_parentheses \u003d false"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_array_initializer_braces \u003d false"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_braces \u003d true"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_cast_parentheses \u003d false"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_parentheses \u003d false"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_synchronized_parentheses \u003d false"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_try_parentheses \u003d false"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_special_else_if_treatment \u003d true"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_ternary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_throws_keyword_wrap \u003d off"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_throws_list_wrap \u003d off"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_use_relative_indents \u003d false"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_variable_annotation_wrap \u003d off"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_while_brace_force \u003d never"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "ij_groovy_wrap_long_lines \u003d false"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.jhm,*.xjb,*.rng,*.wsdl,*.wsdd,*.fxml,*.plan,*.bpmn,*.pom,*.xslt,*.jrxml,*.ant,*.xul,*.xsl,*.xsd,*.tld,*.jnlp,*.wadl,*.xml}]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "ij_xml_block_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "ij_xml_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "ij_xml_line_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "ij_xml_use_custom_settings \u003d false"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.jspx,*.tagx}]"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "ij_jspx_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.kts,*.kt}]"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_in_columns_case_branch \u003d false"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_multiline_method_parentheses \u003d false"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_blank_lines_after_class_header \u003d 0"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_blank_lines_around_block_when_branches \u003d 0"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_block_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_class_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_for_chained_calls \u003d true"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_for_expression_bodies \u003d true"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_in_argument_lists \u003d true"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_in_elvis \u003d true"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_in_if_conditions \u003d true"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_in_parameter_lists \u003d true"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_continuation_indent_in_supertype_lists \u003d true"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_enum_constants_wrap \u003d off"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_extends_list_wrap \u003d off"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_field_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_if_rparen_on_new_line \u003d false"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_import_nested_classes \u003d false"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_insert_whitespaces_in_simple_one_line_method \u003d true"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_blank_lines_before_right_brace \u003d 2"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_blank_lines_in_declarations \u003d 2"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_lbrace_on_next_line \u003d false"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_line_comment_add_space \u003d false"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_line_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_method_annotation_wrap \u003d split_into_lines"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_method_call_chain_wrap \u003d off"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_name_count_to_use_star_import \u003d 5"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_name_count_to_use_star_import_for_members \u003d 3"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_parameter_annotation_wrap \u003d off"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_after_comma \u003d true"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_after_extend_colon \u003d true"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_after_type_colon \u003d true"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_comma \u003d false"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_extend_colon \u003d true"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_lambda_arrow \u003d true"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_type_colon \u003d false"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_when_parentheses \u003d true"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_function_type_arrow \u003d true"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_range \u003d false"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_spaces_around_when_arrow \u003d true"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_variable_annotation_wrap \u003d off"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_wrap_elvis_expressions \u003d 1"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_wrap_expression_body_functions \u003d 0"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "ij_kotlin_wrap_first_method_in_call_chain \u003d false"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.sht,*.htm,*.html,*.shtm,*.shtml,*.ng}]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_add_new_line_before_tags \u003d body,div,p,form,h1,h2,h3"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_align_attributes \u003d true"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_align_text \u003d false"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_attribute_wrap \u003d normal"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_block_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_do_not_align_children_of_min_lines \u003d 0"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_do_not_break_if_inline_tags \u003d title,h1,h2,h3,h4,h5,h6,p"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_do_not_indent_children_of_tags \u003d html,body,thead,tbody,tfoot"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_enforce_quotes \u003d false"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_inline_tags \u003d a,abbr,acronym,b,basefont,bdo,big,br,cite,cite,code,dfn,em,font,i,img,input,kbd,label,q,s,samp,select,small,span,strike,strong,sub,sup,textarea,tt,u,var"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_blank_lines \u003d 2"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_line_breaks_in_text \u003d true"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_whitespaces \u003d false"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_keep_whitespaces_inside \u003d span,pre,textarea"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_line_comment_at_first_column \u003d true"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_new_line_after_last_attribute \u003d never"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_new_line_before_first_attribute \u003d never"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_quote_style \u003d double"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_remove_new_line_before_tags \u003d br"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_space_after_tag_name \u003d false"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_space_around_equality_in_attribute \u003d false"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_space_inside_empty_tag \u003d false"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "ij_html_text_wrap \u003d normal"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.ts,*.ats}]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "ij_continuation_indent_size \u003d 4"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_imports \u003d false"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_array_initializer_expression \u003d false"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_binary_operation \u003d false"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_chained_methods \u003d false"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_extends_list \u003d false"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_for \u003d true"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_parameters \u003d true"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_parameters_in_calls \u003d false"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_multiline_ternary_operation \u003d false"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_object_properties \u003d 0"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_union_types \u003d false"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_align_var_statements \u003d 0"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_array_initializer_new_line_after_left_brace \u003d false"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_array_initializer_right_brace_on_new_line \u003d false"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_array_initializer_wrap \u003d off"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_assignment_wrap \u003d off"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_binary_operation_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_binary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blacklist_imports \u003d rxjs/Rx,node_modules/**/*,@angular/material,@angular/material/typings/**,~/node_modules/**/*,@/node_modules/**/*"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_after_imports \u003d 1"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_class \u003d 1"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_field \u003d 0"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_field_in_interface \u003d 0"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_function \u003d 1"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_method \u003d 1"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_blank_lines_around_method_in_interface \u003d 1"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_block_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_call_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_call_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_call_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_catch_on_new_line \u003d false"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_chained_call_dot_on_new_line \u003d true"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_class_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_comma_on_new_line \u003d false"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_do_while_brace_force \u003d never"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_else_on_new_line \u003d false"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_enforce_trailing_comma \u003d keep"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_extends_keyword_wrap \u003d off"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_extends_list_wrap \u003d off"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_field_prefix \u003d _"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_file_name_style \u003d relaxed"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_finally_on_new_line \u003d false"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_for_brace_force \u003d never"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_for_statement_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_for_statement_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_for_statement_wrap \u003d off"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_force_quote_style \u003d false"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_force_semicolon_style \u003d false"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_function_expression_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_if_brace_force \u003d never"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_import_merge_members \u003d global"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_import_prefer_absolute_path \u003d global"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_import_sort_members \u003d true"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_import_sort_module_name \u003d false"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_import_use_node_resolution \u003d true"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_imports_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_indent_case_from_switch \u003d true"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_indent_chained_calls \u003d true"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_indent_package_children \u003d 0"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_jsdoc_include_types \u003d false"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_jsx_attribute_value \u003d braces"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_blank_lines_in_code \u003d 2"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_first_column_comment \u003d true"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_simple_blocks_in_one_line \u003d false"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_keep_simple_methods_in_one_line \u003d false"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_line_comment_add_space \u003d true"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_line_comment_at_first_column \u003d false"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_method_brace_style \u003d end_of_line"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_method_call_chain_wrap \u003d off"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_method_parameters_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_method_parameters_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_method_parameters_wrap \u003d off"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_object_literal_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_parentheses_expression_new_line_after_left_paren \u003d false"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_parentheses_expression_right_paren_on_new_line \u003d false"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_place_assignment_sign_on_next_line \u003d false"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_prefer_as_type_cast \u003d false"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_prefer_parameters_wrap \u003d false"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_reformat_c_style_comments \u003d false"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_colon \u003d true"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_comma \u003d true"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_dots_in_rest_parameter \u003d false"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_generator_mult \u003d true"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_property_colon \u003d true"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_quest \u003d true"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_type_colon \u003d true"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_after_unary_not \u003d false"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_async_arrow_lparen \u003d true"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_catch_keyword \u003d true"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_catch_left_brace \u003d true"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_catch_parentheses \u003d true"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_class_lbrace \u003d true"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_class_left_brace \u003d true"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_colon \u003d true"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_comma \u003d false"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_do_left_brace \u003d true"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_else_keyword \u003d true"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_else_left_brace \u003d true"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_finally_keyword \u003d true"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_finally_left_brace \u003d true"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_for_left_brace \u003d true"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_for_parentheses \u003d true"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_for_semicolon \u003d false"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_function_left_parenth \u003d true"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_generator_mult \u003d false"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_if_left_brace \u003d true"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_if_parentheses \u003d true"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_method_left_brace \u003d true"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_method_parentheses \u003d false"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_property_colon \u003d false"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_quest \u003d true"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_switch_left_brace \u003d true"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_switch_parentheses \u003d true"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_try_left_brace \u003d true"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_type_colon \u003d false"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_unary_not \u003d false"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_while_keyword \u003d true"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_while_left_brace \u003d true"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_space_before_while_parentheses \u003d true"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_additive_operators \u003d true"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_arrow_function_operator \u003d true"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_assignment_operators \u003d true"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_bitwise_operators \u003d true"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_equality_operators \u003d true"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_logical_operators \u003d true"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_multiplicative_operators \u003d true"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_relational_operators \u003d true"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_shift_operators \u003d true"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_around_unary_operator \u003d false"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_array_initializer_brackets \u003d false"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_catch_parentheses \u003d false"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_for_parentheses \u003d false"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_if_parentheses \u003d false"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_imports \u003d false"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_interpolation_expressions \u003d false"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_method_call_parentheses \u003d false"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_method_parentheses \u003d false"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_object_literal_braces \u003d false"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_object_type_braces \u003d true"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_parentheses \u003d false"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_switch_parentheses \u003d false"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_type_assertion \u003d false"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_union_types \u003d true"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_spaces_within_while_parentheses \u003d false"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_special_else_if_treatment \u003d true"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_ternary_operation_signs_on_next_line \u003d false"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_ternary_operation_wrap \u003d off"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_union_types_wrap \u003d on_every_item"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_chained_calls_group_indents \u003d false"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_double_quotes \u003d true"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_explicit_js_extension \u003d global"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_path_mapping \u003d always"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_public_modifier \u003d false"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_use_semicolon_after_statement \u003d true"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_var_declaration_wrap \u003d normal"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_while_brace_force \u003d never"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_while_on_new_line \u003d false"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "ij_typescript_wrap_comments \u003d false"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.vsl,*.vm,*.ft}]"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "ij_vtl_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.xjsp,*.tag,*.jsp,*.jsf,*.jspf,*.tagf}]"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "ij_jsp_jsp_prefer_comma_separated_import_list \u003d false"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "ij_jsp_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.yml,*.yaml}]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "ij_yaml_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "ij_yaml_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "[{*.zsh,*.bash,*.sh}]"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "tab_width \u003d 2"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "ij_shell_binary_ops_start_line \u003d false"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "ij_shell_keep_column_alignment_padding \u003d false"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "ij_shell_minify_program \u003d false"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "ij_shell_redirect_followed_by_space \u003d false"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "ij_shell_switch_cases_indented \u003d false"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "[{.babelrc,.stylelintrc,.eslintrc,jest.config,bowerrc,*.jsb3,*.jsb2,*.json}]"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "indent_size \u003d 2"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_keep_blank_lines_in_code \u003d 0"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_keep_indents_on_empty_lines \u003d false"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_keep_line_breaks \u003d true"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_space_after_colon \u003d true"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_space_after_comma \u003d true"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_space_before_colon \u003d true"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_space_before_comma \u003d false"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_spaces_within_braces \u003d false"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_spaces_within_brackets \u003d false"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "ij_json_wrap_long_lines \u003d false"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "[{spring.schemas,spring.handlers,*.properties}]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "ij_properties_align_group_field_declarations \u003d false"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 1336
    }
  },
  {
    "path": ".gitattributes",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# These settings are for any web project"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "# Handle line endings automatically for files detected as text"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "# and leave all files detected as binary untouched."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# * text\u003dauto"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# NOTE - originally I had the above line un-commented.  it caused me a lot of grief related to line endings because I was dealing with WordPress plugins and the website changing line endings out if a user modified a plugin through the web interface.  commenting this line out seems to have alleviated the git chaos where simply switching to a branch caused it to believe 500 files were modified."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "# The above will handle all files NOT found below"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "## These files are text and should be normalized (Convert crlf \u003d\u003e lf)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "# source code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "*.php text"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "*.css text"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "*.sass text"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "*.scss text"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "*.less text"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*.styl text"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*.js text"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "*.coffee text"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "*.json text"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "*.htm text"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*.html text"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "*.xml text"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "*.svg text"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*.txt text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "*.ini text"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*.inc text"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*.pl text"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*.rb text"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*.py text"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*.scm text"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*.sql text"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*.sh text"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*.bat text"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "# templates"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*.ejs text"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*.hbt text"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*.jade text"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*.haml text"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*.hbs text"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*.dot text"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*.tmpl text"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*.phtml text"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "# server config"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".htaccess text"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "# git config"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".gitattributes text"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".gitignore text"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".gitconfig text"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "# code analysis config"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".jshintrc text"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".jscsrc text"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".jshintignore text"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".csslintrc text"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "# misc config"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "*.yaml text"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "*.yml text"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".editorconfig text"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "# build config"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*.npmignore text"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "*.bowerrc text"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "# Heroku"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Procfile text"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".slugignore text"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "# Documentation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "*.md text"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "LICENSE text"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "AUTHORS text"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## These files are binary and should be left untouched"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "#"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "# (binary is a macro for -text -diff)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*.png binary"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "*.jpg binary"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "*.jpeg binary"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "*.gif binary"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "*.ico binary"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "*.mov binary"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "*.mp4 binary"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "*.mp3 binary"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "*.flv binary"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "*.fla binary"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*.swf binary"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*.gz binary"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "*.zip binary"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "*.7z binary"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*.ttf binary"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*.eot binary"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "*.woff binary"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*.pyc binary"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "*.pdf binary"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1,
      "-": 105
    }
  },
  {
    "path": ".project",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cprojectDescription\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cname\u003emain\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003ccomment\u003eProject main created by Buildship.\u003c/comment\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cprojects\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/projects\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cbuildSpec\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cbuildCommand\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cname\u003eorg.eclipse.jdt.core.javabuilder\u003c/name\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003carguments\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003c/arguments\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/buildCommand\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cbuildCommand\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003cname\u003eorg.eclipse.buildship.core.gradleprojectbuilder\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003carguments\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\t\u003c/arguments\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003c/buildCommand\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/buildSpec\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003cnatures\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cnature\u003eorg.eclipse.jdt.core.javanature\u003c/nature\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\t\u003cnature\u003eorg.eclipse.buildship.core.gradleprojectnature\u003c/nature\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\t\u003c/natures\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/projectDescription\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 23
    }
  },
  {
    "path": ".settings/org.eclipse.buildship.core.prefs",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "connection.project.dir\u003d"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "eclipse.preferences.version\u003d1"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d JelphaBot - Personalised Task Manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-F09-2/main[image:https://travis-ci.org/se-edu/addressbook-level3.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "https://ci.appveyor.com/project/Clouddoggo/main/branch/master[image:https://ci.appveyor.com/api/projects/status/3vmwqwd4y4fc4ini/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "https://coveralls.io/github/AY1920S2-CS2103T-F09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S2-CS2103T-F09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* JelphaBot is your very own personal Task Manager to help University Students keep track of their modules and various assignments and commitments."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a desktop Task Manager application. It has a GUI but most of the user interactions occur through the CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "//* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* JelphaBot is based on the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2,
      "-": 32
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"ignoreCommitList\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"493206f16e1593adef8904bcb521aa4e4b2bf36e\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"aae9da92cff0db4e37ed8de0c30ffb2b2c8541e6\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"d0cbc3106d15f960417f9e80f9a1c7a9acd90441\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"4ff825e4a8004ec9bcf9727287ae687266e74b47\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"029c16c644df0a81e9c29f74dc856f9a5c206bf2\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"d0cbc3106d15f960417f9e80f9a1c7a9acd90441\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  ],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  ["
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"githubId\": \"alam8064\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"displayName\": \"AMA. . .ING\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"authorNames\": [\"alam8064\", \"Amanda Lam\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"githubId\": \"Clouddoggo\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"displayName\": \"LIM. . .JEL\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"authorNames\": [\"Clouddoggo\", \"Jel Lim\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"githubId\": \"eedenong\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"displayName\": \"ONG. . .DEN\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"authorNames\": [\"eedenong\", \"Eden Ong\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"githubId\": \"yaojiethng\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"displayName\": \"THN. . .JIE\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"authorNames\": [\"yaojiethng\", \"Thng Yao Jie\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "Clouddoggo": 27
    }
  },
  {
    "path": "bin/main/view/CommandBox.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 9
    }
  },
  {
    "path": "bin/main/view/DarkTheme.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-size: 35px;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-graphic-text-gap: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-pref-height: 105;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 351
    }
  },
  {
    "path": "bin/main/view/Extensions.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background: #383838;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 20
    }
  },
  {
    "path": "bin/main/view/HelpWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 39
    }
  },
  {
    "path": "bin/main/view/MainWindow.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox fx:id\u003d\"taskList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "          \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 60
    }
  },
  {
    "path": "bin/main/view/ResultDisplay.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 9
    }
  },
  {
    "path": "bin/main/view/StatusBarFooter.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 12
    }
  },
  {
    "path": "bin/test/view/UiPartTest/invalidFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Not a valid FXML file"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFile.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 4
    }
  },
  {
    "path": "bin/test/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "mainClassName \u003d \u0027seedu.jelphabot.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027jelphaBot.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027JelphaBot\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-F09-2/main\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1,
      "-": 153
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "git config user.moduleCode \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 41
    }
  },
  {
    "path": "debug.log",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[0301/142901.905:ERROR:crash_report_database_win.cc(428)] unexpected header"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot is based on https://github.com/nus-cs2103-AY1920S2/addressbook-level3[AddressBook (Level 3)]. It was developed by the https://github.com/AY1920S2-CS2103T-F09-2/main[CS2103T-F09-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The developers of Jelphabot are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Yao Jie Thng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::yaojiethng.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{empty}[http://github.com/yaojiethng[github]] [\u003c\u003cyaojiethng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Jel Lim"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::clouddoggo.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{empty}[https://github.com/Clouddoggo[github]] [\u003c\u003cclouddoggo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Member +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Responsibilities: Scheduling and Tracking"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Amanda Lam"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::alam8064.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{empty}[http://github.com/alam8064[github]] [\u003c\u003calam8064#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Member +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Eden Ong"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image::eedenong.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{empty}[http://github.com/eedenong[github]] [\u003c\u003ceedenong#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Member +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Responsibilities: Testing"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Yap Dian Hao"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::yapdianhao.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{empty}[http://github.com/yapdianhao[github]] [\u003c\u003cyapdianhao#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Member +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 7,
      "Clouddoggo": 7,
      "-": 46,
      "alam8064": 1
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/jelphabot/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 47
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d JelphaBot - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F09-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team 2103T-F09-02`      Since: `Jan 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Preface"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot is *a desktop app for managing tasks* for NUS students. JelphaBot is designed to allow these students"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "to manage tasks conveniently and aids students by *allowing important tasks to be easily recognised*."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Users enter commands in JelphaBot through a *Command Line Interface* (CLI). However, a Graphical User Interface (GUI)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "is still used for improved design and user experience."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot is based on the AddressBook-Level3 (AB3) project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Purpose of this Document"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The following section describes the software architecture and design decisions behind the implementation of JelphaBot."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This guide is intended for developers who wish to maintain, modify or understand the software development behind our application."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The guide is divided into various sections. First, it explores the overarching architecture of the software before exploring each individual component,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "as well as the individual implementations of each distinct feature."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The guide is designed to be read as-needed, new developers can choose to start from the overarching view before narrowing down to the specific implementation they require."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This Developer Guide consists of the following sections:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cSetting Up, Setting Up\u003e\u003e - Assists new developers in cloning and initializing a copy of JelphaBot."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cDesign, Design\u003e\u003e - Provides an overview of the architecture design."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cImplementation, Implementation\u003e\u003e - Brief explanation of how features in JelphaBot were implemented on top of AB3,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "and explains the design considerations of these implementations."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cDocumentation, Documentation\u003e\u003e - A guide for generating and publishing documentation."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cTesting, Testing\u003e\u003e - A guide for developers to set up and run test code."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* \u003c\u003cDev Ops, Dev Ops\u003e\u003e - A guide for developers to build, test and release JelphaBot."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Notation used in this Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Common symbols used throughout this guide."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[width\u003d\"70%\",cols\u003d\"^15%,85%\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| `code` | A Java method or class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :bulb: | Tips and tricks that might be useful"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :information_source: | Additional information that is good to know"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :heavy_exclamation_mark: | Important pointers to take note"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| [.java]#name# | Reference to the codebase (such as component, class and method names)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\",size\u003d\"2x\"] | Tips and tricks that might be useful"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note\",size\u003d\"2x\"] | Additional information that is good to know"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:exclamation-circle[role\u003d\"icon-important\",size\u003d\"2x\"] | Important pointers to take note"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Setting Up"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot is a desktop app built in Java based on the AddressBook-Level3 project created by the SE-EDU initiative,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "and inherits its architectural design. The software is split into various components, each with its own package."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Each component is in charge of a single aspect of the software."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The data in JelphaBot is stored as .json files in the `data` subdirectory."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::designarchitecture[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The *_Architecture Diagram_* given below explains the high-level design of the App."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram2.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "//end::designarchitecture[]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The `.drawio` files used to create diagrams in this document can be found in the link:{repoURL}/tree/master/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "To update a diagram, import the `.drawio` file to the https://draw.io[webapp]."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "`Main` has two classes called link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/Main.java[`Main`] and link:{repoURL}/blob/master//src/main/java/seedu/jelphabot/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::LogicClassDiagram.png[][width\u003d\"750\"]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "image::interaction.png[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The Ui Component handles interactions between the user and the application."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This includes input fields where commands are entered as well as translations of data in the Model Component to a visual representation in the interface."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Class Diagram of the UI Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::UiClassDiagram.png[][width\u003d\"750\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `CalendarDayCard`, `ResultDisplay`, `TaskListPanel`, `StatusBarFooter` etc."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/blob/master/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The Logic component handles the business logic after a command is executed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::LogicClassDiagram.png[][width\u003d\"750\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".  `Logic` uses the `JelphaBotParser` class to parse the user command."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The Model component provides an internal data representation of all tasks stored in JelphaBot, as well as methods to modify that data."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::ModelClassDiagram.png[][width\u003d\"750\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* stores JelphaBot data."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//As a more OOP model, we can store a `Tag` list in `JelphaBot`, which `Task` can reference. This would allow `JelphaBot` to only require one `Tag` object per unique `Tag`, instead of each `Task` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The Storage component manages storing and retrieving of data onto local files in .json format."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::Storage.png[][width\u003d\"750\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*API* : link:{repoURL}/blob/master/src/main/java/seedu/jelphabot/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* can save JelphaBot data in json format and read it back."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.JelphaBot.commons` package."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This includes classes which implement utility functions which can be used by all other components."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Tab System"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Users may find it complicated to handle the many features that JelphaBot offers. They might also be overwhelmed if all the information of their tasks were to be displayed together in one screen."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "As such, we have decided to implement a tab system for JelphaBot to organise the available commands into their respective features. JelphaBot provides 5 different tabs for the users,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "each displaying a different set of panels that are relevant to the feature."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Summary Tab* - \u003c\u003cSummary feature (Eden), overall view\u003e\u003e of the day\u0027s tasks in the task list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Task List Tab* - \u003c\u003cTask Grouping feature in Task List tab (Yao Jie), view all tasks\u003e\u003e in the task list."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Calendar Tab* - \u003c\u003cCalendar feature (Amanda), visualisation\u003e\u003e of tasks in a specific day or month."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Productivity Tab* - \u003c\u003cProductivity feature (Jel), overarching view\u003e\u003e of overall productivity such as task completion rate."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Reminder Tab* - \u003c\u003cReminder feature (Dian Hao), list\u003e\u003e of upcoming reminders."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "To use the different features, we have also implemented commands for users to switch between the 5 tabs."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[ChangeTab]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::changetab[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[ChangingTabs]]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Switching between Tabs in Main Window"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The tabs of the application are defined using a `SwitchTab` enum and the current tab of the application is stored as a private attribute `mode` in `LogicManager`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Users can switch between tabs in JelphaBot using the lower case names of each tab as commands (e.g. `calendar`). +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "When the tab of the application is changed, we need to update the:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* `MainWindow` component so that the `SwitchTab` attribute in `MainWindow` reflects the new current tab, since this is used to check if a command can be executed,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* `UI` component so that the panels display the information that is relevant to the tab."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alam8064"
        },
        "content": "IMPORTANT: `task list` is not a valid command to switch to the Task List tab."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Use `list` instead."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Similarly, `:l` is the corresponding shortcut."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "For all these commands, updates are done by updating the `SwitchTab` attribute added in the `CommandResult` object."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "As an example, the figure below shows the sequence diagram of when a user executes the `:s` or `summary` command."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[[Summary-SwitchTab-Sequence-Diagram]]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eedenong"
        },
        "content": ".Sequence diagram of execution of the `summary` command"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "eedenong"
        },
        "content": "image::SummarySwitchTabSequenceDiagram.png[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Upon execution of the `:s` command, `SummaryCommand#generateCommandResult()` will generate a `CommandResult` whose `SwitchTab` attribute is set to `SUMMARY` and return it to the `LogicManager`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Now, the updates can be done for the respective components:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* `UI` component: `MainWindow` calls `MainWindow#executeCommand()`, to retrieve the tab to be changed to and updates the current tab stored in its `SwitchTab` attribute by calling `CommandResult#isShowXXX()` where `XXX` is the tab to switch to."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The display panel is updated by calling `MainWindow#handleXXX` where `XXX` is the tab to switch to."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::changetab[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Summary feature (Eden)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot has a Summary feature which provides an overview of the tasks due within the day as well as all tasks that have been complete within the day."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "eedenong"
        },
        "content": "This feature comes in the form of a summary panel, which comprises of two sections for the tasks due within the day and the tasks completed within the day respectively."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "For each task shown only details such as the Module Code and the Description are shown."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Once the user marks a task due within the day as complete, it will automatically appear under the tasks completed within the day."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If the user marks a task as completed, and immediately deletes the task from the task list, it will not appear in the summary screen."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The implementation of this panel is facilitated by the `summary` package."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Upon creation, the `Summary` object obtains the main task list from `Model`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The task list is then filtered with the help of `TaskDueWithinDayAndIncompletePredicate` and `TaskCompletedWithinDayPredicate` to obtain two lists with the desired tasks."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "eedenong"
        },
        "content": "These lists are stored as fields in the `Summary` class and are used to display the relevant information in the summary panel."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The following class diagram shows the structure of the classes in the `summary` package, in relation with their `Ui` counterparts."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[[SummaryPanelClassDiagram]]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Class diagram of structure and relations of `Summary`, `SummaryPanel` and their components."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "eedenong"
        },
        "content": "image::SummaryPanelClassDiagram.png[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "eedenong"
        },
        "content": "To view the respective tasks, the user enters the `summary` command. Upon entry of the `summary` command, a `SummaryCommand` object will be created and `SummaryCommand#execute()`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "eedenong"
        },
        "content": "will be called."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The following sequence diagram details the execution when `SummaryCommand#execute()` is called."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eedenong"
        },
        "content": ".Sequence diagram of the creation of the `Summary` object when `SummaryCommand#execute()` is executed."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::SummaryCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: The summary panel depends on the creation of new `Summary` objects to be updated"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Current solution*: Each time `DoneCommand` is executed, a new Summary object is to be created, and along with it the task lists"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "eedenong"
        },
        "content": "contained inside the `Summary` object is updated and displayed on the summary panel as an updated list."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Pros: Easy to implement. Scalable when there are more things are to be displayed on the summary panel."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Cons: Consecutive `done` commands are expensive, as the lists in the `Summary` object are reinitialised upon every `done` command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Alternative 1*: Have a single `Summary` object with underlying task list listeners to update the relevant task lists"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Pros: Only one `Summary` object will have to be created for the duration the application is open. The task lists in the `Summary` object"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "eedenong"
        },
        "content": "do not have to be reinitialised upon every `done` command."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Cons: May not be scalable if there are many things to be added to the summary panel in the future, as this will require more listeners,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "eedenong"
        },
        "content": "and the presence of many listeners may affect the performance of the application."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Reason for chosen implementation:*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The current implementation is more straightforward and simpler to implement, as the `SummaryList` and `SummaryPanel` which are used to display the contents of the summary"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "eedenong"
        },
        "content": "panel simply need to extract and display the contents of the `Summary` object that was given, instead of requiring underlying listeners to keep track of whatever is happening within"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "eedenong"
        },
        "content": "the application."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Summary panel aesthetic improvements"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Current solution*: The Welcome header, tasks due today and tasks completed subsections have the same font and styling. The distinction between them"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eedenong"
        },
        "content": "is by the bigger font for the Welcome header, and the space separation between the subsections. This is done by having each section in their own separate `Vbox`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Everything shown on the panel is shown as plain text, with no additional styling."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Pros: This gives the summary panel a minimal look that is simple and easy to look at, while still providing the user with the relevant information that is needed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Cons: Due to the implementation of the subsections as separate boxes of equal sizes that are scaled to fit the panel, there is a lot of unused space in between each subsection, if there"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "eedenong"
        },
        "content": "are not enough tasks to fill in the space. This can be seen as a waste of space."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Alternative 1*: Add font styling and section highlighting to different sections of the summary panel"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Pros: Makes the summary panel more visually appealing, and makes each subsection more distinct from each other."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Cons: Does not solve the problem of unused space when there are not enough tasks to fill the space in each subsection."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Reason for chosen implementation:*"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "eedenong"
        },
        "content": "The current implementation is easier to implement and keeps the summary panel simple and easy to look at as it avoids the cluttering of the summary panel with too many different design elements."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "eedenong"
        },
        "content": "This makes it very user-friendly, and it also easily scalable in the future as each section is already partitioned accordingly, so future changes to the summary panel simply have to change the elements"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "eedenong"
        },
        "content": "within each section."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::summary[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// tag::taskgroups[]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Task Grouping feature in Task List tab (Yao Jie)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The task category mechanism is facilitated by the `ViewTaskList` interface, which serves as a wrapper for any list of tasks. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The ViewTaskList interface supports methods that facilitate getting and iterating through the tasks contained within the list."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This is to accommodate a common access for Tasks in `GroupedTaskList`, which contains multiple sub-lists. +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The diagram below describes the class structure."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Class Diagram for Task List classes"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "image::TaskListClassDiagram.png[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Grouping tasks into sub-lists is done through the `GroupedTaskList` class. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Each `GroupedTaskList` is a container for `ObservableList\u003cTask\u003e` objects, each containing a unique filter over the full task list."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Each `GroupedTaskList` implements the following operations on top of those in `ViewTaskList`:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* A enum class which describes the valid `Category` groupings, and the corresponding methods of getting these groupings from a `String`. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* An `ObservableList` of `SubgroupTaskList` that represents the sub-groupings of each corresponding `Category`."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* A public method for instantiating a `GroupedTaskList` called `getGroupedList` with the return from `getFilteredTaskList()` as argument."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* An iterator method which iterates through a list of `SubgroupTaskList`."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Users can modify the `GroupTaskList` being displayed in the main panel by executing a `ListCommand`."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The operation for retrieving the corresponding `GroupedTaskLists` are exposed in the `Model` interface as `Model#getGroupedTaskList(Category category)`. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Currently, the supported groupings for JelphaBot are group by date (`GroupedTaskList.Category.DATE` and `GroupedByDateTaskList`) and group by module (`GroupedTaskList.Category.MODULE` and `GroupedByModuleTaskList`)."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The following diagram shows the sequence flow of a `ListCommand` which modifies the currently shown Task List:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[activity-swapping-groupedtasklist]]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Activity Diagram showing the tab switch for ListCommand"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "image::ListCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Given below is an example usage scenario and how the task category mechanism behaves at each step."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*Step 1.* The user launches the application for the first time."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The `MainWindow` will be initialized with `GroupedTaskListPanel` as a container for GroupedTaskList model objects."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The panel is populated with sublists defined in `GroupedByDateTaskList`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*Step 2.* The user executes `list model` to switch to category tasks by module code instead. `GroupedTaskListPanel` is repopulated with sublists defined in `GroupedByModuleTaskList`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "If the user tries to switch to a `Cateory` which is already set, the command does not reinitialize the `GroupedTaskList` to prevent redundant filtering operations."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "As `GroupedTaskList` has more than one underlying `ObservableList\u003cTask\u003e`, tasks cannot be retrieved the usual way."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Thus, the `get()` function defined in the `ViewTaskList` interface must be implemented and used instead. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The following diagram shows the process of retrieving a `Task` from `ViewTaskList` when it is an instance of `GroupedTaskList`:"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[sequence-viewtasklist-get]]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Sequence Diagram for `ViewTaskList.get()`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "image::ViewTaskListGetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "As the index passed as an argument to `lastShownList.get()` is a cumulative index, the implementation of `get()` in `ViewTaskList` has to iterate through each `SubgroupTaskList` stored within."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Tasks are organized via a two-dimensional list."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "In this case, a `Task` is rendered into a `TaskCard`, and `TaskCard` elements are rendered within `SubGroupTaskListCell` elements which are listed in `SubgroupTaskListPanel`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "A populated `SubgroupTaskListPanel` element is rendered as a `GroupedTaskListCell` which is listed in the top-level `GroupedTaskListCell`. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`SubgroupTaskListCell` and `GroupedTaskListCell` implement the `ListViewCell\u003cT\u003e` interface of the `ListView\u003cT\u003e` class provided by JavaFX."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Class Diagram for UI classes displaying `GroupedTaskList`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "image::TaskListPanelClassDiagram.png[]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The detailed interactions are described in the diagram shown above."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "As can be seen, the distribution of `ListViewCell` elements follows the way tasks are distributed within the model classes."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Each `SubgroupTaskListPanel` is displaying a singular `SubgroupTaskList`, which firther contains a list of `Task` entities."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The indexes displayed in each `TaskCard` is dynamically computed from a `NumberBinding` which computes the index of that element in the list."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The `NumberBinding` observes the place of the task within the current `SubgroupTaskList` as well as the number of elements in the preceeding sublists."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The sum of both numbers gives the index for the current element, which is set using `setId()`. `TaskCard` elements are updated with `populateTaskElements()`."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Each `TaskCard` will also have a different visual presentation depending on the value of the `Priority` of the task."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The method which adjusts the visual presentation of a `Task` is `applyPriorityMarkdown()`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The following images show how `Task` entities of different priorities are displayed: +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Markdown for Tasks of different priority. (Top to bottom: Normal, High, Low.)"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "image::PriorityMarkupForTaskCards.png[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: `ListCommand` swaps to a different `ViewTaskList`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Refer to \u003c\u003cactivity-swapping-groupedtasklist\u003e\u003e for the diagram describing this process."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Current solution*: Initializes each grouped list as each `ListCommand` is called and stores the latest list as `Model.lastShownList`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Scalable when more groupings are added."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: Consecutive `ListCommand` operations which swap between different categories are expensive as the list is reinitalized each time."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: It is hard to keep track of the exact type of list in `lastShownList`, which may lead to unexpected behavior."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* **Alternative 1:** Keep instances of all `GroupedTaskList` objects and update them as underlying Task List changes."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Consecutive `ListCommand` executions are less expensive."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: All other commands that update the underlying list now have additional checks as each grouped list is updated."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The current solution was chosen in order to accomodate more `Category` implementations in the future."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "With only two classes inheriting `GroupedTaskList`, it is entirely feasible to implement both."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "However, since only one `GroupedTaskList` will be used at any time, and to take account possible performance savings, only one `GroupedTaskList` implementation will exist at any one time."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: `get()` Task from `ViewTaskList` and iterate between Tasks."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Refer to \u003c\u003csequence-viewtasklist-get\u003e\u003e for the diagram describing this process."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Current solution*: Implement `get()` and `Iterator\u003cTask\u003e` in `ViewTaskList`."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Scalable when more groupings are added."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: Consecutive `ListCommand` operations are expensive as the list is reinitalized each time."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: It is hard to keep track of the exact type of list in `lastShownList`, which may lead to unexpected behavior."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** As a workaround, only operations defined in the `ViewTaskList` interface should be used."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* **Alternative 1:** Keep instances of all `GroupedTaskList` objects and update them as underlying Task List changes."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Consecutive `ListCommand` executions are less expensive."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: All other commands that update the underlying `UniqueTaskList` will result in multiple update calls to `ViewTaskList`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The current solution was chosen with integration with other tabs in mind."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This implementation can easily be expanded to other tabs in a future version if other tabs also inherit from `ViewTaskList`."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This allows `add`, `edit`, `delete` and `done` commands to be executable from any tab, while still only requiring one `ViewTaskList` to be instantiated, which saves performance."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d Aspect 3: Hide empty Categories in `GroupByDateTaskList`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//* *Current Solution*: UI displays problems from a `FilteredList\u003cSubgroupTaskList\u003e` and use `filtered()` to hide empty categories without removing them."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Rationale: These categories are meant to be reused when applicable tasks are added back to the list."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Pros: The list categories do not have to be reinitalized as tasks are removed or added."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Cons: Additional load on the UI as the Filtering happens constantly."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//However, since there is a cap on five categories (so five `FilteredList` lists), it is unlikely to be significant."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Cons: Inconsistent with the way filtering is done in `GroupByModuleTaskList`, which reduces control abstraction in `GroupedTaskList`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//* **Alternative 1:** Remove categories which are no longer used, and reinitialize them again when needed."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Pros: Consecutive changes to the underlying Task List are less expensive if less lists are currently active."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Pros: Enforce consistency with `GroupByModuleTaskList` which might allow some methods to be abstracted to parent class."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Cons: Empty `SubgroupTaskList` members have to be hidden manually which requires complex logic in `SubgroupTaskListPanel`."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//** Cons: Additional listeners have to be added (one for each category) to reinitialize empty categories."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 3: Remove empty Categories in `GroupByModuleTaskList`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Current Solution*: UI displays problems from a `FilteredList\u003cSubgroupTaskList\u003e` and uses a `ListChangeListener\u003cTask\u003e` to maintain a set of unique module codes when the underlying task list is changed."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The `ObservableSet\u003cModuleCode\u003e` has a further `SetChangeListener\u003cModuleCode\u003e` bound to it to remove categories that no longer contain any Tasks."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This second listener directly removes unused categories from `GroupedByModuleTaskList`."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Consecutive changes to the underlying Task List are automatically reflected with a change in `SubgroupTaskList` categories."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: The delegation of responsibilities between each `Listener` allows Single Responsibility Principle to be maintained."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Dependency between the two `Listener` classes has to be maintained."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* **Alternative 1:** Hide categories which are no longer used by adding a filter to the Task List returned."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Easy to implement and understand."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: Not practical: as more Module Codes are added to the Task List, it might cause more and more hidden categories to be created which are expensive to filter through."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Abstract maintenance of the set of unique module codes to a `UniqueModuleCodeSet` class instanced in `UniqueTaskList`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: Easy to understand."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Logic is further abstracted to a higher level and the new class is instanced together with the list that affects it."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pros: The returned `ObservableSet\u003cModuleCode\u003e` from `UniqueModuleCodeSet` can be made unmodifiable which would prevent unauthorized changes to the `ObservableSet` from other classes."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Cons: Implementation is challenging and prone to bugs, requiring significant testing."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "Due to the time of writing this Developer guide, the release is nearing V1.4 and time is spent fixing bugs for release instead."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** This could be a proposed update in the future."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The best solution would be to create a `UniqueModuleCodeSet` instanced in `UniqueTaskList`, which would have the best scalability and abstraction."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "In addition, since such a set would be updated regularly, less mantainence is needed inside classes that require a list of unique `ModuleCode` entities."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "However, due to time constraints, such an implementation was not chosen."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "However, the current solution mimics the best solution as closely as possible by using `SetChangeListener` to update the `SubgroupTaskList` list."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This means that a returned `UnmodifiableObservableSet` from `UniqueModuleCodeSet` can be substituted easily whenever such a refactoring is done."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// end::taskgroups[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alam8064"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Calendar feature (Amanda)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alam8064"
        },
        "content": "JelphaBot has a calendar feature which provides an overarching view of their schedules and to allow users to view their tasks due."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "alam8064"
        },
        "content": "This feature offers two main functions:"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Displays an overview of tasks in calendar for a selected month and year"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Displays a list of tasks due for a specified date"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d  Implementation"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The implementation of the main calendar panel is facilitated by the `CalendarMainPanel` class, which serves as the main"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "alam8064"
        },
        "content": "container for this feature. This main container consists of a `SplitPane` comprising of a `CalendarPanel` on the right,"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "alam8064"
        },
        "content": "which displays the calendar view in a month, and a `CalendarTaskListPanel` on the left to display specific tasks."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The diagram below describes the class structure of the calendar class structure."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Class Diagram for Calendar classes"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::CalendarUiClassDiagram.png[]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Upon initialisation of the `CalendarMainPanel`, the `CalendarPanel` would be set to display the current month and year calendar,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alam8064"
        },
        "content": "with the dates filled up by `CalendarDayCards` by CalendarPanel#fillGridPane() with a `CalendarDate` starting from the first day of the current month."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Today\u0027s date would also be highlighted, with `CalendarTaskListPanel` set to display the tasks due today by running"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Logic#getFilteredCalendarTaskList() and then Logic#updateFilteredCalendarTaskList() with a predicate to filter by today\u0027s date."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The following diagram depicts how each individual day cell of the calendar will look like:"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Expected display of dates on calendar"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::CalendarDayCards.png[]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "alam8064"
        },
        "content": "After every execution of command, MainWindow#updateTasksInCalendarDayCards() will be run such that any commands that updates"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "alam8064"
        },
        "content": "the JelphaBot task list (e.g `DoneCommand`, `DeleteCommand`, `EditCommand`) would be updated by the dot indicators in the calendar."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "alam8064"
        },
        "content": "**Function 1: Displays an overview of tasks in calendar for a selected month and year**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alam8064"
        },
        "content": "There are 2 commands that users can issue to perform function 1:"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "alam8064"
        },
        "content": "1. `calendar today`: Displays calendar for the current month with today\u0027s date highlighted, and its corresponding tasks due listed. +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "alam8064"
        },
        "content": "2. `calendar MONTHYEAR`: Displays calendar for the month and year specified, with the first day of the month highlighted,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "alam8064"
        },
        "content": "and its corresponding tasks due listed (e.g. calendar Apr-2020). Refer \u003c\u003cCalendar-MonthYear-SequenceDiagram, here\u003e\u003e, for the diagram describing this process."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Upon execution of the `calendar MONTHYEAR` or the `calendar today` command, CalendarCommand#execute() will run `updateFilteredCalendarTaskList()` to"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "alam8064"
        },
        "content": "filter the task list to display the tasks on the `CalendarTaskListPanel` according to the first day of the `MONTHYEAR` or the tasks due `today` respectively."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The filtering of the tasks according to date is done using the `TaskDueWithinDayPredicate`. A distinct `CommandResult` would then be generated according to"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "alam8064"
        },
        "content": "the input command and is returned to the `LogicManager`. Finally, the  `CommandResult` is passed to the `MainWindow` in UI. Now, the updates can be done for the respective components:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alam8064"
        },
        "content": "UI Component: Using the CommandResult, MainWindow calls MainWindow#updateCalendarMainPanel(), which is then passed to call CalendarMainPanel#updateCalendarPanel()."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "alam8064"
        },
        "content": "For the `calendar MONTHYEAR` command, this updates the `CalendarPanel` display with the respective `MONTHYEAR` view, and highlights the first day of the month."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alam8064"
        },
        "content": "For the `calendar today` command, this updates the `CalendarPanel` display to the current month and year, with today\u0027s date highlighted."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The following example sequence diagram shows you how the `calendar MONTHYEAR` (e.g. `calendar Apr-2020`) command works."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[[Calendar-MonthYear-SequenceDiagram]]"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Sequence diagram after running `calendar Apr-2020`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::CalendarViewSequenceDiagram.png[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "alam8064"
        },
        "content": "**Function 2: Display a list of tasks due for a selected date in the month**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "alam8064"
        },
        "content": "In order to display the task list for specific input dates, the user enters the `calendar DATE` command +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alam8064"
        },
        "content": "(e.g. calendar Jan-1-2020)."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alam8064"
        },
        "content": "NOTE: Only a date belonging in the current displayed month on the `CalendarPanel` would be highlighted after"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "alam8064"
        },
        "content": "processing the `calendar DATE` command. A date that falls in other month and years would just display its"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "alam8064"
        },
        "content": "corresponding tasks due on the `CalendarTaskListPanel`."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The implementation of the previous two calendar commands (`calendar DATE` and `calendar today`) are largely similar and run in the same process."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The only exception is regarding the `calendar DATE` command which fulfills **Function 2** listed above, where the `GridPane` in `CalendarPanel` is not"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "alam8064"
        },
        "content": "altered by running CalendarPanel#fillGridPane() unlike the other two commands fulfilling **Function 1**. Only `CalendarTaskListPanel` is updated."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The following diagram shows the sequence flow for variants of these three calendar commands which modifies the `CalendarMainPanel`:"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[[Calendar-ActivityDiagram]]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Activity Diagram showing the updating of `CalendarMainPanel`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "alam8064"
        },
        "content": "image::CalendarCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: How the user can navigate between specific dates and change the calendar month view"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Current Solution:* Use the same `calendar` command word for both viewing tasks in specific dates, and changing the calendar view."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The next input following the command word (`DATE`, `MONTHYEAR`, `today`) is then parsed separately to give different command results."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pros: Easier and more understandable for user interactions."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pros: More open and accessible to future implementations regarding the calendar feature."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Implementation in the `CalendarCommand` class might seem a bit bulky."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* **Alternative 1:** Use completely separate commands for viewing tasks in specific dates and changing the calendar view."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pros: Less chance of a parse exception, with more precise error messages when invalid command formats are input by the user."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Certain areas of the code might be repetitive."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Less intuitive for users to use."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The current solution is more user-friendly as it reduces the number of varying commands that users have to remember in order to"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "alam8064"
        },
        "content": "access the respective information. Additionally, upcoming changes and future implementations can be easily integrated into the"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "alam8064"
        },
        "content": "existing code base as well."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Method of storing `ObservableList\u003cTask\u003e` of tasks for each day card (Implementation of the Dot Indicator)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Current Solution:* Each `CalendarDayCard` stores a filtered list of tasks due on its specific date."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "alam8064"
        },
        "content": "This is done by obtaining all the tasks in the task list from Logic#getFilteredTaskList() and applying a filter function"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "alam8064"
        },
        "content": "with the `TaskDueWithinDayPredicate`, specifically with the date of the day card. The list of tasks stored for each day card"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "alam8064"
        },
        "content": "in the calendar panel would be re-filtered after the execution of each command."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pros: Do not have to manually update the tasks stored in each `CalendarDayCard` (e.g add and remove manually in the separately stored copy)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Completely reliant on the main task list, possible errors might be carried over."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* **Alternative 1:** Use a static HashMap of Dates as keys and a list of tasks due in that date as values."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pros: Retrieving the tasks in a specific date and storing in the day card is fast - can be done in O(1) time."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Implementation would be much more complex."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Cons: Updating of this HashMap of the tasks as the main task list is being edited constantly can be very tedious."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The current solution is easier to implement since we are filtering the tasks we want to see directly from the main task list."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "alam8064"
        },
        "content": "This reduces the amount of methods to implement over various class and components as constant updates of the tasks"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "alam8064"
        },
        "content": "in each day card of the calendar is done. The ease of implementation is crucial given the tight deadlines we have to meet for the project."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "alam8064"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::productivityImplementation[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Productivity feature (Jel)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot has a productivity panel of this feature which provides an overarching view of user\u0027s overall productivity."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The view of this panel is facilitated by the productivity package that extracts the relevant data and displays them in as cohesive view."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The productivity package supports the creation of `TimeSpentToday`, `RunningTimers` and `TasksCompleted` instances."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Each of these classes iterate through the tasks contained within the task list. +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Below is a class diagram of the related productivity classes:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Class diagram showing the structure and relations of `Productivity`, `ProductivityPanel` and their components."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ProductivityClassDiagram.png[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "This feature offers two main functions and one panel for visualisation:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Start timer for a task."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Stop running timer for a task."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Productivity panel under Productivity tab."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d  Implementation"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Text rendered onto the productivity panel is gotten from the `Productivity` class. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "A `Productivity` object is a container for the objects responsible for the sub-parts of the panel, namely `TimeSpentToday`, `RunningTimers` and `TasksCompleted`."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Each of these have their respective String representations which will be used in rendering the panel."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "`TimeSpentToday` implements the following operations:"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* An iterator method `getTimeSpent()` which iterates through a list of `ObservableList\u003cTask\u003e`."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** This iterator will extract the duration field of each task."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* A `toString()` method which returns the sum of duration (i.e. time spent) of tasks under 3 different categories: \"due today\", \"due in next 6 days\" and \"due after 6 days\"."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Each time `TimeSpentToday` is instantiated, `getTimeSpent()` is called thrice; once each for the 3 categories."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "`RunningTimers` implements the following operations:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* An iterator method `getTasksWithTimers()` which iterates through a list of `ObservableList\u003cTask\u003e`."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** This iterator will extract the description and deadline of tasks with timers that have been started."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* A `toString()` method which returns the tasks with running timers."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "`TasksCompleted` implements the following operations:"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* An iterator method `getCompletionStatus()` which iterates through a list of `ObservableList\u003cTask\u003e`."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** This iterator will extract the number of tasks completed under the \"due today\" category."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* An iterator method `getOverdueStatus()` which iterates through a list of `ObservableList\u003cTask\u003e`."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** This iterator will extract the number of tasks that are incomplete and past their due date."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* A getter method which returns the percentage of tasks completed that are under the \"due today\" category."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* A `toStringArray()` method which returns the task completion status, JelphaBot\u0027s response to the user\u0027s productivity, as well as number of overdue tasks."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Information from all three objects are subsequently rendered onto the panel through `ProductivityCard` and `ProductivityPanel`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::productivityImplementation[]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::productivityFunctions[]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Assuming that the task list is not empty, the following describe the flow of `start 1` and `stop 1` which modify the currently shown productivity panel:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "**Function 1: Starts timer for a specified task** +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "In order to start timing a task, the user enters `start INDEX` command (e.g. `start 1`)."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Upon successful execution of the command, the productivity tab displays the task being timed under the Running Timer(s) header."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The following diagram shows the flow of `start 1` which modifies the current view of the productivity panel:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[activity-settingProductivitylist]]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Activity Diagram showing the setting of `Productivity` in the `ProductivityList`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::StartActivityDiagram.png[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "To update the productivity panel to reflect the changes, a new `Productivity` object will first be created, replacing the existing `Productivity` object in the `ProductivityList`."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Each time a new `Productivity` object is created, its corresponding booleans will dictate whether the sub-parts (i.e. `TimeSpentToday`, `RunningTimers` and `TasksCompleted`) are to be replaced with new objects."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "As the command executed is `start`, a new `RunningTimers` object is created. As detailed above, the iterator method in `RunningTimers` will be called and a new String representation to be displayed onto the productivity panel will be created."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "This String is subsequently rendered onto the panel under the Running Timer(s) header."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The following diagram shows the flow which updates the Running Timer(s) section in the productivity panel:"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[activity-updatingProductivityPanel]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Activity Diagram showing the updating of Running Timer(s) in the productivity panel"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::TimerPanelActivityDiagram.png[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "**Function 2: Stops timer for a specified task** +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "In order to stop timing a task, the user enters `stop INDEX` command"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "(e.g. `stop 1`)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Upon successful execution of the command, the productivity tab removes the task being timed under the Running Timer(s) header."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Removing a task from the Running Timer(s) header is similar to adding it, as illustrated by the Activity Diagram \u003c\u003cactivity-updatingProductivityPanel, above\u003e\u003e."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Under the Time Spent header, the total time spent will be increased depending on the date that the task is due."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Attempting to start timer for a task marked as completed or `stop` a task that does not have a running timer,"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "the command fails its execution so that it does not execute that `start` or `stop` operation to `start` or `stop` the timer for that task."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Sequence Diagram after running `stop 1`"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::StopSequenceDiagram.png[]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::productivityFunctions[]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::productivityDesign[]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: Rendering sub-parts of productivity panel"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Current solution*: Render each sub-part (i.e. task completion rate, time spent and running timers) only when that part needs to"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "be updated. All 3 parts are rendered on to the same card."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Easy to implement and reduces waste of computational power."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: As all parts are displayed on the same card, if there happens to be problem in other parts of the card, all parts will be affected."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 1*: Abstract each part to a separate card and render all cards onto the same panel."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Allows other parts to be rendered even when there is error on one part. Additionally, it is easier to identify bugs when there is"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "an error in displaying."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: Difficult to implement as current view is generated from a ListView but with a single card. Thus, abstracting and refactoring will be costly and hard to debug."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 2*: Employ multi-threading for rendering each sub-part."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: No need to use 3 different booleans when updating view. Code base will be cleaner and more readable."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: Unsure if cost of multi-threading less then of constructing 3 instances for rendering the productivity panel view."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Minimal computational power is wasted as only the parts that requires re-rendering are recomputed. Moreover, it is easy to implement and easily extendable to display"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Restriction of functionality while timer is running"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Current solution*: Tasks with running timers cannot be edited or marked as done."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Other functionality are still available for use. Thus, overall user experience is not affected."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: User is unable to make changes to the task being timed nor mark it as complete."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 1*: Allow users to edit task while timer is running."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: User is able to use all features without restriction."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: Difficult to implement as the Task model requires a new Task to replace the old Task when edit command is executed. More storage space is also needed to store the additional start time field for each task."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 2*: Allow users to mark tasks as done while timer is running."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Similar to the above, user is able to use all features without restriction."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: User may have forgotten about running timer and wish to collect such information. However, there is currently no function that supports undoing commands or unmarking a completed task."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Editing and marking a task require the creation of a new task which overwrites the existing task. Use of space is also minimised and less computational power is used as no new Task objects have to be created."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 3: Productivity panel visualisation"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Current solution*: Separating sub-parts by paragraphs and including progress bar for tasks completed."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Easy to see at a glance which parts are which."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: Text under Running Timer(s) can appear wordy. As number of running timers increase, more text is added under Running Timer(s)."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 1*: Highlight displayed module code and deadline in alternating colours"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Visually more appealing and looks less like a long list is tasks thus motivating the user to complete his/her tasks."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: Does not resolve the issue of having too many words under the sections."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Alternative 2*: Only show 3 tasks whose timers were started in order of priority and time when timers were started."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Allows user to focus on tasks at hand."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Cons: User might forget about other tasks whose timers were started and not complete them on time."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "We feel that paragraphing increases readability and the progress bar provides visual aid. Addtionally, including more images or pie charts may confuse or distract users from their tasks which defeats the purpose of JelphaBot."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::productivityDesign[]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::reminder[]"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Reminder feature (Dian Hao)"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "JelphaBot has a reminder feature that reminds users whenever they have tasks that are about to overdue."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "This feature offers two main functions:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "** Adds a reminder to a task."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "** Delete a reminder that is associated to a task."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Classes for Reminder feature in Model"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "The `Reminder` feature was implemented by a new set of classes to `Model`. A new `Reminder` class is stored in"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Jelphabot\u0027s `UniqueReminderList`, which consists of a list of `Reminder` s. Each `Reminder` consists of 3 objects: +"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "** `Index`**: the `Task` \u0027s index of which the user wants to be reminded for. +"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "** `ReminderDay`**: the number of days before the `Task` \u0027s deadline that the user wants to be reminded for. +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "** `ReminderHour`**: the number of hours before the `Tasks` \u0027s deadline that the user wants to be reminded for. +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "The following class diagram summarizes shows the relationship between the classes."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ".Reminder Class Diagram in the Model component"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "image::Reminderclass.png[]"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Function 1: Creates a reminder for a specified task** +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "To add a reminder to a certain task, the user enters the `reminder INDEX days/DAYS hours/HOURS` command."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "(e.g, reminder 2 days/2 hours/1) +"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "The `Logic` `execute()` method creates a `ReminderCommand` from the input string by parsing the input according"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "to the command word and several other attributes. Next, the input string is converted into `Index`,"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "`ReminderDay`, `ReminderHour`, and a `Reminder` object with these properties are forwarded to `Model`. +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model` first check the validity of the attributes respectively. The valid `Reminder` is then added to"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "the `UniqueReminderList` after checking that there are no other `Reminder` with the same `Index`. +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "After the above actions are correctly performed, the `Logic` fires the `Storage` to save the `Reminder`."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Upon successful execution of the command, the user adds a reminder associated to the task at `INDEX`. Upon exiting JelphaBot,"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "the reminder will be saved. By the next time the users starts JelphaBot, it will remind the user should the task\u0027s due date fall"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "within the period set by the user from the current date. +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram for interactions between the `Logic`, `Model`, and `Storage` is shown below."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Sequence Diagram after running `reminder 2 days/2 hours/1`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "image::AddReminderSequenceDiagram.png[]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ".The reference frame of getting the `CommandResult` in the `Logic` component."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "image::getCommandResultReferenceDiagram.png[]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ".The reference frame of adding the `Reminder` in the `Model` component."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "image::addReminderReferenceDiagram.png[]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ".The reference frame of saving a `Reminder` by the `Storage` component."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "image::saveJelphaBot.png[]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "If the user attempts to add a reminder to tasks that have reminders, the command will fail to execute. The user also need not"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "to set reminders to tasks that are complete. However, if tasks that has reminders are not completed, JelphaBot will"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "still warn the user."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "**Function 2: Deletes a reminder for a specified task** +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "To delete a reminder associated to a certain task, the user enters the `delrem INDEX` command."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "(e.g. delrem 2)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "The interaction between components is similar to adding a `Reminder`. A key difference that this command"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "removes the `Reminder` that reminds the `Task` at `INDEX` from the `UniqueReminderList`. Moreover, `delrem` command"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "requires that the `Reminder` with `INDEX` is in the list."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "Upon successful execution of the command, the reminder of the task at `INDEX` is removed."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 1: Implementing `Reminder` object"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "* *Current solution:* Implement `Reminder` as a standalone class"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "** Rationale: A `Reminder` is an object, with the same hierarchy to the `Task` class, with similar attributes."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Fully capture the idea of an object-oriented design and robust in handling future changes."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: An additional storage is required to store the `Reminder` objects, which causes overhead while reading from and writing to"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "json files."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1:* Design `Reminder` as one of the attributes of a `Task`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "** Rationale: A `Reminder` can also be seen as one of `Task` \u0027s properties, analogous with `Description` and"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "other properties."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement. Concurrent fetching and storing from the json files while reading and writing `Task`."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: A `Reminder` has to remind users the moment when Jelphabot is booted. At that instance, `Storage` has not"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "started to read `Task` from the json files yet, therefore the `Reminder` could not be read beforehand."
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "We decided to choose the current solution due to the dynamic nature of tasks and users\u0027 needs. For upcoming changes in the"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "future, it is easier to implement by adding similar classes or attributes to the existing design."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: Rendering `Reminder` on `ReminderListPanel`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "* *Current solution:* Shows the `ModuleCode`, `Description`, and `DateTime` of the `Task` that is being reminded, the respective `ReminderDay` and `ReminderHour`."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: convenient and simple to understand. Users only need to refer to the `TaskListPanel` to look at the details of the `Task`."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: FXML styling will be squeezy."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "* *Alternative 1:* Shows the `Reminder` similar to how the `Task` is displayed."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Simple, as it only shows the details of the `Reminder`."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Users need to constantly refer to the `TaskListPanel` for details. Both has `Index` respectively, which may cause confusion."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "*Reason for chosen implementation:* +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "We decided to choose the current solution after considering users\u0027 needs and convenience of fully using the `Reminder` s."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "Users do not need to switch back and forth between tabs to refer between `Task` s and `Reminder` s, which saves time that can"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "be better spent by completing the `Task` s."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "// end::reminder[]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature [Proposed to implement in v2.0]"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedJelphaBot`."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It extends `JelphaBot` with an undo/redo history, stored internally as an `jelphaBotStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `VersionedJelphaBot#commit()` -- Saves the current JelphaBot state in its history."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `VersionedJelphaBot#undo()` -- Restores the previous JelphaBot state from its history."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `VersionedJelphaBot#redo()` -- Restores a previously undone JelphaBot state from its history."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitJelphaBot()`, `Model#undoJelphaBot()` and `Model#redoJelphaBot()` respectively."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedJelphaBot` will be initialized with the initial JelphaBot state, and the `currentStatePointer` pointing to that single JelphaBot state."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Initial state of JelphaBot"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th task in JelphaBot. The `delete` command calls `Model#commitJelphaBot()`, causing the modified state of JelphaBot after the `delete 5` command executes to be saved in the `jelphaBotStateList`, and the `currentStatePointer` is shifted to the newly inserted JelphaBot state."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".State of JelphaBot after \"delete 5\""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 3. The user executes `add d/Assignment ...` to add a new task. The `add` command also calls `Model#commitJelphaBot()`, causing another modified JelphaBot state to be saved into the `jelphaBotStateList`."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".State of JelphaBot after \"add d/Assignment\""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If a command fails its execution, it will not call `Model#commitJelphaBot()`, so JelphaBot state will not be saved into the `jelphaBotStateList`."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 4. The user now decides that adding the task was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoJelphaBot()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous JelphaBot state, and restores JelphaBot to that state."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".State of JelphaBot after \"undo\""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial JelphaBot state, then there are no previous JelphaBot states to restore. The `undo` command uses `Model#canUndoJelphaBot()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ".The sequence diagram of the undo feature."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoJelphaBot()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores JelphaBot to that state."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If the `currentStatePointer` is at index `jelphaBotStateList.size() - 1`, pointing to the latest JelphaBot state, then there are no undone JelphaBot states to restore. The `redo` command uses `Model#canRedoJelphaBot()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify JelphaBot, such as `list`, will usually not call `Model#commitJelphaBot()`, `Model#undoJelphaBot()` or `Model#redoJelphaBot()`. Thus, the `jelphaBotStateList` remains unchanged."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".State of JelphaBot after \"list\""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitJelphaBot()`. Since the `currentStatePointer` is not pointing at the end of the `jelphaBotStateList`, all JelphaBot states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/Assignment ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".State of JelphaBot after \"clear\""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Activity diagram showing details of command execution"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* **Alternative 1:** Saves the entire JelphaBot."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the task being deleted)."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "* NUS students who need to manage a large number of tasks"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Prefers using a desktop app over other types"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Wants to distinguish at first glance important and unimportant tasks"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Can type fast; prefers typing over mouse input"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Is reasonably comfortable using CLI (Command Line Interface) applications"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Value proposition*: Using this application will increase the user\u0027s efficiency in managing tasks than when"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "using a typical mouse/GUI driven application. The visual representation of tasks in the UI will also allow the user to"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "look through entire lists of tasks more quickly than in the terminal."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"12%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |organised student |be able to have a visual overarching view of my events and deadlines in a calendar. |"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |visual student |be able to see my tasks due for specific days in a week or month |easily plan my schedule."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student with good work-life balance |view tasks with different tags (e.g. health, work) easily |"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |goal-oriented student |set goals for the next day |commit myself to what I want to achieve."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student |track tasks I\u0027ve completed in a log | better understand myself and time management."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student with a flexible schedule |reschedule my tasks easily |"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student taking multiple modules |*_tag_* my tasks |manage the time spent on each module."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student with a flexible schedule |*_remove tasks_* when they are no longer relevant |"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |student who gets tasks done frequently |marks my tasks as completed |focus on the unfinished ones."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student who does not stay on campus |which of my classes does not have graded attendance |minimise travelling time."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |busy student |what tasks are important at first glance |manage my time well."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |student who loves to procrastinate | get reminders of tasks I have delayed | don\u0027t forget to complete them."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |hall resident |keep track of my events and commitments | plan my time properly."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |busy student |track the amount of time spent on each task | plan my schedule effectively."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* * *` |goal-oriented student |keep track of my progress in a day | be motivated to be more productive."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |student |keep track of number of tasks completed and the number of tasks I have to complete by a certain date/time |"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |student who actively keeps track of upcoming tasks |view tasks specifically for a range of date/time |"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |visual student |customize my tags |"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |student that is driven by motivation |receive timely compliments | stay motivated to complete my tasks on time."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |forgetful student |reminders for exam dates | plan my revision efficiently."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |unmotivated student |bot that does a morning call for me | wake up and start my day on time."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |free-spirited student |set deadlines for doing tutorials and watching webcasts | do things at my own pace while not lagging behind in class."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`* *` |who needs validation and reminders |debriefed on my achievements (task completed, migrated, scheduled) for that day and what is in store for me the next day |"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |student with many group projects |be able to import and export shared text files |"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |irresponsible student |motivated to complete my tasks |actually complete my tasks in time."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |user who doesn\u0027t always open the computer to run a jar file in the morning |have a convenient way to enter and receive notifications |"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |irresponsible student |criticised |learn from my mistakes and be more responsible in the future."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |talented student |know which hackathons I already participated in | polish my portfolio."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|`*` |student |track my habits| know if I have strayed from my goal."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "alam8064"
        },
        "content": "(For all use cases below, the *System* is the `JelphaBot` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Use case diagram for the below use cases"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::UseCaseDiagram.png[]"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//[discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Use case: UC1 - Add Task"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "alam8064"
        },
        "content": "1.  User keys in command to add task."
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "alam8064"
        },
        "content": "2.  JelphaBot adds the task and displays the added task to the user."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* 1a. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a2. User enters new command."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Use case: UC2 - List Tasks"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "alam8064"
        },
        "content": "1.  User keys in command to list tasks."
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "alam8064"
        },
        "content": "2.  JelphaBot displays the list of all the tasks."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a2. User enters new command."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "User specifies a category grouping for the list."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** 1a1. JelphaBot will switch to a list that matches the given category."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "+"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Use case: UC3 - Mark Task as Done"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "alam8064"
        },
        "content": "1. User specifies to mark a task as done by specifying the task index."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "2. JelphaBot updates the task status and displays the updated task to the user."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* 1a. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a2. User enters new command."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* 1b. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1b1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1b2. User enters new task index to be marked as done."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Use case: UC4 - Edit Task Details"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1.  User requests to edit a task by specifying the task index and the field(s) they want to edit."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2.  JelphaBot edits the specified task in the task list with the specified details."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* 1a. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** 1a1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** 1a2. User enters new task index to be marked as done."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case resumes from step 2"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* 1b. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** 1b1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "1b2. User enters new command."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//\u003d\u003d\u003d Use case: UC5 - Find Task(s) by Keyword(s)"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//*MSS*"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//1. User requests to find task(s) by entering specified keyword(s)."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//2. JelphaBot shows a list of task(s) that contain the specified keyword(s)."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//*Extensions*"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//* 1a1. None of the tasks in the task list contain the specified keywords."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//** Use case ends."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Use case: UC5 - Delete Task"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1.  User requests to delete a specific task in the list by specified index."
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2.  JelphaBot deletes the task."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1a1. JelphaBot displays to user that the task list is empty."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1b. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b2. User enters new task index to be marked as done."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case resumes from step 2"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//\u003d\u003d\u003d Use case: UC7 - Clear all Tasks"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//*MSS*"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//1.  User enters command to clear all tasks."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//2.  JelphaBot removes all listed tasks and returns an empty list."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Use case: UC6 - Add Reminder"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1. User enters reminder for tasks that want to be reminded for."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2. JelphaBot adds a reminder and displays the result to the user."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** 1a1. JelphaBot displays to user that the task list is empty."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1b. JelphaBot detects that the task the reminder is associated to does not exist."
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b1 JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b2. User enters new task index to be add reminder to."
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "eedenong"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Use case resumes from step 2"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1c. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1c2. User enters new command."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1c1-1c2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Use case: UC7 - Delete Reminder"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1.  User requests to delete a reminder for a task in the list by specified index."
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2.  JelphaBot deletes the reminder."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1a1. JelphaBot displays to user that there are no reminders."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1b. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b2. User enters new task index to be marked as done."
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 2"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1c. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1c2. User enters new command."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1c1-1c2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::timerUseCase[]"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Use Case: UC8 - Start Timer"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1. User enters command to start timer for task to be timed."
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2. JelphaBot displays successful execution to user."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1a1. JelphaBot displays to user that the task list is empty."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1b. JelphaBot detects the task has been mark as completed."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b1. JelphaBot displays to user that the task has been marked as completed."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1c. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c2. User enters new task index to start timing."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1c1-1c2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Use Case: UC9 - Stop Timer"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1. User enters command to stop timer for task being."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "2. JelphaBot returns total time spent on that task and stores the information."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1a. The list is empty."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1a1. JelphaBot displays to user that the task list is empty."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1b. JelphaBot detects the task does not have a running timer."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1b1. JelphaBot displays to user that the task does not have a running timer."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* 1c. JelphaBot detects that the specified task does not exist."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c1. JelphaBot detects error and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** 1c2. User enters new task index to stop timing."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Steps 1b1-1b2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::timerUseCase[]"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Use case: UC10 - Navigate to a different date on calendar"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "alam8064"
        },
        "content": "1. User specifies date to jump to a specific month and year."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "alam8064"
        },
        "content": "2. JelphaBot displays updated calendar view with the corresponding tasks due on specified date."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* 1a. JelphaBot detects an error in the entered command."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a1. JelphaBot detects error in specified date and displays the correct input format to be expected."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** 1a2. User enters new command."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Steps 1a1-1a2 are repeated until the command entered is correct."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "alam8064"
        },
        "content": "+"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ". Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Should work on both 32-bit and 64-bit machines."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Should be able to handle any kind of input, including invalid ones."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::glossary[]"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[graphical-user-interface]] GUI (Graphical User Interface)::"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "A type of user interface that allows for interaction between the user and electronic devices through graphical icons"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[command-line-interface]] CLI (Command Line Interface)::"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "A type of user interface that allows for interaction between the user and electronic devices in the form of lines of text."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::glossary[]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing. +"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "For this section, `markdown` will be used to denote commands that can be entered into JelphaBot."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "   Expected: Shows the GUI with a set of sample tasks. The window size may not be optimum."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Changing Tabs"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Summary"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In Summary tab, switch to Summary with `:s`, `:S` or `summary`. +"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Tab is not changed."
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Error message is shown in Results Display."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In any other tab, switch to Summary with `:s`, `:S` or `summary`. +"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Success message is shown in the Results Display."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Task List"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In Task List tab, switch to Task List with `:t`, `:T` or `list`. +"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Tab is not changed."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Error message is shown in Results Display."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In any other tab, switch to Task List with `:t`, `:T` or `list`. +"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Success message is shown in the Results Display."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Calendar"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In Calendar tab, switch to Calendar with `:c`, `:C` or `calendar`. +"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Tab is not changed."
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Error message is shown in Results Display."
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In any other tab, switch to Calendar with `:c`, `:C` or `calendar`. +"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Success message is shown in the Results Display."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Productivity"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In Productivity tab, switch to Productivity with `:p`, `:P` or `productivity`. +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Tab is not changed."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Error message is shown in Results Display."
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. In any other tab, switch to Productivity with `:p`, `:P` or `productivity`. +"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Success message is shown in the Results Display."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Adding a Task"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Adding a new task to a cleared list"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Prerequisites: Clear the list with the `clear` command."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. For all test cases that successfully add a task, the respective total for each category should increment as new tasks are added."
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `add d/test dt/Apr-06-2020 23 59 m/CS2103t` +"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: A new task is added with the description \"test\", and a module code of \"CS2103T\"."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `add d/test2 dt/Apr-06-2020 23 59 p/1 m/CS2103t` +"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: A new task is added with the description \"test2\", a module code of \"CS2103T\", and both the module code and descripton should be bolded."
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `add d/test3 dt/Apr-06-2020 23 59 p/-1 m/CS2103t` +"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Expected: A new task is added with the description \"test3\", a module code of \"CS2103T\", and both the module code and descripton should be in italics."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Adding a task with incomplete parameters"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `add d/aa` +"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: No task is added. Error details shown in the results message. +"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Other incorrect add commands to try: other parameters are missing. +"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Adding a task with incorrect parameters"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `add d/aa dt/Joon-06-2020 23 59 p/-1 m/CS2103t` +"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: No task is added. Error message with correct format of date command. +"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Other incorrect add commands to try: other parameters are wrongly formatted. +"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Eg. non-alphanumeric characters in description or tag, invalid priority, module codes not complying to NUS format (2-3 Alphabets, 4 numbers, one optional letter) +"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Editing a Task"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Editing a task that was previously added"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Prerequisites: Execute the `add` commands in the previous section."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Edit each field as per examples given in `edit` command section."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Completing a Task"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Setting an existing task to Complete."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Prerequisites: Execute the `add` commands in the previous section."
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Complete tasks as per examples given in `edit` command section."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Changing the list category"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Displaying tasks by a different category"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Prerequisites: Execute the `add` commands above."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "``"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "list module +"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "add d/test dt/Apr-06-2020 23 59 m/3230"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "`` +"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: A new module category should appear with a category title of \"CS3230\"."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: +"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "``"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "list date +"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "add d/test dt/TOMORROW 23 59 m/3230``, where `TOMORROW` refers to the date of the next day. +"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected: A new task should appear under the category header \"Due This Week\"."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Test case: `list invalid` +"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: List display does not change. Error details shown in the results message. Status bar remains the same."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Deleting a Task"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Deleting a task while all tasks are listed"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command. Multiple tasks in the list."
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "   Expected: First task is deleted from the list. Details of the deleted task are shown in the results message."
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "   Expected: No task is deleted. Error details are shown in the results message."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Progress Bar visualisation"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Marking a task that was previously added as complete"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Prerequisites: Execute the `add` commands in the \u003c\u003cAdding a Task\u003e\u003e."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `done 1` +"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    Expected: First task from the list is marked completed. Details of the marked task is shown in the results message. +"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    If task completed is due today, progress bar in productivity tab is updated and displayed total number of completed tasks is updated."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `done 0` +"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    Expected: No task is marked. Error details shown in the results message."
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Other incorrect done commands to try: `done`, `done x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    Expected: Similar to previous."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d View Tasks with Running Timers"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Start timer for a task that was previously added"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Prerequisites: Execute the `add` commands in the \u003c\u003cAdding a Task\u003e\u003e. Task must not be marked as completed."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `start 1` +"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: Starts timing first task from the list. Details of the timing task is shown in the results message. +"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task being timed is displayed under Running Timer(s) in productivity tab."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `start 0` +"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: No timer started. Error details shown in the results message."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Other incorrect start commands to try: `start`, `start x` (where x is larger than the list size or is index of task already marked completed) +"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d View Time Spent on Tasks"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Stop timer for a task that was previously added"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Prerequisites: Execute the `start` commands in the \u003c\u003cView Tasks with Running Timers, previous section\u003e\u003e."
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `stop 1` +"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: Stops timing first task from the list. Details of the timed task is shown in the results message. +"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Displayed time spent is updated in productivity tab. +"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task timed is removed from Running Timer(s) displayed in productivity tab."
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `stop 0` +"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: No timer stopped. Error details shown in the results message."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Other incorrect stop commands to try: `stop`, `stop x` (where x is larger than the list size or is index of task without running timer) +"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d View Tasks due on a specific Date"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "alam8064"
        },
        "content": ". Input a date belonging to the current calendar month to view tasks due"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Prerequisites: Navigate to the calendar with the `calendar` command (or other variants as listed above)."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar Apr-20-2020` +"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Task(s) due on the input date will be displayed with results message displaying the number of tasks listed."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "alam8064"
        },
        "content": "If there are no tasks due on the input date, no tasks would be displayed. The input date would also be highlighted on the calendar."
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar Apri-20-2020` +"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Error message due to the invalid format for the input date would be displayed in the results message."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "alam8064"
        },
        "content": ". Input a date not belonging to the current calendar month to view tasks due"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Prerequisites: Navigate to the calendar with the `calendar` command (or other variants as listed above)."
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar Oct-20-2020` +"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Task(s) due on the input date will be displayed with results message displaying the number of tasks listed."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "alam8064"
        },
        "content": "If there are no tasks due on the input date, no tasks would be displayed."
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar Joon-20-2020` +"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Expected: Error message due to the invalid format for the input date would be displayed in the results message."
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d Navigating the Calendar"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "alam8064"
        },
        "content": ". Navigate to Today\u0027s Date on Calendar"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Prerequisites: Navigate to the calendar with the `calendar` command (or other variants as listed above)."
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar today` +"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Calendar will change to be the current month and year, with today\u0027s date also highlighted."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Task(s) due today will be displayed with results message displaying the number of tasks listed."
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "alam8064"
        },
        "content": "If there are no tasks due today, no tasks would be displayed."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "alam8064"
        },
        "content": ". Navigate to different month and year on Calendar"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Prerequisites: Navigate to the calendar with the `calendar` command (or other variants as listed above)."
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".. Test case: `calendar May-2020` +"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Calendar will change to be for May 2020, with the first day of the May highlighted."
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Task(s) due on the first day of May will be displayed with results message displaying the number of tasks listed."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "alam8064"
        },
        "content": "If there are no tasks due, no tasks would be displayed."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".. Test case: `calendar May-2020` +"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Expected: Error message due to the invalid format for the input month and year would be displayed in the results message."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Reminder Feature"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding a reminder to remind a task"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command to have a full view of the tasks. Select the `INDEX` of the task"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "that needs to be reminded."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `reminder 1 days/2 hours/2` +"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: A reminder which is associated to the `Task` at index 2 will be added."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `reminder -1 days/1 hours/0` +"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Error message due to negative index."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `reminder 1 days/30 hours.0` +"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Error due to invalid day count, which has a limit of 7."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `reminder 1 days/1 hours/30` +"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Error due to invalid hour count, which can be converted to days if it exceeds 24."
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other invalid commands to try: `reminder `, `reminder 100000 days/1 hours/1`"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": ". Removing a reminder"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all tasks using the `list` command, and look for the task that is associated to the reminder that"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "needs to be deleted."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delrem 1` +"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: The reminder for task at index 1 will be removed, if it exists."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delrem -1` +"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Error message due to negative index."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delrem 100000` +"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Error message due to non-existing reminder."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// TODO: add more"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Data Storage"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Missing data files"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Open the `/data/` folder and delete all .json files in that folder."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Launch JelphaBot by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected Outcome: JelphaBot starts up with sample data in the GUI."
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Sample data should be configured such that there are dates due within the current day and week."
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Corrupted data files"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Open the `/data/` folder and delete all .json files in that folder."
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".. Launch JelphaBot by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Expected Outcome: JelphaBot starts up with sample data in the GUI."
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Sample data should be configured such that there are dates due within the current day and week."
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Effort"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* Difficulty Level"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* Challenges Faced"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* Effort required"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* Achievements"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 343,
      "Clouddoggo": 477,
      "eedenong": 107,
      "-": 497,
      "alam8064": 240
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[Documentation]]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 123
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d JelphaBot - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ":toclevels: 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-F09-2/main"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "By: `Team 2103T-F09-02`      Since: `Jan 2020`      Licence: `MIT`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Preface"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Welcome to JelphaBot! +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If you are just starting out, the quick start section below will help you get JelphaBot started right"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "away! It will equip you with the basics so that you can quickly enjoy and master the features offered."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot is *a desktop app for managing tasks* specially designed by and for NUS students that allows you to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*recognise important tasks at a glance* so that you can prioritise commitments and manage your time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "You can enter commands in JelphaBot through a *Command Line Interface* (CLI), which means that if you can *type quickly*,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot can help you get work done faster than a traditional mouse-controlled Graphical User Interface (GUI),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*while still retaining the benefits of a beautiful user interface*."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Upon running JelphaBot, you will see various components on it\u0027s main display screen. The components of the main screen is labelled below."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".Brief overview of the app"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "The function of each component is as follows:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "1. *Tabs Pane*: This is where you can navigate between the different features located in various tabs."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "2. *Main Panel*: This is the main display screen which corresponds to the tab it is under."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "3. *Results Display*: This is where JelphaBot interacts with you by showing you the results of your commands!"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "4. *Command Box*: This is where you key in your commands."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "As seen from above, JelphaBot has five tabs; Summary, Task List, Calendar Productivity and Reminder."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "You can switch between tabs anytime by pressing kbd:[Ctrl] + kbd:[Tab] on your keyboard to move to the tab on the right."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "If you are already on the rightmost tab, it wraps around to the leftmost tab."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Using this User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Purpose of this Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "This User Guide is filled with information to help you set up and make the best out of you very own JelphaBot!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You will be able to learn more about the commands that are available for you, together with examples of how they are used."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "These commands are also consolidated under \u003c\u003cCommand Summary, this section\u003e\u003e for your convenience."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Notation used in this Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "To aid in your understanding throughout this User Guide, you may find below the different symbols and formatting used throughout this guide."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Common symbols used throughout this guide."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"40%,\u003c60%,options\u003d\"header\",]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|*Symbol* | *What does it mean?*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| `command` | Command that can be typed into the command box"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :white_check_mark: | Expected result after executing the command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "| kbd:[Key] | A Key that you should press on your keyboard"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :bulb: | Tips and tricks that might be useful"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "| :information_source: | Additional information that is good to know"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "| :heavy_exclamation_mark: | Important pointers to take note of"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:check[role\u003d\"green\",size\u003d\"2x\"] | Expected result after executing the command"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "a| kbd:[Key] | A Key that you should press on your keyboard"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\",size\u003d\"2x\"] | Tips and tricks that might be useful"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note\",size\u003d\"2x\"] | Additional information that is good to know"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "a| icon:exclamation-circle[role\u003d\"icon-important\",size\u003d\"2x\"] | Important pointers to take note of"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "a| \u003c\u003cBlue-text-underlined, blue text, underlined\u003e\u003e | [[Blue-text-underlined]] Links"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "// also known as TIP, NOTE, IMPORTANT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". Download the latest `jelphabot.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your JelphaBot."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot should initialize with a sample list of tasks as shown in the following diagram."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Expected result after running JelphaBot"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The sample list of tasks helps test if you installed JelphaBot correctly! +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If you do not see this, please try deleting JelphaBot and its accompanying files and folders and repeat steps 2 to 4."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ". Type a command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ". Some example commands you can try:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* **`add`**`d/Assignment 1 dt/10-Mar-2020 23 59 m/CS2103T` : adds a task with description `Assignment 1` to the task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *`list`* : lists all tasks."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* **`delete`**`1` : deletes the 1st task shown in the current list."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *`exit`* : exits the app."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ". Refer to \u003c\u003cFeatures, this section\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "A full list of commands is available \u003c\u003cCommand Summary, here\u003e\u003e."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can use the kbd:[UP] and kbd:[DOWN] keys to view your last entered commands!"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "In this section, you can find details about the commands that JelphaBot supports."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "These include the function of the command, its format, and example usages."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The features will be depicted in the order of the tabs shown on the main User Interface as seen above for your ease of navigation!"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Common commands"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If you can\u0027t recall the command you need, you can enter the `help` command in any panel. A help window which links to this user guide will pop up. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Expected result after running `help`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/help.png[width\u003d\"600]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can exit the program anytime by entering the `exit` command directly from any panel. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Exiting the application before stopping any running timer wil cause all recorded time since the timer was started to be lost."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// tag::summary[]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Summary (Eden)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "This tab will be the first panel you see after entering JelphaBot!"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "This section gives you a minimalistic overview of the day, namely tasks that you have due within the day, and tasks that you have completed within the day!"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Tasks displayed will only have it\u0027s module code as well as their description for simplicity!"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the summary tab: `summary`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Apart from the function to switch tabs by pressing kbd:[Ctrl] + kbd:[tab] on your keyboard, you can enter the `summary` command"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "or its shortcuts `:S` or `:s` to manually switch to the summary tab."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "The summary panel will then display a summary of your tasks due and completed today. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `summary` +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Shortcut: `:S` or `:s`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `summary`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/summaryTab.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the two dropdown tabs that show the tasks that are Due Today, and Completed Today."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Once a task under the Due Today tab is marked as done, it will appear under the Completed Today tab."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Expected view of the Summary tab after completing the task, ACC1101 Tutorial 4"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/SummaryViewAfterTaskComplete.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// end::summary[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// tag::tasklist[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Tasks (Yao Jie)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot allows you to track and manage your tasks comprehensively as well!"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "You can view and sort all your tasks from the Task List page."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Apart from the function to switch tabs by pressing kbd:[Ctrl] + kbd:[tab] on your keyboard, you can enter the `list` command or its shortcuts `:T` or `:t` to manually switch to the task list tab."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The task list panel will then display all your tasks sorted into various sections. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Shortcut: `:T` or `:t`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `list`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "image::TaskListTab.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Command Format for Task list commands*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Parts of the command in `UPPER_CASE` represent command parameters that have to be supplied by you. +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "e.g. in `add d/DESCRIPTION`, `DESCRIPTION` represents a field where you can provide the appropriate description, such as `add d/Assignment 1`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Parameters in square brackets are optional e.g `d/DESCRIPTION [p/PRIORITY]` can be used as `d/Assignment 1 p/0` or as `d/Assignment 1`."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Parameters with a trailing `…`​can be used as many times as you want, or can also be omitted. +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "e.g. `[t/TAG]...` can be used as `t/project`, `t/project t/graded` etc."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `d/DESCRIPTION p/PRIORITY`, `p/PRIORITY d/DESCRIPTION` is also acceptable."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Reading the Task List"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The task list is formatted so that you can distinguish urgent tasks at first glance."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "The start of every task is labelled with a module code so that you can visually categorize them."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Tasks are tagged according to their importance:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Default priority"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *High Priority* tasks will be *bolded* to denote important tasks."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* _Low priority_ tasks will be _italicized_ to denote optional tasks."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The start of every task will be labelled with a module code so that you can visually categorize them. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Go \u003c\u003c#add, here\u003e\u003e to read more about adding tasks with priority and \u003c\u003c#edit, here\u003e\u003e for editing task priority."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// end::tasklist[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::add[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[add]]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Task: `add`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can add a task to your task list. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `add d/DESCRIPTION dt/DATETIME m/MODULE_CODE [p/PRIORITY] [t/TAG]...`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `add d/Assignment 1 dt/Jan-01-2020 23 59 m/CS1231 t/graded`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/addCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* For dt/DATETIME inputs, please use the format MMM-dd-YYYY HH mm. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** MMM: the corresponding month in 3 letters."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** dd:  the corresponding day in 2 numbers."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** YYYY: the corresponding year (AD) as 4 numbers."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** HH: the hour the task is due, in 24-hour format."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** mm: the minute the task is due."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Values that p/PRIORITY can take are -1, 0 or 1."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format of the month in DATETIME (MMM) input has to have the first letter in upper-case. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "E.g `Mar` instead of `mar` when specifying the month of March."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "A task can have any number of tags (including 0)! +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If the priority field is not specified, the default priority used is Normal Priority."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `add d/Assignment 1 dt/Jan-01-2020 23 59 m/CS3230 p/1`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `add d/Project TP dt/Jan-01-2020 23 59 m/CS2103T p/1 t/pair t/work`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// tag::list[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all Tasks : `list`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can list all tasks in your task list. Optional arguments can be added to dictate sorting order for your tasks. +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Format: `list [SORTING_ORDER]`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* If no `SORTING_ORDER` is provided, tasks will be grouped by date by default, similar to the task list\u0027s tab default page as mentioned in the start of this section."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* Valid `SORTING_ORDER` values are `date` (groups tasks by date) and `module` (Groups tasks by module code)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Group Tasks by Date : `list date`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can group tasks based on their due date."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This is also the default interface for the task list tab. +"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `list date`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Group your tasks into the following categories:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Pinned* [Coming in V2.0] +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Pinned tasks will always be displayed at the top."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "To read more about pinning tasks, go \u003c\u003c#pin, here\u003e\u003e)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Overdue*  +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Shows tasks which are past their due date)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Due Today* +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Shows tasks not overdue and due by the end of the current day)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Due This Week* +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Shows tasks due within the next seven days)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Due Sometime* +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "(Shows all other tasks that do not fit into prior categories)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".Example of an expected result after running `list date`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/listByDate.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Group Tasks by Module : `list module`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can groups tasks based on their module code. +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `list module`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Example of an expected result after running `list module`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/listByModule.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::list[]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Locating Tasks by name: `find`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can find tasks in your task list with description containing any of the given keywords. +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `find tutorial`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/findCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The search is case insensitive. e.g `tut` will match `Tut`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The order of the keywords does not matter. e.g. `project Work` will match `Work project`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Only the description is searched."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Only full words will be matched e.g. `Tut` will not match `Tutorial`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Tasks matching at least one keyword will be returned (i.e. `OR` search). e.g. `Project Work` will return `Project Group`, `Work meeting`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `find assignment` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Returns `Assignment 1` and `assignment task`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `find Tutorial Project MidTerm` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Returns any task having descriptions of `Tutorial`, `Project`, or `MidTerm`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::edit[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[[edit]]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a Task : `edit`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can edit an existing task in your task list. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `edit INDEX [d/DESCRIPTION] [dt/DATETIME] [m/MODULE_CODE] [p/PRIORITY (-1, 0, or 1)]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[t/TAG]...`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `edit 1 m/CS2105 d/Tutorial 2`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/editCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Edits the task at the specified `INDEX`, which is the index number shown in the displayed task list."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* When editing tags, the existing tags of the task will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* You can remove all the task\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The task to edit cannot have a running timer."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `edit 1 m/CS2105 d/Tutorial 2` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Edits the moduleCode of the 1st task to be `cs2105` and description to `Tutorial 2` respectively."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* `edit 2 dt/Jan-2-2020 23 59 t/` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Edits the date and time of the 2nd task to be `Jan-2-2020 23 59` and clears all existing tags."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::edit[]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Completing a Task : `done`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can mark a task in your task list as done and the task\u0027s status will be updated in the display. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `done INDEX`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `done 1`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/doneCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Marks the task at the specified `INDEX` as done."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The task must not have a running timer."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a Task : `delete`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can delete a task from your task list. +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `delete 1`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/deleteCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Deleting a task deletes any reminders for it too."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Deletes the 2nd task in the task list."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Deletes the 1st task in the results of the `find` command."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all Tasks : `clear`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can clear all tasks from your task list. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of an expected result after running `clear`"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/clearCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* All reminders will be cleared together with the tasks."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// tag::showcompleted[]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Show all completed Tasks : `show-completed` (Eden)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "eedenong"
        },
        "content": "You can display all the tasks in your task list that have been completed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Example of an expected result after running `show-completed`"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/showCompletedCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "eedenong"
        },
        "content": "If you do not have any tasks that are complete in your tasklist, the displayed list will be empty and a message will be shown telling you that you currently do not have any completed tasks!"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "eedenong"
        },
        "content": ".Example of an expected result after running `show-completed`, if the tasklist does not have any completed tasks"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "eedenong"
        },
        "content": "image::ug_figures/showCompletedCommandNoCompleted.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// end::showcompleted[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// tag::showincomplete[]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Show all incomplete Tasks: `show-incomplete` (Eden)"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "eedenong"
        },
        "content": "You can display all the tasks in your task list that are currently incomplete."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Example of an expected result after running `show-incomplete`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/showIncompleteCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "eedenong"
        },
        "content": "If you do not have any tasks that are incomplete in your tasklist, the displayed list will be empty and a message will be shown telling you that you currently do not have any incomplete tasks!"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "eedenong"
        },
        "content": ".Example of an expected result after running `show-incomplete`, if the tasklist does not have any incomplete tasks"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "eedenong"
        },
        "content": "image::ug_figures/showCompletedCommandNoCompleted.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// end::showincomplete[]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// tag::ug-pin-sort[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[[pin]]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d\u003d\u003d Pin Important Tasks  : `pin` [Coming in V2.0]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "You can pin important tasks to the top of the task list with the `pin` command. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Pinned tasks will always be displayed in the Pinned Tasks group in the task list. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Trying to `pin` a task that is already pinned will unpin it."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Sort Tasks : `sort`  [Coming in V2.0]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "You can change how tasks are sorted with the `sort` command."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Format: `sort SORTING_ORDER`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Valid `SORTING_ORDER` values include `date`, `module`, and `priority`."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// end::ug-pin-sort[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "alam8064"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Calendar (Amanda)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot also comes with a built-in calendar view that allows you to view your overarching tasks due on a monthly basis."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Dates that have tasks due would have a dot indicator shown on the calendar."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "You would also be able to navigate to specific dates to view your tasks due for that day of the month!"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d View calender : `calendar`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Apart from the function to switch tabs by pressing kbd:[Ctrl] + kbd:[tab] on your keyboard, you can enter the `calendar` command or its shortcuts `:C` or `:c` to manually switch to the calendar tab."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "The calendar panel will then show you your schedule for the current month with today\u0027s date highlighted. +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `calendar` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Shorcut: `:C` or `:c`"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `calendar`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/CalendarTab.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Highlighting of Dates: Today\u0027s date would be highlighted in dark blue, while other dates would be in light blue."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Change month and year view of Calendar : `calendar`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "alam8064"
        },
        "content": "You can navigate the calendar panel to another month and year by specifying it. The calendar panel would be updated accordingly"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "alam8064"
        },
        "content": "while highlighting the first day of the month."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The task list panel on the left will display the tasks due on the first day of the month. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `calendar MONTHYEAR`"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* For MONTHYEAR format, it should be MMM-YYYY, but it also allows some other formats shown when your format is invalid."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "* `calendar May-2020`"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `calendar May-2020`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/CalendarView.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "Displays month of May in the year 2020 in the calendar panel on the right."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Format of the month in MONTHYEAR (MMM) input has to have the first letter in upper-case. +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "alam8064"
        },
        "content": "E.g `Mar` instead of `mar` when specifying the month of March."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Show tasks due on specific date : `calendar`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Displays the tasks due on specified date, while highlighting that day on the calendar +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `calendar DATE`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "* The date specified *must be for the month and year of the shown Ui* for that corresponding date to be highlighted"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "* For DATE formats, we recommend the format to be MMM-dd-YYYY, but it also allows some other formats shown when you type in the command word."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* `calendar Apr-1-2020`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* `calendar Apr/1/2020` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `calendar Apr-1-2020`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/CalendarDate.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Highlights 1st of April in the calendar panel on the right and displays the corresponding tasks due on the left."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "alam8064"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "alam8064"
        },
        "content": "Dot indicator showing tasks: Dates that have more than 3 tasks due would have a red dot indicator, while dates with"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "alam8064"
        },
        "content": "at least 1 task but less than 4 tasks due would be represented with a green dot indicator."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Navigate directly to today\u0027s date on Calendar : `calendar`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "Immediately displays the calendar view for this month and highlights today\u0027s date."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "The task list panel on the left will display the tasks due today as well. +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `calendar today`"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* `calendar today` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `calendar today`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/CalendarToday.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Displays month of April in the year 2020 in the calendar panel on the right, with today\u0027s date highlighted and displays the corresponding tasks due today on the left."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "alam8064"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::productivitytracker[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Productivity Tracking (Jel)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "alam8064"
        },
        "content": "JelphaBot also comes with a productivity tracking that allows you track the progress of your tasks in that week."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "alam8064"
        },
        "content": "You would be able to see the progress bar as you complete more tasks!"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d\u003d\u003d Track productivity : `productivity`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Apart from the function to switch tabs by pressing kbd:[Ctrl] + kbd:[tab] on your keyboard, you can enter the `productivity` command"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "or its shortcuts `:P` or `:p` to manually switch to the productivity tab."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The productivity panel will then show you your productivity for the day. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `productivity` +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Shortcut: `:P` or `:p`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of expected result after running `productivity`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/ProductivityTab.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The progress bar and the text following it only shows tasks that are due on the day JelphaBot is running."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Starting timer for a task : `start`"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can start a timer for your task. +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `start INDEX`"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".Example of expected result after running `start 1`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/startCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Each task can only have 1 running timer."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Starts the timer for the task at the specified `INDEX` if timer was not already running."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* A completed task cannot be timed."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* New timer entry under \"Running Timer(s)\" in the productivity tab will be added if execution is successful."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Stopping timer for a task : `stop`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can stop a running timer for your task. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Format: `stop INDEX`"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".Expected result after running `stop 1`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "image::ug_figures/stopCommand.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The task has to have a running timer."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Stops the timer for the task at the specified `INDEX` if timer was running."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Timer entry under \"Running Timer(s)\" in the productivity tab will be removed if execution is successful."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Time spent on timed task will be added to the respected time spent section in the productivity tab."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "****"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::productivitytracker[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::feedback[]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d\u003d Receiving encouragement and criticism"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot automatically tracks the user\u0027s productivity in a day and outputs the appropriate response to the user\u0027s"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "achievements and task completion rate. +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "There is no need to manually request for compliments or criticism."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::feedback[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::reminder[]"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Set Reminders and Notifications (Dian Hao)"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//Apart from the function to switch tabs by pressing kbd:[Ctrl] + kbd:[tab] on your keyboard, you can enter the `reminder` command"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//or its shortcuts `:r` or `:R` to manually switch to the reminder tab."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//The reminder panel will then show you your lists of upcoming reminders. +"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//Format: `reminder` +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//Shortcut: `:r` or `:R`"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Adding reminder : `reminder`"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "You can add a reminder to your specified task to remind yourself of the task if the current time is within the time-frame specified"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "by you. +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `reminder INDEX days/DAYS hours/HOURS`"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `reminder 1 days/1 hours/1`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "image::ug_figures/addReminder.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "alam8064"
        },
        "content": "****"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds a reminder to the task which is at the specified `INDEX`."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ...."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* `DAYS` refers to the number of days before the due date of the task when you want to be reminded of it."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* `HOURS` refers to the number of hours before the due date of the task when you want to be reminded of it."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* You can only specify `DAYS` to be in the range 0 - 7 inclusive."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* You can only specify `HOURS` to be in the range 0 - 24 inclusive."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* Every `Task` can only have one `Reminder` ."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "* A `Task` that is completed cannot have a `Reminder` ."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* A `Task` that is reminded but are not completed after the deadline will still be reminded for."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* A `Task` will not be reminded if the task is completed but it has a `Reminder` ."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "alam8064"
        },
        "content": "****"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Removing reminder : `delrem`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "If you would like for a task\u0027s reminder to be deleted, you can enter the"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "`delrem` command to remove the reminder of that task. +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delrem INDEX`"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `delrem 1`"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "image::ug_figures/delReminder.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* Removes a reminder associated to the task at the specified `INDEX`."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed task list."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ...."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "* Whenever a task is deleted, the corresponding reminder will also be removed."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Navigate directly to view all reminders : `remindertab`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "Whenever you add a `Reminder`, you can navigate to the `Reminder` tab to see a list of `Reminder` s that you have."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "You can either click the tab, or enter the command `remindertab` to switch to the `Reminder`\u0027s panel."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "Every `Reminder` will show the `Task` `s module code, description, due date, the days that will be reminded before the"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "deadline, and the hours that will be reminded before the deadline."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after running `remindertab`"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "image::ug_figures/remindertab.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reminder popup notification"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Everytime you run JelphaBot after adding your reminders, JelphaBot will show a list of tasks that will be overdue soon,"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "and tasks that are past their deadline but have not been completed."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "eedenong"
        },
        "content": "[.text-center]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".Example of expected result after tasks are being reminded."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "image::ug_figures/reminderpopup.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Whenever JelphaBot is booted, if you have any tasks that is not completed but has a reminder,"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot\u0027s reminder window will popup."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "* This will persist until you either complete the `Task`, or delete the `Reminder`."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "//end::reminder[]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Colour-code module codes [Coming in V2.0]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Users can customise the font colours of different modules to better distinguish between different tasks."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The module codes displayed in the Main Window will be similar to the tags displayed to make it easier for users to view them."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// tag::faq[]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q1*: Is JelphaBot free? +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*A*: Yes, JelphaBot is completely free to use!"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q2*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous JelphaBot folder. +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q3*: How do I save my data? +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*A*: JelphaBot automatically saves your data whenever you make a change."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q4*: Can I add multiple tasks using a command line? +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*A*: Sorry, we currently do not support this feature."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "We will consider this in v2.0."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q5*: How do I add tasks with no deadline or description? +"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "A : Sorry, we currently do not support task entries with no deadline or descriptions."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "We will consider this in v2.0."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*Q6*: Do I need an Internet connection to use JelphaBot? +"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "A: No, you don’t. JelphaBot works completely offline."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// end::faq[]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// tag::commandSummary[]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Summary*: `summary` or `:s` or `:S`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `[d/DESCRIPTION] [dt/DATETIME] [m/MODULE_CODE] [p/PRIORITY] [t/TAG]…` +"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "alam8064"
        },
        "content": "e.g. `add d/Project TP dt/Jan-01-2020 23 59 m/CS2103T p/1 t/pair work`"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *List* : `list` or `:t` or `:T`"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *List by Date* : `list date`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *List by Modules* : `list module`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "e.g. `find Tutorial Assignment`"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [d/DESCRIPTION] [dt/DATETIME] [m/MODULE_CODE] [p/PRIORITY] [t/TAG]...` +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 1 m/CS2105 d/Tutorial 2`"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Done* : `done INDEX` +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "e.g. `done 1`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Show Completed Tasks*: `show-completed`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Show Incomplete Tasks*: `show-incomplete`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Add Reminder* : `reminder INDEX days/DAYS hours/HOURS` +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "alam8064"
        },
        "content": "e.g. `reminder 2 days/1 hours/1`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Delete Reminder* : `delrem INDEX` +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "alam8064"
        },
        "content": "e.g. `delrem 2`"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "* *View Reminders*: `remindertab` +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Productivity* : `productivity` or `:p` or `:P`"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Timer* : `start INDEX` or `stop INDEX` +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "e.g. `start 1` or `stop 1`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* *Calendar* : `calendar` or `:c` or `:C`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Calendar Date* : `calendar DATE` +"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "alam8064"
        },
        "content": "e.g. `calendar Jan-1-2020`"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Change Calendar View* : `calendar MONTHYEAR` +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "alam8064"
        },
        "content": "e.g. `calendar Apr-2020`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Today\u0027s Calendar View* : `calendar today`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "eedenong"
        },
        "content": "// end::commandSummary[]"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 88,
      "Clouddoggo": 310,
      "eedenong": 34,
      "-": 258,
      "alam8064": 69
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 210
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-03-31T03:06:33.285Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36\" etag\u003d\"hAWNJG7pqhknHpSh9Ggt\" version\u003d\"12.9.5\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"9fdiFyEp9kdYwluLtIo0\" name\u003d\"Page-1\"\u003e3VpZc6M4EP41rso+JMVhsP3oI3NVtmp2POejAjKmLCMvyIm9v35bIC6JYHDATiUPDmqJRnR/fYqBOd8ePoZot/6bupgMDM09DMzFwDAmhgW/nHBMCENrlBC80HcTkp4Tlv5/WBA1Qd37Lo5KCxmlhPm7MtGhQYAdVqKhMKTP5WUrSspP3SEPK4Slg4hK/eW7bJ1Qx8Yop3/CvrdOn6zbk2Rmi9LF4k2iNXLpc4Fk3g/MeUgpS662hzkmXHapXJL7Prwwm20sxAFrcsO3L4fb2f74YftP5P3EP3Uzmk5vxwmXJ0T24oXFZtkxlQDse8cv91vy4K8w8QMYzeC5zHf8HYofDnNTh9GQT+DQ32KG4XpBxPqvOW32vPYZXu6Qw3k+A2aAtmZbAiMdLkGPDMEtYTYmBO0i/zHejgaUEDv7MPKf8DccJXDh1CfM94PIlPheADRGOeMInuMH3nc+WJg2UAh6xGSGnI0X0n3gzinhu4b3NFfxHyyhe8Y3Pc8Qxfmr0hYK4A/GhwJJSP8jpvDK4RGWpLOaQIIwhbEYPue4SrGyLkDKTIlIQNnLOOfahguh8BbK180K7dv/7jkiZ2DHoDGY1XOago2C4mQFPFLG6BYmcOBOuSFyGqHOJibB9n9zyd6BwaSEP0C41e40zUgpi4OQfjI6FkcFTL2goDrAMxR6uG6dLgwBuyX/oCq3oL1UoSEmiAFAy86oQnuC21fqw54LOKmEScogovvQweKeor1LbCb1bBIJKGxiIGWvdz62hlXQIhxEKxrv0sksL0dXaoMFku3F/83pj88pA9hPwkPMNXRY1/FLlc5k5RNS8DyaNplonB6xkG5waca2ta7cz7gMiMwdFRA8qvI/Wm/+xzgdfQoq2HGsxnuwZgNrIemUhmxNPRogUtSqIlEuaa1OBw39yLCt+M2y9G1V+HqF8LPbuhe+pQgfHwDCDN/UB4G/uooCbdBep4OTvty6misflpU+OdOV60Y9n559OYToNnbaBAN0hwOOLxStsSvug2mR/4+r0MGxMZ+3RsdJrb82WtvDO6ukHSMtAdqqWUKLwqdnNasO4ZUh+4F6vvN+oraCSDP2WGosqUFq66ht6m8ualeldleK2m19gtVa/NWO90TU1uVkuzPhp4GgIPwkRn9H0eaG9RebM0lntRuUarqdlWp/BsVKrfu6zWoY6/XJ1YK9hBVdPzfayyYvM+o5DqT2fN1wn5l8O4AkQq5ZZ18oLZBSNl1O5M9MChQ+fYNB7RFF6Al/wWS3RjPKbpDrhjiaUbq5pPPhbSJLaRwN34IDGl/NAclQsTsqNxRGPWOuotwwp6/JRcWpxHtJRKUkKPOUlXbTVftoKKOrIhEdXzYRnVw+Ec0k+pIOGnoTu634zXKNmeUEp/pHfQl/VCH7VxWLS0ZDfhb3Xq10MZwNLatlptPaSi2pyTsZKzC5cLXY4ITxUkaaqaChkY7aSl+uABo2eeV2XnfV4hsq1fsXvtSFq4hPVcLvrcFuqP20JWTOPIek8APiwYoyeNK4FMNc3vc5teitkEilCV5xFynOuh/i0cKoTq3jQ++4BMvy4d+DtB4rlPGKWs9U38lyTG96IGtcqJ8rpzmjZkk0CBodC8uELb34GFuK52Pp44365Sm4c3wmz+80DVfTqx8R2LyMWTBPVgZmGTwBjUOz5A6yry1SFDuAp9ijyJXi1nfdGPpVwbuM5w4C6EQv68VQvcjwknmWXpVoXbwZc/ocum+zNLRRSTHm+MxDFrm7pjDqu6HyJg7Tatz5hRRqS47WtM7sVmQ3Zoz0jhQKw/zzvGR5/o2jef8/\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTaskList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "UniqueTagList -[hidden]down- UniqueTaskList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "UniqueTaskList o-right-\u003e Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e Description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e ModuleCode"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e DateTime"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e Priority"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e Status"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Task *--\u003e TimeSpent"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 12,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/CalendarCommandActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T06:10:59.623Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"cYvC7A2GLAW_N_nQMEVf\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"prtHgNgQTEPvFCAcTncT\" name\u003d\"Page-1\"\u003e7V1bc+I2FP41TJ9gfL88BpJ0O7Npd5rsdnffFBBYjbFYW4Skv76SLdmWLYghGMzE5CH4WBLm6JzvXG0G5mT58nsMVsEdnsFwYGizl4F5PTAM3TNN+o9RXjOKYzoZYRGjGR9UEO7Rf5ATNU5doxlMpIEE45CglUyc4iiCUyLRQBzjjTxsjkP5U1dgAWuE+ykI69R/0IwEGdUz3IL+CaJFID5Zd/zszBKIwfybJAGY4U2JZN4MzEmMMcneLV8mMGTME3zJ5t1uOZtfWAwj0mTC8BY4yND++PPh5/j6OdTcb8l6aNvZMs8gXPNvzK+WvAoWwBnlCD/EMQnwAkcgvCmo4xivoxlkn6PRo2LMZ4xXlKhT4r+QkFe+vWBNMCUFZBnyswkBMbli20UJEY6goN2iMOTLwmgmRkxDkCRomhH5kGyZGD/BCQ5xnF66eWVommHTM3Vmcf4leB1P4Q4OCaED8QKSXZzkAxm3Sp/A9+J3iJeQxK90QAxDQNCzLF+Ai+kiH1fsJH3DN3OPjdUb7GsYUi1irN4EiMD7FUgZsaGKLO8OSFaZas3RC9vl8ZyyvMRl3WJ/jP9CxPVdLH+GMYEvO3nEz1qalU3h4CFUaVNooiAFJSUUtKMz1TE+hrbMcURuwRKFjO/fYDwDEXiXErkNlUi3O6VErmK7nZBwDjFzAvjXdn6tGY6PBbNyAn23YP8neLkE0Yx9YpIxMaEiwFejF5ctmI2tydQb+lkIVKqt8ZRLjs0EAYRoETEpoJsG6UaPmfohauCu+Iklms1CmMuDsHLpUlT0kmytVGDoFaBoQY+YspMYwltqTjOKzil3+LkgRHBTEvzrgTsuGFPoScEr86p0PiKIvP6d7jOObhSjjUlxUFIJ9XKpmqjn5qqy98wELpYw3bdiInNcSkOm6/g53ejSiIF7XQXLCqLO53NjOj3MojWHV9OU4VW36/iqOwqANVsDWK+ucfYYRas1Sf25xTrjN1eimAobE3z7uofhRr6M3dSZcRviMJekoTbSPduUpGkoXPjGWM2X/4JRusdiCJ7PE3q1VdnKr+JwcfMUAG+PYUidovOIFHxB5Hvp/Q+21MjmR9cvQqrYwWsuYpQJ34uB7PBH+VwxLT0S884lviF4hOEYTJ8WKbvETH4FbBJnj26cRti9pk5HIezUNa1AZ+dlXW8Q6cUBXj6uk7cjAsl27ZCALVatjdBAP3NsIGxiib8PAYyhMFaAJUEgAShk7oCWwF9rGE3Z6RkCixgs2ZhH/MwoJABMKODLKgQoYrMD5p6ka0zVjqRGoYSJH1nHUboCTA/TyA2lixYTKXkdklFt++murmCqiiQFA66GdsmLDOGcFJ7g5/ToWtdk6VAJz05vx2Z/Kkly0heHhRI9ex1HkmxPliSVE+TadUnStdZEqUnwXjJGHDpLYM0pM5AEeVxQNjPCZOiSwSjsxxaTIcxTYZJ+lIzVFvNED77AGFHWsPAjpR0O6kLL3gT1PR0Y/X3wLVbRbNkqWK68RHbZfFY5V1ddyNdHmuUXL3ldw/RHtrxyxrnayseyHra1n0heqst9uGTaTROFTSXzNCkOu441NPbVJiCkLAMxeysbHJQk69TgPLKL/JpQpZ4YgyutJg4qK9BnKj5gpiLAMfqP2m8g1G/fuLa5LTdc2ZZ7CqfQaymhERhPk68/7T+W8d0d8Te/vjx8B0PvHCh5kJk+MIrcL5prBXgVyWXlXnQMeOu5h0kAp09SnqvPA/fo+ga6tgemeTpYeJ2OMxKBUDk4sk6ZIdY182N4olv29Qihm+6cKXjzmmbkdMM5Nlar4yzb9yURt/SK3G4J2Oi2gtfSsBUbkGz/HMeTP8flfReFJmQrHje7rcr4Had8GcMpXkQoyzzNMQsTkg0i04BhPs9FZSmoaRFIEPDYFzx7Q3fGgqej+SNDTqWYnjnSzbpRsxUZP8sb6UZbds1UlD4/kF073KqczFiYjgziXrWWsMVYHK2CI75oSUSuUbIKU1O0Xs0AgQyccVRK4NwBFH0BEevK7DG2x9j2MbZaGXUtRQ7GPmUORldFDAf6QQN7XOpCYXPYNO366uEmbRlo5t6cMgdU8vXb6iTYnQPabQr2rvXvSu28mQIS7n3TspA28lxTdhiGbpdK/epvqSrWHFfg7/768+HTj5urvzsq9XtkPi9Iepu2mOfSq/meLkuv33npNY/YdbtFegmeUZ+pk5J7is6vy5F4s6lrX+C17RsVvLa6LvEqga9I4AV1ZuWdWCLCNpRp47aas5QcFkF/963R5eq0rmjNUW+G0VCpj16I23nd5UJcqVWuluh8RnDD05wgeWIB92wNRdjN+u3QHE0ZlYbjfdDdB91nrOANdb+CxZ4xUlTwVC0Rlpej9tFVzjxLavODwbGiH029GWe7cXXndTeF43LdqVRsWlJGBuz60nmvEAjo7iG5h+RzNlWYnURkUVroEbk9RBZ+79sOstUpRBbXXULkWxRSvEtKPnCGs0URStSfHuj5zyghfQ2qx95zY+9Q99yRnM23/Hp1Snm3T2vVKVEeuyjkNS4Nes069J6qmeB92FuvXX6iQhkywUxU+Qa5+t+jbo+6Z0dd6uGKG+3zh4Cd8EETar3ya3r1niIT1z0KczhapG4R64BMwBKWQlHxAY+xmCkFp3heU9wdFSoHLJnaRo/JKt+m7lesOmAJrKZOuNnQEOSlJ92z5NKT8c7KU+62VGq41TJJi7XYem78PWqSP1mjc2XXw9pkJCfozRb8bgr/O92g4pkYnqt5spwe9lCMfXvrh9X7VGy38iDEtybs7MZX3OSt/pbta6Oh6uu53EIxxbXKxjl1t+CkZWKrzs/ux2IXFoqZTesSVrfqEoqHctSzYFlJYo7ihKQR2avw63icltYtlKWJPn/WR3Jdj+Q8baQ5EmKr0meG6+fx3kliOdPvUbt11HYaora4jakrqF2/ZWZnNTntDP2NAXCplpyVjTlES00/PRz3cHw2OLZEPLC7lKzKq7VZShbPvOrhuEU49po60d0qZyhucq070Vk7Zdaj3zvGPRJ3H4lNv8DTXZ6xro1OWlq2eiRuG4mtxumMpvWE0yCxVU9n3KedlANRvHorY9EXmnsU7hQK64ZR6e5RJZR13xqJp/6cBoX7e4/aR+Ez9vccVLTKaxiiI8LbXbOqPnukMv7dD5DaydVtzUcH5LmrbQu9FemtSMesiOmPKk+FcxS/O6Y72kjTFZmVtsyIqFn3ZqRFM9I0y211K8tt1bPcsjNfpLV7V74H4e6DsKXLDaNKR1482OEkXrx4Tv5Fwa97afirSGtfRJu+Vc9rS55ygb99l36PuJ1EXMNo4PO2hLghAuBrjOZr98rXvtok+Pnvp/1+wVhubEx/xYru8D0B6S9ZVRitpS8Vo/MzW9inYPL2ooAtJ6M8BUcNr85QQduDofSw+B3xLPovfo3dvPkf\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/CalendarUiClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T09:36:38.063Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"CteTger-CDzEnX6cZ2KU\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"C5RBs43oDa-KdzZeNtuy\" name\u003d\"Page-1\"\u003e7V1rc5u6Fv01mem5M/bwxv4YO02a0+Q0bfq8X+4oRrZ1gpELch799VcCCQMSGCdgOwnuTGOEJLC09toPic2ROV48nIVgOb/EHvSPDM17ODJPjgxD1zSH/mElj0mJY/KCWYg8XmldcI3+QNGSl66QB6NcRYKxT9AyXzjBQQAnJFcGwhDf56tNsZ+/6hLMoFRwPQG+XPoDeWSelA4Md13+AaLZXFxZd4bJmQUQlfkviebAw/eZIvP9kTkOMSbJt8XDGPps8MS4/Dh//OFf3Dpnf3+OfoNvo49f//neSzo73aZJ+hNCGJAnd/3T/WXfOavH6cnFyafr2effujXpuXwyI/IoBgx6dPz4IQ7JHM9wAPz369JRiFeBB1m3Gj1a17nAeEkLdVr4LyTkkYMBrAimRXOy8PlZ+IDIT/a9r2ni+Bfrru8ODH588sD7jw8exUFAwsef2YOknS0O183iI9EuIiAkxwxOtCDAARRlp8j30xaeqDHxQRShSVLIq+jJEf9RTtxBiG/hGPs4jIfO1OJPekbgjbWc4oDwprr4iVcwRAtIYMhvoOY0czhEeBVOYMXcWgYXNxDOIKkCgZVUZDOfERoOozOI6U2Gj7RCCH1A0F1esgAX0FlajzelgwkeMxWWGAUkyvR8xQpoBc41jsUFjTONbttZQNMvSY/iKHNr66IY9FsIgJ5cQ7sD/or/rjHljsAD4SVAwRUIGB8WRCS6RwsfxCCK55WfYXMIfDQLGILoHLKJHd3BkCBKR8f8BGEyMprMke9dgEe8YhNDkTi5FUejOQ7RH9otEKiLgcrBY+m5GtesJb90CCNa50rAR0+LLkBEeJ0J9n2wjNBNfMOsyoKiAwUjTAheiI5y8p3SXgmwqXTkRGBwnBEBcYaLHButTOVp/GGV+YCe5js7sd8PTqyC9FhbSwqbAvhQiWx+lt5+DoJDfni/1hzGgJfNs1pD6IhSYVg8fKHaDQQzOvDp5XQzfzlzIF9PdxTXM5z85YBPwRYAAkds6qKC2DQiKOIXZgRFkgsfxbOcYXoZL0JAfDglCvFYIM+LlUy0BBMUzL7GKqWnr0su4oYn5rrkCx8YM8YuAQTcpPLogxvoX+EIEYRZ/2FSd8TJiN62PTqyT+KSkGIzoHcMUIwqSMXmHjLRKYLcs+HAs1QaYGDcmI5TlJpZCDwE19Dn0iCjuJqiNsOY48jS68HWKgdtDj7bYkVonhxWRswYhESwa8ys7/6ihUfmMf0/Vy4hi/5wUkoqmcnhRRtAlnBwHk+WjCdWhGnbqR/P5JxCEwYKjOWxNKIDPWYWCUWVMabH+vp4M9AKZkJ7ELHrQaTINM1hxCzByGrpUSLLw2SMFwsQeF9gtPLJXx062kaHW5NAmkDHp9ALL05uIvQ4+7745J9/vJzoPXegQIfjs0Hw0B39OmNfj+OOACEhulkR6mXSg8BjvhukPgnTg9xkDWax28n+mzP9O31YsJYUG6zRmLXzPGosRbxmXInaStTEZp3gaVr47TypT/HELsbGDNMz7GiBQ1aD3swdAn72LuILxCfxAhEC2S2iIO0T3FAcMQpkXgeM+uKX0pHL/FjZCp2DJYxRTWKFyYFhywjPY1nX8jr6fo4IvKZVWPP7ECxlhTe12T+VwnPij2zaJZ8WTTXbzttOjl3Tdqq01eqC1r/83IO/XT+c9W6H4/86i//pX3oKi2iHzjR3grkrLc5scqPXnvOv7LkSN7phDzUNCGU8VOXI6mbTHuqzdJfoWOE0fgXR7QWKyME5jqbROY4tspFm59jIUHhyhqtgI+dJjmOdyx2M4yg7A71Y5hNB+Y7gfeoErAsSDcikqVT/cavvxVpzFdLC6V2r7Xpu51Ea9fEtIhNGPTi35i6YQ4VBWFS2qgBuVlMWoreZkLCHwAJT0zHPmbolCrIx4I0qfQMibzhlSuSUB8RTdXQ+Yr0d4W0MFQvkbFTEHFU9rT9Mfc3twsdSfNgqxIfTJSbRRWJv8FbZlZBCR/ag0JFZ6CgZBqmjbQPa0g3bWuV9FQPghfr5APi6tbgdPJ1GkBwVJa0BCrdqxP42CV/1koglATcvrE8VhrxINS0Mbk1hyLCmrSBNUda0fNhPlI80fig6cu1W5MPYBu+NYVm23V+9IsnJ1Qt2F11ZMP/cTk8/fLf+/bm8Ov18r50d3/zd6zn7U1JF2XEGDQmh7T5XScmXal9ziClTeMqdh/ymPGQR0a3wWE3DlpWjZJy9wqVVOdjNPOQ5vSmf3Rj0TmKRzi+U0bIxCD1Jgjq3+MlusVsb1OVusRrEbbnFtjq44iXYiM6DSyre8xQ7sXJgQRYRYJHAVB1reXMrbFkdZLUGI3uwbxjJi7EMRsD3OTCiDkKHDaGBtWcImTITSRDo9ge1sT9oe7Doek3jq7UNQpYCLGzzBxvIsxB5zDl4N0VhRNSmD4HdLhBBMC3CZN+kYsm7c7ObhIRyeteBoX0wWHUdttbA4JSAYTKnzh+MLd1fEIQXjNLfsW9xUYeN9rHhOPvGhmq/GN9xylniHXWKzqln+ZCqEzpg8v7TDW71mwPNbsxXfbhDT7oqZqwIVJYhogtVvtJQpa7Z/fz+GkeTlZ9y/4NeXHN70dFKpaCog5WTjGmutNfLCPXFEuVO4pSVVHWQu3eUdyyvAoktYOvA0qebCIZ3bK6y0aVXvQPsIMChCD7uFhw1dnZ1gaNnBo6agYoiyKiESlthI7ssbBRb+QQqHierUj1vzpZvDRc7pBA1MKrjREyJdEGi9nGgChjuFgiuzBAXeIYmnfNW33ljD3SdnqqUUHpmSw9uTD9pu114cFIqCc2VgGnqCmAOK4D54h7HmJ7Pfr9fffv44aOvfTz7/fPOjX71VMt0XIXSWaOXh17xWaaMWn26kf7qSVbGcjVDPWuTiQq7TZCqEjJlVleiXEtRc0UL6dQx+0uGydtVxq3hRLWLpC2cqJ/S3OzIzahiWj6T9dNcYXx+jrLpuFTawLC0vpb9OHm2NmW2dt0+23Jr645pDgfO0FQMY2uPEW8eRvHoN1rE2c+yjrFaEETpRcFrTbeQx+7siFois9h0UCn3+GLH0TLJ0hZbSuJgih6YsTHi93MyJ4SldztmA2GcTrzA6iM6aVNEjZKwP6FXNE4pdwD6h5VH7C8OxFdbN/iJXpwBrhf71r2bnm4M+stglrNv9KJ9E4tu8ut6Q/Uu9Er01g8TGyaFlWkbQ0vXXcdy8yZHXzyyljUCGKyyHxlWJVUaR5kq/UYmwYIm+JWW/l6xFHejmGnTo7W+T1otiwXM1qP9TAHf0y8afkWLOFPDP/Fzn1/wAgRyryiKAY/DNFdCmhIh6Td/LVosXX9D9gSubjKSUzeApMqXUGFvtwU/x5TgpTQx26IplVVwCGxvay+K7VWRi47tW2f7+taVEDctR/bOMA+rQ6d71d6Zju73R/f18bcvfpfX7A6D3ynBV/G7rcgDtE9+V21M6vi9dX6vvwPpdfC7ahG14/f98Xt9/O2L3/Ua6+57IXjLsSsJ3pI3m9Yi+L7WQD4wdcTmUH0hx8ovTJiu0Xfk3I7K1I5rxmt+vA7bGl3i5coHSZrGe8Qen3ztbGVsHWxW6kMljloLk3aec1OWVYlh1dCD//qgIkxquk7flRcuDsiyUjydX2CZNeAEk7ATvSQhK1s11e3lg0wzeimvbGSLbRfJSrcybMErbeHD0YZ5S9uUN5FYOyWWclu6m/AGJtwovGTBUHjsO51wU7Vw2U14cxJelphsXxOuy4tf2d0L3dM+b+lpH9vJo9NSLBApN29ZFfB8cXvF1MRYvkhclxjpjCmI8T8dMSamTwF6irwMu9WEKp+q04StTbipeKh+pxMu4kM7fmXBE9/il7438Cj7zsCBNTyqzF7Z6Kv2qp5v25gxVshXw2/ak1PBDvM4s4cFAJUkj5Q6Mt188LVuOsutUyUX3+YxqE6VXKxv85BvU6lj1exYHrbs2LGJt++50nPXihfw7VYhqlbBuylvzvg2i3Isv5dstxPeRft2GvyxRdx2bxP+/Ghf5+NsM+EKf3e3Jq+1X5O3zRTqmw3Qxl+kVWKfaWZ+1rWW7MaS65TZjW4h+lKo347dqHx9RqdTGqOYIggsd3c6pVLKlMmkFPkIutjya40tu5utHXUeqSJfvug8UmohkTdNJanLMwmkLjBFepc9qtEs9yk5HWT6qMqwWQEqC5bec51A6pqE7PW9Sdqd14aXrZDwlJyN28Nil4mj1LdcY299lzmqjZTj24Nlh6mj1Da48WwbvHPzq3b5aVa6szj1rfYc2lEmBe78ruasW+fAdu7Z3Uaudh3tsjewNj/h9DDEbA7WLgf9pfNL7EFW4/8\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/CalendarViewSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T09:33:34.680Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"x361luugJhH2ugc9nqF-\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7Vxbb6M4G/41kXYvisBgDpdtMtOd+Wak0XRX072kCUlQSWAJaZv99Z8NNvgEAQJNum010sQHDLyH5z34xRNzunm5Tf1k/T1eBNEE6IuXiTmbAGDouo3+wz2Hosc2SccqDRdkUtVxF/4b0CtJ7z5cBDtuYhbHURYmfOc83m6Decb1+WkaP/PTlnHE3zXxV4HUcTf3I7n3V7jI1qQXvVg18EcQrtbk1i4kAw/+/HGVxvstud8EmMv8rxje+HQtMn+39hfxM9NlfpqY0zSOs+LX5mUaRJi2lGzFdZ9rRsvnToNt1uaC+y/fV1fre//ufuFd3+2mhvevfUVf5smP9gF9j/xpswOlUP6OAV7FmJg3z+swC+4Sf45Hn5FMoL51tonIcPmWOmoswyiaxlGc5guZU/T3GT3ejZ/OiSAYeJr8JuTlnoI0C16YLvJmt0G8CbL0gKaQUZOKE5FCizSfK5baLulbM9y06USfiNGqXLoiJfpBqNmBssaYhE3jzM/CeIuaV56C0jP4yZ1Zw5D2CqmC5noceYFra8CRSWx65UyWyoblaZY7EqEtBaHtKMNEidFLY+SgdLH/2WNtu2FUteqyV/n/5vV3P9z+CreY2mQh9FzFWmSOyEjEmwT/3G+ib+EyiMItat0kQRqiVwzwvSPS/aPqO8ZwBHgZepL88qIdRX6yCx/yu+ZSEMz36S58Cn4Gu0KdcG+8z/CdpiVe6kfUUtc9Tx9IDw2H10NH1sMSWTk9NMbSQ1sSj+AF0S1DBNps/O3it0oGsFHYLvwUTb9O0iugY0Slg79LXGd4hQkUosuvo3CFlfIhzrJ4gwbQetfYSOG+KJ4/ytS3ZoT6kf8QRDelUaFTtnEuTLW8CRacfZM5w5CeImAaRAg+nngLqKI8We1HHOaaRJgMeB4bUODdLt6n84BcxFokcR0DNi+U+ekqyKSFcjko3/AEiAbHoKPiNhUDPHBVaNs1mmDA5IUFETXYEA2TwYbc7YF2/PWFgZwHcdoxGEI6mvEY4hN5nCOpyTFHFNRNuFjgyxGWoJfyK2xJMNFzNsCbCZzhtfZZTGDGGAYsgG5p1H2kdtuS8MJUwAUYzWq7dXBxMTiB6J0e7jGbEPEc2vE3dgVQjw5oz+yFsLJoHdgWY4ZmJ2BPoZ9N5PTOB1JAABenJ0qZrqUdWWpknLJMSSjnhfFChn8fZadKXJwEaOhm4e/WpTeKhomL7p7BZp3Ie1d3BFTpyXtLdzQTmBB4lmE4tmVbzesOJwgPy69Z+vPxKQqTx906/pn++fl7m5gCMyJpj81lXE2gf8LGpspAy+IB+/wOnuEcs+JdA4Bv8Sqcf/e3KPJP30cIYKO/PDKXJadREFubenh2KfGO6w5Dedn9YVkZp9k6XsVbP2KZeV4CCz65rtJLhSPljUVwoAKrk9TyaxAla/8mzn746e5DM7v721AHnJC4bbFbH01IVBHYRWhls0y3JrkleI4t1VLyMIejuJwPOdV9bB+wsMEKilU8o0+s0pFXR2MUapvOEKNAS5AOh1+hrZtqiOgvmtGRAxRKwuGwfkpCbJKk+0D8fohv0xSXGLmy+ANVADSeX6By1y8Y8mFXmgsZcMVOlBLxB6C32pNsAfg1QWM3gnQOJR2DI5QyklQQaojcn5pSKhRrR6lmyven1BFajKakpsovK8B3l/jbiSozTiAeZ8XT1YP/G3o29A/dX1f++h3/zFPmeUp96W/C6FBcvom38S4HYm5KlXXX+aQ7NQNQLFOA6JVxb77JXrYoCWBOBNQzw7/xg0H8mhBR7thco5xLxaDXMqBapqB0OVINFIQuBwrbhpvIus2CXZbGB9xkzRcezQ0Y7s+xFPcYeRNf8EgqHXCvmfdWIElvVBpnmFOWPmUhym3oUA6VJKjkGmIMKGdCm3ndQ9VvMbQkmlCOmcwQ0QjlGNKMsn/F3F9kUN4sucR28rJD5klCVjomhXrUOCaXlGBob9deAYSUjyjDcYLdQGYj5mOXtim4gHwSHPRNgtsuaF6oJrpAJPUPzDQi8qfFH0pJ6e/iDJYXd4QQTOn3AYX6SHsIwxlxVcqzf1Q2l8Oydx+QNUpjN2R9XdmgC7+RKKwU5fa5Tj7xZukaBK3iCzBMqZpSMoCqVu2EWKyWLJ3hSyCXYbqaastGJpdt0InDU6s+q/QRhHwEIR9ByJsPQko8PDkIQTBkeezfWD6VXB82dsTRzes4Q6BxBV3B9dUsx7RdC3EKAts0BANxNO5ouc7IxTbd8tTvs85K+OrCFLPYrUNMDzQvNDKvZa2eS8wet7q2K4cbRfZkdxCXlrq8S0hLUvqKDF1GQOZ4udwFo/C0W8HPuPp7Ng0Vczem2VNDxWyStNDYpY9ywPomVXSwiO2Nqah6L1Fmap7iFdJLDyl1Zi+vCB/X3Lu2UNhyWUX4FPjO4BpawucdhtsXfsRCBnGhs+eglfWOghAyeVAaNR//7pOJlXGkLMkkiZGHqRdxBJSHZAk2/PI0h3yQwO3Lu+MlgoavWXuDphzSz0AobyxPpHj7zxpcgc2va8wVNUBv0piD0ys83qY1V1Oj/tu5j21Z1iRqbKJK0ETH1ehHRl212tUtYS2B9WNrdYuIa+xtWNcW4h1qqhhGerZsvUyx9HYw42XKPu5Ju7Dch394I0L0kaf8p4EfO7QNktop7/zKctPCn7ygVH4p5u0/jeDdmZZ1sqNVf5ot9mbPk9mn0nqO1L5la5bO/vHxHLA0wGXohZ3zDqn+xnVGtlxmi8rf/36A4YlnKJlmT0fEsJsXGpmdbYpbxnZE6s5IYXQUUIjnSn5Gq+nuJuND25OGQ4aaedj+6CGvXcXKeBQ2ZJO9TxZ+FtCyOXyy1A9/izfspcwm59jJ8RJW/jvSrKj/qepVBcpRsCTVMvNwu/qWt2ZAbaT4w8jK/GbZ+FvN194RWCPXjx8sor8OJgLB4Jkm1HID5bhevjndCiHrs5A1d6XI0HjX2mOVxKttQyNmNb/eEgS9eLpBE/uWDDbpmY8q6SiB4wuWYGxFVGrrOkkXDmhcg6/T2xdvcQ//CFc3O3cVHn6dcAZJN5zvYXHbiD1ngFVHFY72rbtiB/NSDHATn08uzRqRope0LxC8hFluMDUdhRNFu9gO9IpTulC72g3EjQPTEPcCa+yv5rl9dhaHxj4aHeoa8Dx+x6jc0z0VHw1DM2EVdxrCyUu2rjmMckO7I3qWoCHUibumBth4t13NWXcDL6A/SVvWm3RdfMx6I65IOfMvMd4WgCVbh3Pb/bF2BsqNG8t1T9ypoUdreYIs2j03ywFwNF1nTi07sm6NUFfrDis4KmsDLtU2dj/UEvARA1RE/iozKdZT9UpsqkgrHx7IB6UfAWk3xT/VsAnRGcS5Tya2E/bshooood3irrWAIl4N9bYRpeL9m9car8hbpRzDJ/3fiwfZ0U6O6iuadpOvCB2P8xX7uoqCD2brQAOthLW7svIGGxIHo149ofhkHRRyFO8wAcbtdhm7z/Bqerv53+HXlyRukzr47++y2C6P/9KOZvuKbLt5oeGgU8lN2a8Y6/B0XbftFoen58e2vqfz021TwAnZ07QVnmaPLfQJ+QSREaDq40Pz0/8B\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-10T13:01:53.849Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"4vsl2oDyarZfiugxIARx\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"uV8LZy4W5i_WKWDC4IlV\" name\u003d\"Page-1\"\u003e7Vrbbts4EP0aPzbQ3dZj7CRbFC0QJNh22zdWoi22lKil6NjO1+9QpC6U5MTZyDbQJAESczQcUmfmzIwoT9xFuv2Lozz5wmJMJ44Vbyfu1cRxQseHv1KwUwLPcZVgxUmsRHYjuCePWAstLV2TGBeGomCMCpKbwohlGY6EIUOcs42ptmTUXDVHK9wT3EeI9qXfSCwSJZ0500b+EZNVUq1sB6G6kqJKWd9JkaCYbVoi93riLjhjQn1KtwtMJXYVLmrezZ6r9cY4zsQhE74+3kbfwh/k7tLJsZ8vBZ3yD9rKA6JrfcN6s2JXIYBjAEQPGRcJW7EM0etGOudsncVYLmPBqNH5zFgOQhuEv7AQO+1dtBYMRIlIqb5aCMTFpfQWCDKW4Up2QyjVZnEWVxoRRUVBIiXUKsoMZ7/xglHGy627l45lQQC6c3VT8k72gqdFBVvzCD+BmAYIdrfC4gm9sHYxUAOzFAu+g3kcUyTIg7kPpIN0Ves1foQP2pUvcKtzgFspBQ5JpDcJEfg+R+Vtb4DFpnNQkStiLclWOnm+BMRbINue/JXwVwFu14g/YC7w9mnM+xjpCb6nmaNTh6+Hm4aHFbeSFgUr2eig+m+DK0uWiRuUEiph/4p5jDIkp2+J+Efav/D16Ls2JT9fbaul5WCnByPSbnog7ew9MXUw7/TUW0Zgi00s2uFFaERjHY6VEXULel4n1OqN/P/oC84RbJXT7ZbLmwAYdvrZAjQDgOvNykFrt3LYbLcc7dqjW8wJeAjzM0bu7EiRa5tZNOzErdpYL27BP2jXUsulQrF/ncAz17HDTjvyjL7nWx3aqB2MSqLp8ymcJyz9uS6er4tGuXsiWs1quVwunSg6ToG0Z2eukGEP3r8LoBQQaYujtYA+XjbqaYqyuIf7ENpN/iobER7pROVLiiJKVplMIICW5O1cYkmgc7/UF1ISxxTXzqna99IUZLpC2Sq9B8uSbAUj2ccIjvENPCcoia0lX9hDI8jwppVnryZTcGfw71q28vMmLdeiiXvZup4JInZ3JatZdj2g7SyaQSubDpsrM+zw3DrLvnhmgVepDML2RPlE1lKJ1vwBXGNoTKZXXWLsC//9hEkYJ4+Q4lFFtD35fgQCeV0C2QMEGmKQeywGVRs4T5l/SW93rjI/YmU+Vq/om1HldjvFkSpub53uAcDL9I9Tce3+CcMdmCQY4JVNUfH7oErQCtb3ovAGi8IRa0BosmLomME+bQ0YOr0JqFAxmRlkqYCW+HxQwQvOtGwr37a9GKzK//687r7KPozI9GJ9wjRP0BxU/atqIdi4WkvP7HIU8BYmLQ9nHsewUfSzNCU5q/Mc2PXncgs9Jh7P+b7nm863/b7zp6dsoauD5RM3ANWzc+tx+fuk/bQ8/OzcI2wYWvAzcpnWbwyO/wT9Otq6Pdreo7LKNQSTLy/gz69KcC+QwJ9JId6L4HsRfLYIjlHtguDCMXOeO1TwgumF38963tFK3tDZuqpEMvm/quRhWmCzsimTf3hlm3Uebad9L3unLGwqOf+xZ2/1UcK5zt6cfvnpdxL1Oz8Ty1xeh5xYlqM+bpali3oP6frKGIi6gYGob/URdU/Zhztv5IXfoa3a0Q9KbK9jYs8rtecNzTqG9py4jHXI4fQPvt8jZeRIuTC7Fi847PXrAabqRPPqaIFh830epd58Kcq9/g8\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T09:40:40.572Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"yTajRHIIAo5wlGLG_obE\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7Vxbc6O4Ev41rpp9CIUkxOUxcTZ79jKnppKp2uwjtmWbCrZ8MM5lf/2RQAIJZAwYcpmJZ6piWtBGX7f6RqMJmm6ef0vC3forXZB4Au3F8wRdTyAEtu2yP5zyklNcJAirJFqIk0rCXfQvkVcK6iFakL12YkppnEY7nTin2y2ZpxotTBL6pJ+2pLH+q7twRWqEu3kY16l/R4t0LahsYuXAf0i0Wouf9rEYmIXzh1VCD1vxexOIltknH96Ekpc4f78OF/RJIaFfJ2iaUJrm3zbPUxJzbCVs+XU3R0aL+07INm1zwf3vX1cX6/vw7n4RXN7tpyD4172Qk3kM4wOR88juNn2RCGVzJJwLmKCrp3WUkrtdOOejT0wnGG2dbmIxXMzSZgfLKI6nNKZJxghN2efmhp+UJvSBKCM2+wQBG6lPSszzkSQpeVZIYpK/EbohafLCTpGjjpNfIhTSFzN6KqXrSeVbK4LFwBdaJTRqVbAuUWVfBLAdQAZjYpzQNEwjumWHF4EB9KU/J/O5CfSZjx1sDwO6GwALBhru0HUtUMceA8/y6ugDJ7Cc0QTg1yRAnsn8kJIvE+j+78CX4BUzbCQl7CxQ0n6pCUoRA0cnYobkMo5WHP4ZTVO6YQNku7jklonTYjp/qAvFuQ4C285OZfO756K0bNeThH+4MBnFhpJy/SzEnR+9qEffSBIxnEgiiHE4I/FVYZ3kz27pljQJOw2TFUmbUBTyJQvNotZ1QpG2LxZaQmKmpY+6zTXJWXD7RiN2e6V62bpq2VDnsKeHZE7ERaoNrPCBILBwM6schhqrTO+KOfZXRQfVVHFON5twu7gl+0OcnqtwdEe2XJnD/bowJ2xY+F2/QRV7qs1JbThX9A7UBIalP+0sewdaCCIMAwcAz3Vcp5nvyIqATV7BjbnVWdLsvueFkKQ5Kj2lQrL3MqaSNKAOuyvxN2M905RLnsV/8CJnc8kNIN4911n8RVfRXPJhU55VeTNafueSXNFk5kpS3ZGFQpHnTKm4+app+CZaLPjlVwlhtxfOMlZcWXdcLJmg8NUEX3Neh5QKJMAwPs1xdYcW1J2Za4gjqno0mBeD/TRGBqU1lUCXf5B4tw6vaPotTPZMAC0FyeKPHf962MR/RUsSR5mF2CluKBZkxTWdCmpYfJ+G7JKkOI7jcLePSpknzGMne2ZJbokQNKfSQ8p/aVqkB/aJKNRlnywKHUBFEPI0FQGGgKfIJFQlcfyxYh0ZXDZFmwrs9YWkypEm6Zqu6DaMVUn2RLdZqdsvS92BF/BqkBsCTG+0del2QnzYsFENGVnEGIA+EWNHWZ2MFCF+s0gROxXt8PpFCwDrIScArxseSAiHM/bXWX4zzYPNT4PfMyZwdINfpA+q9cEm8xOMZn68j2XwcVfMPX0lOi3t/QB4z5Z/pMntw2Mc7R72a3qbfL/5egFamHueQu3OBaSoeYq4d6LWDY1AAQ0oryVQQwSsZqRMNqwdUs3I90fqBBajLVJkispy47vfhVtjViYMPM/IktUs/MLujf1nv28bv/3Cv2YJYZbOLcNNFL/kl2/olu4zQ6ydUmZ8tinhm0BcrftjNmVOzarWxZGEAGcgMMo1/85vDPNpYobcqXNBca5Ug15sYMkmR7oYKQdyoIuB3LfxQ+bdrgmvkr7wQ9V98dHMgXF6Zks5BWSHeVk1f3TAqSijlkZS/lDhmnGGrLzLXJXb4FAMFRCUeo25DSjOxK4y3ZeS7ihYipVQjCFlSKwI4xhbGQV9pfx+VUDZYSEllajrjjivpmRFYJIvjyOBydv4tWZjd9qvvYIRMt5i3RzveBj4xVg5Gr30PVa9cficAsnKjwz6PNgvqcDAa2Z0JKlgkIYvymlC189LO4wq0j+2ORZKd45isI/NIKnLBhrWDYJj1VRQcNR790nG5tVs7KfPwxp1sZtBfV3NkMnIB0m+CkVunXxhfTE6tgU9x4HFP7dVjgEDC9kAlR94vjyMOgOd3gasG2DdzVqlbIk8y3Vt5V8rIAGwLR8q+Dc4s/OAPF5/+kxYPhOWz4Tlwycshak8O2EZwyiZrXG9j2fsLKVbrPIGyckF9vVw2bEQ00js+xi4XtHl0DpVacdmuKcfRji7lbTH7Ys5muqM3/mihwxIdsJ0Tjuh18xoZGnWV+2iJs5xm0O61hoalfLsUJD3+lWSXNkj2ldlJJtAv4Iul3syikxNGfFbrdB32rlWrfYgt+f6rdafaoxGXr+gnuR+yAU8WC73wRaw+bFjXahZNbhSkpolMpZ9N63SvDPadyuNL++rVVpawzeIB4voWwZyoK/VqbY6VBm9ebHa2BBZUUKlZCpz5dPvVygZMs+P6+9U5JnxIB0lWMIqjbsvOsTVpCuwPEHV8i5fNrMPX/4Zvqfth/PvyPMrkgNVebTvTUcVVq/r4Q09RB/Sw8PzO0Q+pos3o3H8tafPp7uqw7QC5ePpbs8BttW5iCIzePn4oOBVubuRlzVq0YD149dRPAdZvi5UXO0ObC1RJzjJa2ShOvWo5wd/g6w0yT5yhlrzugz7puYeYqmH8k4ZbmZ7RDVKtoM6hentTRz//t+Hyz+Dy0fs/XlzuF+ZXkZGl+JBxvHY+QO2G4SQJYV4Ynjx2b3hb9GJ5o2Rwnq2IiygB3WtXw5CeIB2BaPwYSd/MPQTqkEl0qjcHV4msmzdFCBpzk+1NAzQpWeeQ4uWktfOagcCmy8JJdLyXR15x7MMmzWMmvwaJ9aih+THj5owwFpYXHnKiCsM29eyQTOj4aIno2wNiW5WzPwe7h++gFfd7wGhag2zILxyDbPJV7zFbg8syD6ueg7U87WgnyIGsnWvYDtaycUI7/CtDB/QyARM0q4eJTl9n3K7lTc2a4xGFiio7+xRaRI+ufECrLS1mduK5/MsWBpjjweRB/w8ezwEsBam+04tBBlrmwdz0cYU/53RbK7VBrjsqw/2pnr14CdvRe+x9VWlYIjrCUTgGgJYPJoGtXgu9o4aEQuFb59IVFzG62Vs5gkMnzB0b0t8uwI6c7yWnsk5nmMxPfBZqGZj6Fa7/Vt79OrKamY78o4MwNSUeNaODNmOSl/Dbbj63Iqhxz6PlfIBMG3FYCqvYXsAQ9C4Q977M7yd0YWokqcb0a2Di9zu4E5Ej72yXMvuevTr/wE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/ListCommandActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T06:43:35.139Z\" agent\u003d\"5.0 (Windows)\" etag\u003d\"WgHP9kLT9h3_OslDzOeg\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"AbNtG0UdLms8ibHrtGx_\" name\u003d\"Page-2\"\u003e7V1bc9o4FP41PIaRbMuXxwBJuzPptttkt9unHQUL8NZY1BYE+utXsuWLbAOmAXtDTaaNdSwJWeec71wkOQN9vNy+C/Fq8YG6xB9owN0O9MlA0yC0Ef8lKLuEYhowIcxDz5WVcsKj94NIIpDUteeSSKnIKPWZt1KJUxoEZMoUGg5D+qJWm1Ff/dYVnpMK4XGK/Sr1i+eyRUK1Ecjp74k3X6TfDIG8s8RpZUmIFtilLwWSfjfQxyGlLLlabsfEF5OXzgvbbqLxlx9P3/+A3rdg82dozaY3SWf3pzTJHiEkAfvprqcfGfw8eqf/ttv8uP/neXQ7f/8gm4AN9tdyvuSzsl06gcTl8ymLNGQLOqcB9u9y6iik68Al4msAL+V1HihdcSLkxH8JYzspHHjNKCct2NKXdyOGQ3YrmM0JAQ1ISrv3fF92SwI3rTH1cRR504QoqyTdhPQbGVOfhvHQ9VsNAA3xO8lDiScpCcWRGZX1IroOp+TANKaCjcM5YYfq5XLDFY7QJWHhjjcMiY+Zt1FHh6Xkz7N6OXf5hWTwCcyGDZjt+1wxxfy/LDxGHlc4fu4Xjg0qy3C0SrR15m0F60czzofC1END/AimpFoDMz5sSMjI9ic4UZ24DKYsJ+lIohRKlfYl1/mUtCioe0o7+1xrv4ZizWjA7vHS88W8/0VCFwe4BX3TG+qb2aW66RUR+IC94IsXCH0Qg2ChRzbcNvLv5v/ecW6viPuEo28PXsQq4nJEIXNZidUznEqhQILH2PfmgWAwn37CeTgSKuhxI3krbyw91/VJxurUUsZdcamKkr5iWeAj8II5LwntZiEh99wkJxQoKR/oJicE5KUg05OBxaXD/L4WVnOUq0BGGui3hfsB89juc8wuGtzV1NbGeaEg7fXdxRpQ3zbTgpNbRmS+FFJdbChwvlBlug43nDVKjYE1KaNjCUJns5k2nTawaxfAU4AMBU9NVIOnVg2g6pcCVKMH1AsCqtnUgdG6RFSjCqkDNBpjRuY0HgYfvpiVkOOPYDOaVGSEKworeTKNsTEkHAfxc9yVYPSKegGLnxGNxHcd0EcZ3cjGeUxRZOB+sd+rpzdgqEHLVFQ15XljlsjeP4mnKXQNVY/qxlF7oLNZRFiFpdkYf57LqAvFJluP/V24/iq6GiJZmmxT3RaFXabo/EH/ziuK4tfivbxZXErb/fIgYncKIjWWBI1+p1cJH+gYfADH1hQ9PxN6gGFn+GEe9xTCBV0+r6PjYa7inx1QuD2e28X8s3K8a8GO412rMulPCxKSWKnE/y5h2POFEwwi8n1NgmlM9fA8xMs4BHqmG0FiCyzkiGxXPo+WxPDjaIkJ/WQhjpvx2YtEgMFbBW4SSq3DQFLicrT2RS+zkC4lbUqXy7h2SRQ4h1ckxmEW47CMdFBBtX0yY3nk8xCXJhCoklInSAe9eyR+6qTKjD8Sxgv05HNBqbJ0pAgV0qtCBS1UlaosZ3p2sbJP8/qlMS0YT0lxcbTIguOi2c9MuGLAc3u+x4Rf2pRaTU3pnoSiKhevBHPbBopcmIaldpEMU7YqpqBLHTmmOQSqjFm6M0Rqb8nkVHo7l3lwThOptxpIXlpCU4NzVET1Lp09WF3guOXFcWoMgBfFxoZM1yw2Ti8eR7rEYshKmTGRlsn1Im6admnaTuTr+K/GKbs+T/cL5ukWNPR+cGuOU709GKGd37I7hprOQ3bVshtOm+k8CCva0mKUn0f2Xwt3+ii/EfBrTX2TTldf0mEWkH+8IFOB1XnCsF9i6aH7CHS3jNR2KQazUn+5GIMZrSJ1v/JyUThtLWsaN+Xzg3eFCjIJuTf2g9BSgz/LhgdjvGMN+EUyhrMGdUYV7dWVIUETZDC5fbq7hswuPLwyBIamjXSFEXKKXr0upIMhVN3JG2eotZbehajHo/8DHml7DFk77h2q2blYr/AfPk7+fLgOlT+6mqOD1O1NNfM8Sm9aSq8QDa1SHxfU919gPcd2Sl6f1fFyDqyu5/Qge0aQtZuC7B6VbymGrlt+MX0Bmq634ZdzcflZbmQcZHsYR7sJB+J8J2O6DidPFyQ98BEVOqlIVx+L97F4a9sdtTL+Into1QTeyK5isIEupH3ZuZM+RfrG4D076HR0bWxPENcOvKcdnw7vHMjXfg/wPcC/EYC3NWdo2wrE22bN5hYEhlrN/hbjUm62pncJ8afsdb1aqEZNPXGrS6g2aoJgNBJeNif6CQbHWxkCKi6jBX0JriHloe3ZPZJlOYGtpiLPlOREWUIzTaTYQ6Cr3Vwu5aEZnXp+bwAWih4nB3Zl7x6IN0ke8jvj0icSepxRQuZb2dLXHGmcVyLNvoUZWw1yIHBKdm3PPr6zLdLUZO5rQQz7IcHu7qqA7OhBHqRZKn9em7stIJfWGnI1WJx568laqJuqzbENmLmNnZ03Nzs1GT+XLLCBWYTumybY3anFad1mNN0Hfh6bcfLmAEOu7ecmRcrh3t0BmnO4xWW2B2jV5YxHAYCASwd7FDZG5jHiYyZ7sth9/qLPX3SVoDaAqja2U2tyoNnmzjDtxNM5/SLhaeB/qTigtBkcwpbjgDS0LsjNJDlUUYPI8RnAJ/z8CQuNB3Qm0syF96j0qNyjckeo7ICyIoGaYxV2m5Csd4LA/csTXo/2utHQ1de7fXtCzcYgNErWA687FZ2o1qEMDkBAfRXLeY7fWkO79IYXp8WMjt7pEtVbyEW3gwxn9wOd0p4XWDnFv8cNPDVLYJnqFzn64RME5foQIHCwQeVJTm6QPvplzyjUnDzfA51XmADXD6/kcfg0kW6/DjCzN2CBFhfrUsN9zSnv8v5kR+s+461bnRqmEzLeV2uYznIirSZBAVqyTBBAdVMQBPphy1Ed2+ktWjE2ejU31yTjXd7Y12dX+uxKV9mVNEmS2pyaMzG1b6O63Ctom7wtP3uBumrV43eMcQY/Mhy/Z6w0zyD+1M1zdudS8wxhaatTng8uzLR+niwWL+Z/MCHBuvzPTuh3/wE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T06:11:46.723Z\" agent\u003d\"5.0 (Windows)\" etag\u003d\"5kA96zo0tya_XLtNnyZz\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"WQ-3Zr3YK4imYxMIIgBZ\" name\u003d\"Page-1\"\u003e7R1dk5s48te46u7BLr7Bj+OZeLcuydZsJptk7k0G2eaCkRfkGc/++pNAYEACYxswnuBKZUyDhKz+7lZLI/V+s/8tANv1Z+RAb6RIzn6kPowURZFUmfyhkLcYoirTaQxZBa4Tw+QD4Mn9BzKgxKA714Fh7kGMkIfdbR5oI9+HNs7BQBCg1/xjS+Tl37oFK8gBnmzg8dDvroPXMdTSpQP8d+iu1smbZYnd2YDkYQYI18BBrxmQ+mGk3gcI4fjbZn8PPTp7ybzE7eYld9OBBdDHdRrs/3IMc/c8Bd8/hvevP5b7jx//GGtG3M0L8HbsF7PR4rdkCgK08x1Ie5FH6ux17WL4tAU2vftKsE5ga7zx2O2l63n3yENB1Fa9J585GdEsxAH6CTN3JPIhtKDO+N/BftoLDDDcZ0Dsd/0G0Qbi4I08wu6qJptjRmVjeWoxyOsBabKsMeA6g7EUlYBRyirt/jCZ5AubzxPmVj4+tdAhxMYuUYDXaIV84H04QGf5yf/fbrNNnveRDxNQzDaEZ9TZoZtPCG2TdhDjN/YU2GGUx5kDwnX6ihCDAGc7hL5zRxnp8EoCmbt0Lh7Y/ezjMaITXlGSHpMubA+EoWsnYNaPXEUHIdoFNqyYaDavdDIrqSWAHsDuS56zRWhnTR+RS4aSUpksm3qezBRJLhAP+U0riFnDAv2kIzmfpBQBSRkepjh0X3KkZfy9o4JltkQ+HocRfu7IA7K53R9ukm8r9jfqJNwCX9jLAtg/VxEpju2YhWlnOAB+yBBW2icdwDkjk5bAzjf4HXovELs2aOFldiqYDkB1Hn2EbwMbKvc8/oogHgbR0BNwvkluuIQG4hEbNcExgjhwhPw8dKCH7ujhE1oRidYmThvUyAb5HNHIdKAZ+DL6NKOpZVkuyFB5qgpUtSLQ1EZbilodpGodLjqJJ+7RZgN85wsMdx4+wgSLYOAWMbeoilHgFkMXcIvZJbdo7XJLp5R9ImsGq8W/yLSSf2TqpMM3WVf/fW0ldBesdhtCap8Jv7kbQtbnslLJ021xWJN+oMH5gbopYBe9S3bRm/UCqYsl8AIv9frInAdvP2j/Ez25fM7ee9in7h69ejs4f4lnt/CQ/XN01DsseJdF95V3H8/3C5nsjH2yKq9q2pEDKWlF+lQ7diBF4Z7B1OlaVv94/i+zjx5BEMLg9nyHJJZ5YNmuTSNJ4XhJ5Eh0ahqZtxLxqwry1ZTjWTGtXiSmpzXFtNx4nO8iZFu3gmw+vHs8GNt8FLh9+jB6RR7TQdP2StPeto61ydiA68Mg5c9+hCMa0bnshV+gjYG/IpOYDRcWtXwaGsy+UZTYUwpvBB6GgQ8wnFHshG1Y18lg+68TquT7QSscRLx8TMRflsFLVPtRGa/2SsbL7y/FexbyK/V76161asgFGaEVeT8mQM6r5vvStWJ6guurxEMnEwjeMo9t6QNhxbA1q+xVpaM72oR8icfRrFhrOe38bkO+p2WVzRlYEL4CNh6ZD62GbwfcNYy7ejamMM/Vsyh8zupsx2bUrp7CktWeqmm4d3EchVd0dvmcuXUIwtOLJAbfvm7PZAfMXHrgkBAQpwcusAi1a3n9JbpXka2i71Mzdn+qZTA11MKbkrxWqWHAD+6MJkfND2J/XMX8aDnjPIRSaum4/0BvuwYzhG81Z3GNkEm6uKl6uZPaqfbrJiXdvzSFUlSWqbrN6NqM6hWr2/N1WuJJHk9It6LTTvZQZW45haVOO5D3NWoS+k+fZ0fRSo2tY2sxOiDMRBX3Jf52MwnXDmx0JssSufacoaAWZVn7RRdSUQiZ2jTfS/3ons71pVut2PCCQGLyqnZlp9VTBkjJc0LM0ByJqnI1jXbDOo8wcMnkRwm2G+EMnsS4WrYSaq7FZdZ0okuHj16L506PgnMsaSnT6rEKmuhduKH9yujT4KZCI/MsqKkQszX9rumCACfcQ3uHYXiZL9YvcdLbQFnWcJMmhm4eMd6iq6IQ8sACerMU/YmPyqaxC3uvrifCeHMsTSQ9qfBO2JOZ8xen+TgRpVrtBOBkxeRi1izVK5Qwhw6SN6DlMoTtVICKlhgMwbCug2FRyd9n4IPVEAmrmQhStCJTWaIifVHln2woLXmQqci8djWGOBRVbRmn2iaNDGRaVeiaQuVHdYFGkyt9FbWm3ulXmKGd+NNFVk/W6JHaJxKRpVNNNh0QidJO6u/kdB1X1FPIvbXjjihD1XLzVctJEeVXQu0+Gc4x3T5ULpdoe8soMoWwEtPoMu+liPLIvZDrFyjky0orFP1qsvYyVIpSmL+28DtN0MU5/L+w6w2i7Igo07lCQ6Eo63THEmWo421e+T8GcOnuB41/HpsY3EoXU7o6m5g9UfAXOW6FWHKL3v2FxoR1o8aEqJJ3EKYXroj33Kc3H4NBnp4pT9VpD82OfqVAe8spw/6TAz2cb4bWWV49iM3SfWG4VTHXl5uqKGlbmHJKztvTLDJuVtJt0MEi6VaqnC3N4nLqU36ydEmUkytWvzQ3W63k5JpcdDI6I0d34sZq1yjYrqTd5nZb05u2/s9K2yiFVWTT6uInRa++nyygazXno15Wt/hrcsbXtevfEHc0vsNFH7hDM7rgDm3gjvesN6z3yBnJPLXLGeXpsubcoW8wcIAvcIbYqUAlbsolnkeeOHXeFwGKJEULhDlfxJhTb6RlX0TXuSIQ4bk0ssAXae1YGrU8d9QBMTxhFNAjl65CDktgWJIkIod7U9WvQA5TkWsqaxNd4G8VFzs3RxA1qujCNdjSr+4mOi8rO+t0AlwbeHeeuyKG1gOmWjGFfqJL2B9R6GIX0bsLhDHajErXtmfnPHrZXbiNz/Wi2AHJxdLdU6qYsfE8rDGmB4Ld0ZlQ5rbjaxOX+MJLl1BPMLHJG5W5AzAhyDmFh/Qv8pOvOl3nHt0YR2eGjR306o8XY1mxJlt/NSrWNOQ2SWlxP3PBmlldtTiKSTRjbvc7qy1qKc+WnCs+WMYggCBfnVIpGcgUYhH7F4oksthhIMAI1YZ+VGrBUfDGdZzIOBTJm7zB2Ph2OTIX9hdusSgLIjKKOdHbQroo8P9ri4iATnzzMqKa5+qvv9NyVKRPkqPLsmKjxqaZzZ0aUiMEKqCYUtrgmLgGsYjJkK/Az6EudagYu0c0vtmv6HmXExeFZkRF4WQDwzAm/ABhwIY7plq7GcGgqkVVoIiMB9FOItPWkMrvf/kFLmEQUn8O0dY+cUF9m0p1CS3Jf+lGaVK4s9fxmBTpznHSG7R+ce76eQDE9mQyqaEDmpTtjWCN2/0szTIcO5GkNXtPUwZh3o0wP+d4NG4jL0FCplvJXV5oMBh8l2Nc4jbZEWG8zgbXzWG83MRf1EE3mZJ9jGdR1WQG34sWke3BJb4M1fRXsVCoIggNxNsiNEMFGldDNBVscy4iAq21qACvFG43mn7F7a8bi383XhN5Vvjb5Jb5qlJ1hFvQ4kjM3OSWcBRalJXfJ+25DUK0mjsFnBFw//byZ/hg/PH15Z+779rd5/nf+p/fhEd/D+uiLlsXder+2MMStmsf/voe1rA1cdCZYJ0WpyhOcSE73UBbKN9EHuTANF2vAz79yNe+cdc1GKrbQ2LJZYAo1g7mBY0cxjlx9cP/AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T05:37:04.491Z\" agent\u003d\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"AWz-Pn4PjbqF4TvNf4qt\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"929967ad-93f9-6ef4-fab6-5d389245f69c\"\u003e7V1bc5s4FP41mdndmWQQdx5z7bZNNpk62yb7ho1s02DkgpzY++tX2MhGQhiMxSXt5qVGgATnfOfT0SeJnmiXs+WHyJ1P75AHgxNV8ZYn2tWJqqqKppJ/kpLVpsQxtU3BJPK9TRHYFQz8f2FaqKSlC9+DMXMhRijA/pwtHKEwhCPMlLlRhN7Yy8YoYFuduxOYKxiM3ICWnhm78m++h6dpOTCd3Yk/oT+Zpo3bqrk5MXRHL5MILcK0xRCFcHNm5tJq0reMp66H3jJF2vWJdhkhhDe/ZstLGCSGpTaj9+EVfdAT7WKKZwE5AOTn+vRNwc2gys3kvSIY4mxzRfW5T/DbQrFuo+/R8Gv85Xr+0b47Tf3+6gYL2gjf6to20EtbfZv6GA7m7ig5+0bQxD7U2A+CSxSgaH2vNrZHcDQi5TGO0AvMnBnahm4owtdIX/wVRhguM0Xpa32AaAZxtCKXpGc1kN6SohdoKRreMkhQzNQb0wwKHCstdFMATraV7yxJfqTGFBt2MRw+PxnG41/68+DTlX/39eqzdWqBQyyrlFt2Cz6lKzMDoBuMnW1HYGdLYGZgNmVm8+czs26xVjaMvJVNXWBlQ23KyiKWMAPS7MWQ/Jjg9YtvCsaIvHjW/OaPBaInTuN1z3FOLgD2fLk7SWtJe6ZNVeRRN7WxLZDiTKucr4mNMedQxldrdmcdmxa5gT8JyeGIeA6S8ovEYz7pYs7TEzPf85JmhAhiMSaD02jIUE4ToAAAAQqaC7VCEKQ+H23jYedWbbz+yxbVxcYnGMyn7gXChfjgsFDcLV1eKuRPjqMsjXWULnKUJnCU3pSjbEmOkh7Yd25IsrCoJL6HkSDi++BohYtIO+9oXcjLTTnakerov2MYPURwHPfM7AZrdk0RxJfaZnxR1pVk9y/Q9e7DYNVT+xtcR6TR18/a3xDYX2vM/qKc7wiCu1RPzi/8pNcfJ306Obw4hIz2J0IHPUqV9Ef4RMUJUQWQRAi72EehvORFt8qpUpi8NEaVoDiFrcWVof9jAR/d+OXWj/uWkOis8U3QufH1LgN2Gxv3Q8Kwr+4wgJzTcrHbD0fqgHWk6giYt1VHqprAkZxtYOidJ4oeORoGaPRCbOG58XQrIJHzN37S7JpsyFGqJgJO3oJLHz/Rq8jv5+T3mZEeXS0zp65W29rIWz5tGyIHmbuSw91t6yN6H+fEmxuN/O1zYowW0QiW5+DYjSYQV+jLoMcInHlMZH1Oe+QIBoS4X1llVOT0tLoH5K+jjfbsDocvytK0is1bpnftoJOriE/RchVtzJCraI3B7TseAUsRvxTDEs1hmIceA9LiAL+5McnfPmx04kqV1YyAWtOVuYradmXxmCaeu6FwALpT8E/TfiQZh0aT4W9qMhYnFibPoqiKnv39e75fARn63zRWQP95LGV5i4VVTAyG6dWe785Q6D1O/ZCeotfqtCBLjgRJg7RZFOEpmqDQDa53pVvRKoBjLJCshghjNMuS6ZlqZPgU7GXT5tnPqRgxS6Z5Ck05oWPZHHlZNUPH0UsqKggdAg53lblsnlwQi5ui16DxOIaNBKBWPLj9PwDrB+DBvUhp7JhHxY4hJXYcPkPV6sYOL/I4x8ZOtQfW0u6tMLNxjH3Xkx+bJ2g/TEXj2YYy8foYpdbuIiXK6YZ1U6IcZviKGk6JNNHEi6zsdpcYtJEXgMrA0bsDjs4nBEZN4Jh8QsBXJInU+JydtlP0XDpd3CO+niU1aSiWO1lRVwOiYrtoMrGvMhAnpuqGQAYSrbpoTAbSRTliUzJQTUmnfqelVR2VNNFp8ZPJdQcjtl1SUcOdli7KT+qH+0OEvMWIGNbHq/4p7kBRLTZFEM1RtroGgK7U6phuP5IbEsG9/ywLABcxQh+K1PbmfNho4kd5VTmMV2nCSFPEKrJ8oXtKE0ZKI6WkTfHeBWkDhSdbUJO1gaqX1NQ0bVuFtPFrqT9Arvy6DbZdfD0z4bU/2NoZnZkVY43OpXcqPfGyraFLkm1zFRWEXJtqj3HYvOs70URb1h6qdiVGVe0hBdApi29NDry5gYBVV72ynZKKGu5RLD2P1FIEsaupd9fcIjRPIfIdYrxKceouMBLLWmyWYlVcPXAgS9fHJIVaKSYtrSImD4PdwfI5txaQaqzF+QwPY/aGZqQmatXisU/pImZVZxcxHzZaStaF9Wt0YxbRSSYd1kQD1MY0JKN0gFq+0pxz0sbCf1S1/E+zVcTiKV4wchWtS29su5BZLP5I3i+0N9LezXYhZs+ZBEAY3E4Fw+waEHLVqDvkLQLiIw/WYNl9G/ykrpvnZHvRZkmRat+cE2Rt4NrY+ArGo8ifrxeO99cLjlbBC1qbXihWWGp5wcXw0Z/1ORBMs2+BIHeD3AC7eFFn005bDrB65wC5c8EPkY8iH6967AKbCtl9cQFtTJILEgoazGFYZ2KuLR8ARS2PA7tVJxTnycelxbls+9GdHDMF93OmyQBwS8ScrgdOlkjnPSIqGa/3Lh4BN251rGrx2NjGUkuCJiGMx3emSUgPNJV+bIl6WvCNhFYDzRZ1f5wv3uE0Y40JlR6L3jRP73oi5ky1mYotyzirO9mosIFgK9VmYw4V6vl167a+X6gvuf5onV747bG6y1uysVO+blAWrsvhalWEaxPrBrnZcJtnzspbOTnVynG4iiQB1OQBp7YAOJH08p4B1+GaJ4sfS9UFXE4d4pfTyQKc0gHgRELTewZclyujZTEcULj9PDY/npCEONuyhE/cKOJEylp/EdcFkGx+XqYukByT829Texb5dtrAkfAbV9KA1CtA8ItajmAWox1E5BuSDIn45QW5z/f/DO4/ez/uXldPtxMs+bOCg8Vs5kbNbObIKRMCrO2RieneWroGW7BWprEPzgktL/mDc+9iM8dxPuQ3cwh92NRmDrEPK3yo+B1t5uCIulQJ2sco2bxzD/5b6QyAwi8HB3V7A5VfhcPXJG/lrdhq+cmE/Cfl+yE4S6FtbjZBp+ZvQWMW21+0DLU04nuvMR81BqhCG+V7vdS9SCAPZnGfULclcYPDZgaqptfkBsANQrbzXN1sOhHjNz8b9ivxhyr6vHOr/FFLH+89f2znqEzdys5SnSmquX+mihw8wMgn1k3wImH26tAkpuq3zoqTnXbnrhx+SzPPMtX5Si+pSZbWYbPErVklG0x4SuZuOHQkTA53/53P5vLdf5ikXf8H\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1
    }
  },
  {
    "path": "docs/diagrams/ModelMoreOOP.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T08:18:10.074Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"1kML23RaRtR-Lgs46eQw\" version\u003d\"12.9.9\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7Vtdc6M2FP01fulMMiDxYT/GdjadTruzHWe3Td+0RgZNALFC3tj99RVGMmBwkB2w2Wz9YutKukiHc9DVRR7BWbR5YCgJ/qAeDkfA8DYjOB8BYBqGI74yyza3OFAafEY82agwLMi/WPWU1jXxcFppyCkNOUmqxiWNY7zkFRtijL5Um61oWL1qgnxcMyyWKKxb/yIeD6TVdCZFxa+Y+IG89BjI+X1Fy2ef0XUsrzcCcLX75NURUr7kRNMAefSlZIL3IzhjlPL8V7SZ4TDDVsGW9/twpHY/boZjrtMh+rj8SJx/HuiXz2sO/sSB+RTcWNLNdxSusZqHEwqH0xUVfjPcQ8p2Nc63dTbWaWmihcnxs+/fcJgEaCps0okYTu4nr5dI8K1CP+BRKH6Z2fVIGM72F4OzmSE++z7leaoxY8bxpmSS837ANMKcbUUTWQsdeQ8kRyey+FK64apJULrXUNqQ5Ji/91zgLH5IqE+BHXQK++eYfFvjR+T/TtKBQW+bVgX6vRzK2IOLYg87xV6gPjDErSri0Kgj3kR2qzfA7V7Inj4Pj+3QMm6BPTTCOx0TPn0eGOpuDfXrk97tFHQRd61DPBPR17CgB6Z761ahtwCsQT9ugB64fUE/7hT6OeL4kUQDAx7qAe9eEnjb6BT4BUd8nQ4LdtPSgt2+KOzdxvBznC4ZSTih8bCwt109ytuXxL7bQP4TI5QRvh0W8JahBXzT+tof8B1H8eIBv0hwPLB40hoP8Clv1ZA3a/Dg2LvLkjOiRAWsAo0SYKJS5oFMMfdpyhHjqrVHUERj7zEgsapSbS1l+EDCvSvPxwt5Wcp4QH0ao/C+sE5RSHzhah7iVXYjM+zJEoV30vyVck6j3aAEOH8Li3Frq+JTVlSF+aZS2qrShvC8G7Bl8UkNTvwuemUF1ekoNVK6Zkv8WnCjcmSI+Zhr7LoyhLRWtgrLVHaO4RBx8r16n5soJf1+omQnPuXUriZeTPMg3s7nK3uVk1cHjqDZ4ijH4xVHqiFdrVJcabNTwR6QNwijvs99F8LYE9zVJ/i5atrlU7F3QZmAAcjEPshPmsaZMnFBi6MhyKQpHXEFlRg9qaR/kbxBFrauLJzTZHFT1QXsRBZgcjyvc6oyLLvd1xFxdEb81pRQoQAVn2YVN+mOwXeigTlONvXg9RfdoPVHXnwuElwNYjGAR/L3p1LedlscDWAxcJpSRu9mMTBLnC0Y3LYYVJaCYmXofjFwdBcDeJosskgRjg+414k2rPr7FQjOlIdjtPsagkLq2+2f9Ll+9T2Frl7UpveqwZPVQG/33JXEaffVc/DkNAVPrTIQljJ9q0qoaKRXarUzRjfwaDqx8laimPWbOz43yq6/ibUmekQRdw5tS82SrEH6yrDh+NiwC+rlTrslYtPbxe6IOLzn4lU42fDwsg68aKcObVDPoVv9cLJh2GOzZXSwpUtPNJ78ZDTucHnXDYf7EIbGSqwdAIOzV/VOhGG8OjobNAjjAs9396wd6f/CKB1EuIow6vk9++ydYT0iqvm6njAc076OMJqOmbxnYfzogQ+wGw4PDCfwgSd3AXZDyH+BWEnlUa+XuOd4w6t6STmjz1gdO4lpnGVfyidRpEklZJaC3Zg1pGQi4nm71M1LQDheJGi3FrwwlOgr5YQzXLD6grLpnK7c6ZcPsxy+7dc4zCKKxX9rciYUf2CC9/8B\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/ProductivityClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T07:15:41.324Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"p1hyb1V1fA4lVid-Pu1h\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"C5RBs43oDa-KdzZeNtuy\" name\u003d\"Page-1\"\u003e7V1bd6M4Ev41OWf2wT5czMWPsdPdM7vpnkzS3dl52qMY2bDBiAE5cfrXTwkQBiQwToxxenD3SUwhBFR9qptKyoU+X28/RSh0PxMH+xea4mwv9KsLTVNV04BfjPKSUiaGlRJWkedkjXaEO+8HzohKRt14Do5LDSkhPvXCMnFBggAvaImGoog8l5stiV++a4hWWCDcLZAvUu89h7op1dasHf1X7K1cmr/wND2zRrxx9iaxixzyXCDpHy70eUQITb+tt3PsM+Zxvtz/9nLvXz+an/79R/wX+jb7z9cv30dpZx8PuSR/hQgH9NVdf9GjUfDrzdz6w19G89CwlR/bkTFJ+35C/iZj2IhJyFvjuxDu9pU4CAR/CbSvZVrKEvrC+UzxFp5tFtOIPOI58UmU0PUH25gYCpxZer5foC/tBV4sgI58bxUAzcdL1sETjqgH4rvMyJSErNsQLbxgdZ20uZrsKLeZ6BiJwLVLPxGR6zkOhstnEaGIoofkKdlThMQLaAIpYwb/gWVzZWxcGPBIczhWd8fwnzWP6JwE8FbIS3iPUUyfccye1EcP2J+hxeMqIpvA4e8WkABuNmsps0y27K3xtoDYTIafMFljGgG7leysbunpJXw8KpkIn3foBmJKcwvI1sxsUGUDapV3vQMNfMlwcwiGDAFDe7ASP3trHyVsWpKA3mVnlAIaFnAxjmrxsHA937lGL2TD3i6mIAV+NHNJ5P2AbhG8xZWaYBJFNNNMwIViizt2ZXbrCMfQ5oZLTK2QPqNtqeE1YihICAvi+yiMvRRm7MI1ilZeMCOUknXWqBkuldFxOVPgIxtPtvagm2bGuQL9Y/LpEHimqZSAZyki7kwJ7lTFqgdedrdb0PwoWAH78ttptlLBuXA7VWkBc+QDjgJE8YxxPRbQnr/oGwaAKVeiKH6Mrza4oEN/f4hx9MTU0bUH6NFMnwH2KzSE7yuaS2/Qqwfo1WaltB/fL2Xg7MNzd3rUaoaR68X3GD8OSDp3JBlaSyQ1KMa3IcmWIinCa+ARiITBJB5wdO44sqZ942gq4EhAg+8lTEjRwCMs9fUoWIM8fbwT+1eGiquRKkBDF6GhS2CQyO6GxB71COs/SttW4PE2BNQPhc6woSotzZXaETb4vSo6ZoVp7vz/wkxXolYGVXPeQWXVt1etlujSla7gpQrwut0EifECeEXxEFO+PqY8deSoahV06aqILlksxw3gTxs5mlqtyz/ozdO7aGZ7aDcEjW2wdTw9qR/JRcs49U/wzqZTuSLM6Z3BRRYZyuDSmdMmT/czp42FhPcedVPz+su/Ut1zRyOQ4KBf+tIvht63fhGT+wwxiwiDYbyJiLNZUO8Jhi/OMfNEoMcBMWcyPaRL0vQnnR4yxez4YKGOb6F6hk9nFktMihe0zjC1eHgYWIetzsPAKrZ0pS22FONnjwPlCfshDuzJT7NaY7shDjytlRVT9fnk4ZysQx9T7GSFPGXagJmeMCMLBqWY6Wp6x5Kn8KNSnjWBTHPqdUDMiRAjmxA8qZaxxKy8KsAh8WEKfHfpmrtLewT+kDk1+xwa5tilPpd6uDOcFZpmD3iRl3e2d2QMpezIaKo93u+h3DD47ToZ6WapE7vcAVkuY0y78DUsMee8xyIMPvXry/X687bNMkh3GN1bTqA2TOr9FO62JSbNh4K9nq1hrpbeT8GeVVM8PxTsvTMk9V6wZ8mz7Iz7DgBpKNd7DyhqXa7XmT6S16GHOGLuWbJOimHIIRvG9gEnPeEkT2f2BxQxqS7AYZiS6aZo4BV4kZVLnbLU05Jnp1eYZjEjiAEiM7oZygbORcXobT2azlSMPB8NmPk9dWoGwJwVYPiSkd4AY8uT0QCYW7xG0eOAlDNBii1Zb3xapIhJaB4IOd4Tj4Muk44QBbg8bCiO2UHgwE94CJewvJISYR/RBEwKJeyHy9JZy+2aXQl4YRfN2XWOE+E4zlomjRbA7Q2bClHIMid++y1tD3JgN2NMI3CGHcFTPHnIL94+6Tli15G1Ryl2xvwtgCuFFxGgHrsoxImkaeKpZJlwQwRzGbZqJRn/7HoU30ETdvlzhELJKDHYP9m4MpOP6A6lnw7zmqZazmtapiTPaEvwOO0Mj2JCXZBZ5JL1wyau4XpBKF2xbWKVs7OGJrJNk43irhZ42LrAJOysMJ9cAMXnkhUJkP9hR50lmo7NYyfKdNfmmiQhBWPg/zGlL9nsAdrAuC6xF7gavfyXXT82+OGfxXNXfNYgPXrJjg4TSwy6YYEbXl7lM0gURWDhGlpy1DLeNMo5VWZP5Vm540tNTHnW6idvnaQciuyXW1dOva7EdfumA5mCSj7QJLnZZRymW8gkU1P8YOltGWRm2fNcuZSGaTrtI/xfOMFk7C1IsPQAWtF4AXcE/QtWG34xesx+k4B/NVQtOzFKtqcZJdHn6GGkavY4BBNRRGkS4vJtYxTuD6RvN1USgxXBQ6aEzK53pQEMwx4rim5o04mqWubEKukDU9PGlugDqtZYK31EDVHT5PjQE3Ok3GAyG1TCoPnXhvATo9RAMt9RNcPt7iQ3sGrB7qY9NWdSC3gum0XJ3GAlQVI7TZqnSGTmoaz1OrMQRtlCmIoUEdJ6g86MhKx2+ECZG4PMG7yCsjNlSpyp0wq8RWYSB84l07yMtz4Cv3xRFlCxPGQieqivnHnfa4ALLDMkLOO01nZaXjYyqcyy23z7J95F6ntkV+2ksbcjS68stkxdE6EjYD3b0SlvlkW0VcEfYZbeFtOOpThP4SNsN7yTuEcY7PyqsErIdMgSLcoqhNW5sdjuC36Gn7dkjQKx15CEGxAlq5cB2YPo6zRKThbuvyfQE3VP20T7fo1S8ko6Uy+2OtYqGkYSd8iite40jGxPi8GkHE3makWvyAuPTmpUpmJqcRD5MYe5OakOcxjUvUu9Pk04SP0IUrfM8xvoskzcIPKjiZxldosi142ew4WpbPeDQeDH0+xTS9Dsdt8yl6UgB5kfTeamWtbr/Q9yWeKvPieQsbqY9N96tJDzh6M/Mx6y77uMPzvoKOHP54jOJItgKGUZG0ZFeK/NIuS7w+/JIhwrRzAVE4TF5eFzFDkCVnpczqJrFwcvZzl04UpDnL93k0ZFYeVstQqtnEjL5144Qz+WO7syPthXPAFXTMh1Zq2qqJYtQZGVKpgNqqt+wYvB6zgbLKP0dj2seFEVeQ1fWNxLIbGNjbsrnKvla9YNrWtbJFVzcgHa9Xh5m6lrkf5uXUogjO2u9w6pTCDpsr1D9FM6DrIE8nvhZrXOpX9uttgM+Gy5KclEy9T1SRmar4Z8vWO7q2aZHFTOknvERX84947lHnHSww2OPHh7psG7cJO5/ttbFsM3sjtTf1qvehRt/WmjqkOra3EPnpWT30erBnmZq7TDc9rjkZ0QWUr2tYDXS4hXxlN7ug/1MgTzoaAeMBSOjXq7LeqVAfVvQb1V3YHqNKjX3or6/vMX3Pjvhah93hDNM1eHJzom5Y6qMUDHiY68YrQm03ED8bcvwGpIdfykqY5qrGXKnNl/aqpDvi1DMdXBFs9/95LqnjTrsSOkUwDlLEjzPMC7XUHUMHwy6yNZOOUY2HYmdeNGxPsebfaW3Mxplx3ly7YLuPoMTL33Asa3A1Tv23ZDqtNjveySdPifJzyZhjTLKstW9DFfc1KK+CUYsrrK7+V/tadBN6WWXMjFyg183bLHHBV1o/fdKq3WGuYofwBQho4ONYz8LwC6KHD84mbrL6/aan3AxOGYkO0M1BUmYhJ+W40053/L8LurfdHUT6YxGkoXC+GsILe2hqNhAUSlCt7WZFaiq3oHqciHusVuRV4JnayJuL3KSeV9hHqmn2ddW/dDfGKIdv6k8h7WMXYr74kw1Sdb7H4kkcNhRJgYdikMeFn3M3GYE//hbw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/StartActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-12T02:04:29.683Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"XsHGczS-UN_y09yTL0H7\" version\u003d\"12.9.11\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"5eafA5pD-mNRI3Adq4sL\" name\u003d\"Page-1\"\u003e7Vxtc9o6Fv41zO5+IOM3GfgISXu33XSnt7mzu90vdxwswI2xWFkk0F+/kizZlizAENvQhHSmWEeyJJ83PedIds+9XW5+w8Fq8QWFMO45VrjpuXc9x7EHwKE/jLLNKMAWhDmOQtGoIDxEP6EgWoK6jkKYKg0JQjGJVipxipIETolCCzBGL2qzGYrVUVfBHFYID9MgrlL/HYVkkVGHzqCg/x1G84Uc2fZHWc0ykI3Fk6SLIEQvJZL7oefeYoRIdrXc3MKYMU/yJbvv447afGIYJqTODX8+/neJ7/0xSJ7G9+P734efrD/6opfnIF6LBxaTJVvJARhShogiwmSB5igJ4g8FdYLROgkhG8aipaLNPUIrSrQp8QckZCukG6wJoqQFWcaiNiUBJmMmLUpIUAIl7WMUx6JbmISyxTQO0jSaZkTRJOsGoyd4i2KE+dTdsWNZDqA1VV6JB0/RGk/hHgYJftDJzCHZx0jRIeNWaQQhit8gWkKCt7QBhnFAomdVvQKhpfO8XSFIeiFkeYRcnRpyjWNqRIzVL4uIwIdVwBnxQu1YlU6QrjLLmkUbJuXJjLK8xGXbY/8Y/6WG2/tY/gwxgZu9PBK17sjLbhG+Q1rSS2GIkrQo2aCkNc5U930Yywwl5GOwjGLG9n9BHAZJ8Cob8mra0OCiTMirSPszjFeLYILI1wCnEPMOKDOiWURXKLYELZdBEmZzof9xzaByKVdp6nLA8gpd4XaIp0IpAJNxEEfzhAmYToFOxp0ww4royjUWFcsoDGOYi1ouX7wrqlVp1hfXBTqDKJnTEjNjgiH8SNfJjGILyhf0XBAS+FLS6bvegGqH/781W8omhQnkpJ47LtVTjpHtNy5DlHwwtHZui0JJ283dcQsw35tbwdF3pnC+ZGpevpEhklKT6Ro/U9EoLXqDO90Nar5yNps50+lpa1V9x+m4quO0QdVzup7BdbptuU5wdZ0nuc5BXfjhXpTv9M8hXbiJyH9K199ZVzdAlO42UsCssBWFc2kEVQS8zSfLCqXZsmIxXV7alktfIY6onJjT58T21WsAmlYvcetXFDE3myO+oaU4LuBrDimbqbirUFIqn2BbarZiDdLd4wBbHacSOx1oD0ZAs5FsBoXF5Dw53YgGh30mXqDl4zo9jOGVNWmPtu5YrdoA8/aZ0bwc/62vSad7BxnTHnQP3kUtPnY1qUFRn3Wbw/OIwXOOmiEvJlQm9CkXsGg1QZtaYP2K0N8hQl8gHP2k63ogje9Y2HcEkvdUrzk0AHmT12wNyNtncZIS2hVw7nupxgztcohVQlXfFVBlhli/XpAgwf/hKOGyMix2NaH2jXYcwWfInyZ9Yhl7jJb0h3KZPCzQS3IfpaSWa77mUd63l27PKfcd62boj0p/AxXaWqAKbTtNt9jV5CXlcEwEWxTjkYxnFf1MmRlcsq3VpixVf85/weSPzC4jalEbxklMFTqEOa6iQ9KpgTs5Hp1/NqToQDddynOiWmt9g8SQzjd45F0xUxZhH+0XTNgUKgba4kLt6HsV1ZXa9ruMb7xLyblpBjoaWfTvFTmQVyyUdfMdfkf5Dl1rfF0bGsp3OANNO4f78x16e5mHaTXfYb+thMdwpLJ8cO7dy2q+4y5KV3Gw5eHwBk7XDEhwpU7XMdMGHhd/4yXR9Iq8rsirkx0sLe71PYP1mJbT1iCVZzoq0xCkgnEK3x9k8nwtCW+ATCbU3B5iGraOmpcBfuJYORAnBlYxJPAd4mXbGqrC98+Nl8H7Pt7TOBo/CLLBsBuQXQFiI7WHLGyoYOxKP33H39/RDrDeFD4GLQb173MFcjXNMPigThcg4F+IC9oZsneYh98p318vzFexbH7y6lgHNFDxkjd4bbKgcQ9liuCP9FD2HgD1FwaaSLTkZy+DGMMg3PbEKcv3CKJGKoZyXQOGGnbqwKoI+kEcgZVimyHck5s711zCNZdwvl0c29XwnO9VzafTbRu/Rsr+l8qA3sgtXplHNhxE7jQJKvPa7ySmexVcaygOPAjXpNZfzClU2zqwK1MXsLm+1pHuORra3hmpcUw3p1Pflq/SRQWGhj38Tj1VnVjQ5DOO23s9Mig7xaOc7hkGdT2DtKuDnqEkTWCQpqS9dlsXqJGaL/fij3YgltqRtOyuUk6DGluyr1DCJpXpQkTf9zVQqUusdrZR66iSNWhb9NVQbr0KA8KO5kUsxqIAKA/krPh6Ku8az507ngO22WIOpUNai+fkYCUb+opRuJ5SB0O1hD9xwj+YgWGfPnqYvZFwNaOrGZ3RjHxwM1QPtHojQ9je6WsHwzqHGQsgImLsWijk0hGFrQZ3ntynPhZQHOqnZTwxqvOpmQbimYayFs3tHXWFOytWC05NW5j6stvJXJiG6uKs6chpUxsv3aVUYgt9J/HUIMWrqSaNifHtJ0kuRGVc7US4P7BPUxm9o4Hlt6Uy5NOPz6D/2fk5DkZPy3+OPv8j/lTri2f5l7HUFOWK1VN1eiAsDK7ANssSelPRqLxmp5SPSFSCkZl/5VdCW4Jm4zQcWreTNVn//ucymf6wwfiL4VNjKWTy1iKdKNFo2Yt82X49jS0SRQY5gM6YyE4G4Plj8Ff6EBnCtoxXf2OXjM0WP1YwEwiZ3b5ECUp5EKU0KU4e8KNRooqHXP2sOa9MEA+8qgcTHKB//BBQ3jEq/7JfXpK8BJyblHLHrtnEAWMfoCI41NbO20oNOqkbp+gmk1leU1RkgsgrihgJCGxNLzLjYBSbF8taL++Ums/qM6/IaphflJTvGSUvU++oEbYlQjFD7hZNrBFJ5bzK3c21/K6cYYW5AWlQeWtQMFkalrEud7Sm2bFjv5I8Lw2mzEL4PsBsPm/dd8uDbEsP6Fvm/hWPbFIP8zgOy7qbxvF2jKM47Oo4vKiwVq0QSrpfaUtSrKu0mcNmRSp3EgXxNzglQTLP2pR3pFibzLyrWv2ICGEvIOcEnEs+K8dwVi4StCrpa7FCKJaD0ZpEyfyWJ2Uym+hLowgjTOfJX8Rh04Ip0TRfLBV13MIBBVekPtyhXWWt0yzC3mMR9g5l0ZXeoCm1FMI7XiFO92ICEdb0QCJ0fHseaKeONO2Bdo3jduGBOFFdvGUH+iqfHzbM8MuOw4bX/O01f3tU/rYSDBhCht35W8d2buTGuR6WKzGCewM6DBNqvF0jQ6zKen3w/IhYpYVBiadh13x1FvrND2tZmrhEplhbkcV6XF6NxVrciIy0jSpP8qK8UWUI4fTkSnPZddOLb7vTKDWy63nEa86F5OmPXzIXArSkl3tiRl7vx24tI2+0SNPrRA2nQDWB1bKR86RAvVNfyqh0NLIakmJPwJBS8wKAuB/+Dw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/StopSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T08:16:03.763Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"bh_8E3NdeUrf43yaJU5m\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7VxZc9s4Ev41qso8iIWTx6MtO7OZSrZS8ezGmZctmqIkTihRS1GxnV8/AAVeAEhBEikriVWpWACoJtn9daMPACM8WT79nvrrxYdkGsYjBKZPI3wzQghix2Z/eM/zrodQZ9cxT6OpuKjquIu+h6ITiN5tNA03jQuzJImzaN3sDJLVKgyyRp+fpslj87JZEjfvuvbnodJxF/ix2vs5mmYL0QsBqAb+FUbzhbi1S8XAgx98nafJdiXuN0J4ln92w0u/oCWu3yz8afJY68K3IzxJkyTbfVs+TcKY87Zg2+53b1tGy+dOw1Vm8oP7dx/m48W9f3c/9a7uNhPofbfHxct88+NtWLxH/rTZc8Gh/B1DTgWO8PXjIsrCu7Uf8NFHhgnWt8iWsRgu3xKwxiyK40kSJ2lOCE/Y5y17vGv10cXbfAvTLHyqdYlX+T1MlmGWPrNLxCgu8FPADliuIPJYidEprlrUJOjYotMX0JmX1Cv2sS+CgwdwE2qYacfsttfrNGww1f7/lsv9epassvHMX0Yxe4+rEReh7S/XOY8wJuwvw/0midmjygP84vz/nMYmVyxOwbPcdVbdgX2bi7/5kzykcg971fzxit7exJ8mmZ9FyYo1x54GDzf01r0h/eBhDKljeU4DE5hiC1EVFJRYwFZxAYlnEXcgaJBWaHDx5fat4EsludKgKMLEVx/8aPU5WnFuV3Lc0WoRJJPNmn/dLuP30SyMo1XIkRmmEXvFkN87Ft0fq759AmfwzNiT5D/ftePYX2+ih/yuOQrCYJtuom/hp3AH0rw32Wb8TpPSqoM9xgMAzwOgH7BA2ysRILDieBZFClTKWaBhP3AP9uPv6AklOPorvHXnn8Pr4K8//bsxxPutcY336yRaZfkz0OsRvZGEmaTZIpknKz+ui9Ocq50wNmY1IQ02u0DDY5XF1BvMRKNWRXyQDaPQzBarXVlcSNZPdR3V67JgtaLL/3nXqsBl90OrUjMxZE2N9ONozk1uwCSZi5wLK2IOz5UYWEbTKf8500z2Dn6lqSqe/G2WCKWF/ageArgBCKpO2lgDCDQYHlwFD+ETs1hZ+KYS1SZL1lzOVc9vXXopM/whybJkyQbC1fSKu6y8L06Cr6o+khuhj4zD6fM9nzmBBSgter5wUVkAwKLj5kkIb9d6rrdqep93xv5DGF+Xbmtx21WSTwStws38dB52GQXo7S4Mpw1XW8VATciFIUjDmPkI35rOuE7KgtpHjtEanFDTviCAmiQ2yTYNQvGruncsEcIusWiDFHQkzO34oJDKYVe+5PFIpO3e4+CWCYAgUC3T+2QeBb+ScbJhEwJUna3oQMbpYfZHln76+i2O1l83i+RT+ufbD9p4QmIxV+W1+auXcbTg7Kgei2rjLNL0k7QTuM5JGs5iO616cqQrneP8g79ikX76azjTNvu0ROKdQDTWJDXqOjdKvP26c6Ir/bIMbqY/IHQtgJHj2q5LEaGehv8q+ymElmc7CGIICQuLIRlIGqh9bjtSZ/8I4/XCv06yj366eVXbw+c6WnhKF2PYCw29PJXtxrR5LCw5mMAsGFYc0f6SUmq+gbld2zjr4rtJdJOsQzZ0PfU3izJzyIZF9t/tiHsOjVE6RbNz/jsuxKaRy4lhCgbEsh2v+jSRQGQJm0YtY49Ynmez31PX5fnOPXQHDmGKab8/M3/HIu9Jslz6q+mroT8yqMGSq2DrU526yAa63ummJ726/d+Xu79xdLecPLz/7/3y4/2NNh9+wbaeHsp1p8l0AvTpZQ3L+ylC6L1Mez/XWwLKw9hycJjpyO6s2dTo9ABPPad0lsyMU92cP55TgjVjhC0XesCjxHGwa3uYGLHKxRZwMLApRraNcfFAvfsUWOfF7Wz2Zu2vtFkrMSvwjFU6f/DfsMdn/9j9gfbbb6NG6bNePl0mq2ST2++W6ihoJsSK2YPKKxwoe2Xem9fny1bBApozgfXc8O/8wSh/Tco4t+9aWF5boOYoMqgis+N0OVIN7BhdDuymRN5kk+JNuMnS5Jk367MeH83nPd6fG2DeA/Mm/8FXsUiC9+K8t7KsxY3K+ZzmnC2ecod8Ez6UQyULKjWg3GSUV1K79rrPVT+p8VIoRjmGa0NCQbRjvORe9M9r95cFlDdLKdU7m9gR1ykgK/2ZnXq0+DOXlKswnwz3mW9oEeog1yaYuSVgqGlPteVr7ku+bIGnO9Apyz/AQhBJ1R94VPUnfIqyHUXPw6K9I0goEu2KHm881xoytVbHdG/MVcyke8tKxUzyAmUlSpsrSZhBaZIwDdBsF0mEzCIyhiL/uXaZ0PnTYjatchzvEvZWY3Bst8kkrI9QkMaE0MGSI1iXQT4+mN00o9lfPo7tBONhM4sOF7gPXGifERmErocEUSXOTtYjKuUXsVkQBd3BWNWeD3qNBV5jgddY4IePBUpjeHIsAB3P8uofZyCjhHXrB9pn3UI59i99rqkEVwiFt0IVjJOOrRNDR03PgrjGQre5dgNTaGkK857lYN2sUFzbf9nJYNPBBSV/j5CDVIYxm4fRgMvPsbrMsYvlfQS4h7l8LxDkjakUdhCLONh2CZMORTaGEv73xnyGdPorwmkZamDezlbNVTEADcV9omxd1JQtBlVIeWgM70hbjXS0Bpapqr0bRajDLrY8tC7fCc2TIx1gAdttGtliCdWxwCnISBWlZDbbhIPI9LAFaj+pnjpAXnaNkeT4maqpnLNTCA2so1D1an5IJe0tHTGAkhYLqSTMjFnoIHlOveitPn+tyjkvJ0iJvWqf5fnrDHIRge8hYbGAtIekLCucYQ/J3qpAsar7BfxAAmADTdAFli2thDU2QsSxIAHlR6WMa6PFXqiLKQZo1+m+cGx8+IInj1qwucsMY2I5Zw599Qw2KLecbdavKoL1eiB8gVrg0G4GLep3BR6IJ4vYVMMJkDeZD7bGUo8gNb77Id0MdPqKqJ8oGEDt21AvZyUCpooPcdRKhFZ7UV8S0FlQehEvQdL7Y9dsu4BIhCSUDW1ADALPoSv+nrQmGdtqitTTHNFB8GBVgcMWJJ8xQVrIqz6ZXppyjKXtaAhbxK35uVCKzoz3N+DD6A6sOthgVfDPn7PxiHSEg3weirElxHsIDSxOokY7P9r2J1ORl64SxP2kYLC0hUlZh2UKAoQc5kdgymAFoWMTew/dFkxUdHt11vTH9GiswOsxX63HfM3cIAyCMgvQOH2If/qJ+h3EOCK5aMS2Cse6fv6XA8r8gHz+F+jBv9BiBrVi5pjFhGLNyK+whJAbxt7O/QI2sbzmpOPoivNnPfXr7Id+TSatLO3E7rEbnbHtlvn5/TsC5BN8+lNBg+TmQIw+xPL1IwLJIWdqZNnISATMjjo9pD/1r6GawSAN/Sz8mCbTbcD8kSiLwo0m58E9nDvRrHh/W/Xqkl1xOBNrTYNoNX+ft26QPkqr5r/G8VtlguPL6LgCSJc46/mOTsgOnh+VFNap0LLHn2uvTbRlP9ruVOFqR7Nfl00N739+V9+2hTdz6iFrsLmYxpFT3sa7YUA3nUvw7TXpdfZIlXl6frOuNXpLztbSrMRpGp0zH/f3AukjjzQBRuRdUqYAgxAiy65VWLFMlzMToGKYGOGvL2yZ7Bzp3fwcL+cThcpkIR/1eaRUZXgohPqT2+P3+N9X8O4a0PeBR2/v332ffeqI99sOZtQGc0GQ+3z14xgPPsDRJPz7CQ9mhMBVAjemy41ccKHMNfNk69zbofYLqpV9UcETC4MuebvxJU0GkpMA5dP6jROL0mGeCqH+rIb2hBtdxudVxkW80bToUD7v29ijlA83kgmdc0mVFgaXtODnxXwBR6p5o2NLRpTa8touhdbAet1+/Gw9537WCfdQxe8E6ut6HF7p1W1ROz5fL3IN3KWToSK8g08iG/ErpPT7PN3OA1JCyXglyVCb3vHwaeY+d/CWSDfP7it+uIMUnmu3+CKvrMcdwPaR2D1dU/Bq3zS+/Qc\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/SummaryCommandSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T15:21:27.306Z\" agent\u003d\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"AoDXCqmWLwTwxuO_dqVC\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"6CBEmQj96PWTL68cha2U\" name\u003d\"Page-1\"\u003e7Vxbk5s2FP41nmkfvAOI6+Mab9J2NpNNdqdN8tLBINt0MXK5xHZ+fQWIm5ANeBF2N+sXWwdxQEefPh0dHXkCzM3+fWBt1x+QA72JJDj7CZhPJEnSdQl/JZJDJjFUkAlWgetkIrEUPLo/IBEKRBq7DgxrFSOEvMjd1oU28n1oRzWZFQRoV6+2RF79qVtrBRuCR9vymtK/XCdaZ1JdEUr5b9BdrfMniwK5srHyykQQri0H7SoicDcBZoBQlP3a7E3oJcbL7ZLd9+7I1eLFAuhHXW6Y7jaPwcfP7vLZvv92eLh/2gnzqaxlar5bXkxaTN42OuQmCFDsOzDRIk7AbLd2I/i4tezk6g53Opato41HLi9dzzORh4L0XmDizzv8RjMrsEnniiouNl+etOc7DCK4r4hIY95DtIFRcMBVyFWgEcMSZOVdsiu7SZSJbF3pIi2vaBForArVpfXwD2LAPsYU+BrznW7emeYw1puqYqv5DG1U84l8rccRilNNvTYsAoYxVS9KzIJwOxPCzC2j/hsnHIQNAZbppypSV+k3uH2MNxsrOJgIf/lOrgy/W6aP1KM7DJPeNvkZb7x7dwk918el2RYGLm4mTJ7vEfFDKWvrWMz1kYVvCYqy51nb0F2kTxWwJIB2HITud/gZhllXJ1IUR8mTzGKqEJooUfEnRckgsFDqsDAYsJAYsFANbmOswyCrWHqLXD9K30GZTZQ51XUoiNZohXzLq3Zed4OeBG5nKytKzcYaw8YsEwvcZgFOI+/VDjnTFPBnoCGn6O1DThh3yEljD7kTBj2J2M5WlutDrjBoy5iTZW42Zg26/7eNqamjcB9abFx4xcPbWGm3MXTw4okUSzPeldIqp1ieu/ITOoLLhMhCTD6uv7pPS3NsmRn0ndtkCYeLCw/ZzwnLFA6gkFbADftC1KWFr+RKv16JrGAFT9XL8ZW072TnBdCzIkyCNfpidQW59SFB4tG5rHAOcg0higMbkpvK/sRWsg6VagTfRx9DcaRYXzniH5nCEitFC8+HDwM94PYlM+OTFT7PY7wqj9auP7cOt77zu2+jzdbDI/YhgI5rWxF8mzW7zJqy2jprFqRfY5tcODzbqNfO6EpfK4uiXh92HV3VIWZNV1nEfy+iPw079p42Dw//fPgadllwV4bFHIZRgA7tqE+qPRfRMsDTooJ2U2dMAJo2BaxpktcsyYLti7z/hOZMwmpOQXZv/NaL30Sjnd9YqwJZ5IUT6eo9VrWvlY36UJQYQ5EXvTEbwAptv3gohqWPgZ2PJ+RYbwvzLuAA7ctyhQEOhd8A7LDzcdkBqPW1MbUhwo59NG2s8/IvOiwYR/Uvehu0EdW/sHNhcGG0wrt4Y7OuwCichRN0xkKGwm2yA6MH9vvSmdHXyNToA5emsw4r0lHprLdBqZCicum1Ut57w/EZ2Z3E3BB70atlsiH3KEH7ymjk/RIw+sqo7xZlgdtzN0yUESM/7Baw0gOO2zhpqGtb3i2J2C9QFKENO0JfxOSLAP3XamG+r5UO1VKli44E8Qm8szD4qfblqWKtgX3S7tbAfqWn8gnmhbH+qaqoNVSI9JA6Eu1valKoqbKhKbNDQ9NQsf0cPVzhdNPY5OkNKLh3o0yXIQNSTpXdCDopluqSwqFSGBCdnbed1MuhU6Hywwp3rDc6gdKiiTc6O6xDrxudkixfIzylrruiI8ATdNwqbWoShRZNvOHZb6erCzzRFuJLM8cK10WyJL5Msh71CtamBLgEauKNgEdLX6gd2Ya/AYo27rQvdSbWkfbzm+A6m0UbgFelcWGq82NRAkaxRnqyoF6A9K6Cy+gQRleQNNBGK+KNEVaAkjuVlXMwmTdLBlIlaVAGuhpioXtaHoxXGpo4YwZwXDsUDpWuqzVuUbWfhVtkKtdLPpdb6HBsQxFvnAwfsujFLQRCJbcYAnid3NLY9jqfWwRakzzufHQRzJSudXUVJ/YmnGNutWiMHExTrwyg0yKRPPdz6MMc53vVwrheNRg+NnH24g9TmmGcj1J8ex2nmj6s89UOVKkrUMWRgKpQQFXpvbTOQKWPazY08Qbq8FGKRhAN41FQ5DqIBEEeGURdp2PQle1IF2IXQiNr6OH9vCJolcPj3DkbGHJdkWJ0wlmpKK+IlssQ8sFiv9StwUlT0CjaVMcMz+a4uxqWo7eQtXNnYyC2KOLMcTIrxJXlECzK7IFagkKJuDwbIbkwzTb0b3EFUdruq6kK7JQG205zaRopDeT/NI7kMRTixdHchgjuE3kj3STf/fZRmuxQ3RAnovx0lo0Bmm6a08No4zpOeqSLlQlRP6d1FOx9DnbSU2lzC511wp4O5g93zPd4Mh5nsCTpCqz8l3u0cu03sCQdptHe0oXBku+AvoHl+sAi067TeFhhphl2SH/ilWZ4xsEaoZ7ZJDPyx3jlFMofJfjl22L2UVM//VgA/Y9Py2+MM21btI2xfwPJ3yj88uvrhfJUVqkzOOJ4YGZ2h9ToDjd8XKPdT9AZgHZYGCf4B+oLXCz/Ryzzhst/YwN3/wE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1
    }
  },
  {
    "path": "docs/diagrams/SummaryPanelClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T05:42:00.005Z\" agent\u003d\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"GmKA_lWBR91cKBwLczPt\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"C5RBs43oDa-KdzZeNtuy\" name\u003d\"Page-1\"\u003e7Vxdc9o4FP01zOw+wFiWPx8LpGm36W62STdtX3YULMAbY1FbhNBfv7ItG9syWIANtCHDTJCQZFv33KNzrwQdOJi9XAdoPv1IHOx1VMV56cBhR1WBYUH2L6pZJTWmbSUVk8B1eKN1xZ37A/NKhdcuXAeHhYaUEI+682LliPg+HtFCHQoCsiw2GxOveNU5mmCh4m6EPLH2wXXoNKm1VHNd/w67k2l6ZWDYySczlDbmTxJOkUOWuSp41YGDgBCavJu9DLAXTV46Lw/vVw/ezZNx/cff4Xf0uf/h/s9/uslgb3fpkj1CgH2699Dh9//C73fLbvdm/vnb0sTo+t/7LuRjPyNvwSeMPyxdpTOIfedNZAhWclw0I75zP3X9DuyzD9667BpwCJISt76qseKUzrJPXlz6hb1XejovfY1K/P3wJV9Y8YLkI/PbD8kiGOEtz5miETsFtPCZusZkhmmwYg2Wa4wAg3cKsIeo+1wEFOK4nGR9s+FuictuWlW4Dxla0oM7kG7pxRGSm+ed8gYsjaNq5YGM4kAUBRNMhYGY8dAq12weNQg33y/Q7crr8OHYm2TEtJSbv3VVDL5dgKi/EiBqJwSi2hASdfM4SDT06uu0isTUyySR+OiR0ZOAwTzomKXveFcS0CmZEB95V+vaPvLcCYPx0MNjBrH+Mw6oyxawN7yakvlG7IKt2GWQDVa5TlHxa/6zdbe41BLmDa4YElRsaajqks7B8ZHewYF+AWyrpxeABhW1p+T+1P38BJaoX7VLDrfBTxqDsl0P5RxSy8B7JJSSWYJtEe77QSuDcZ6Ae9A2tgOZFW5x4LIJwUE7INUlMbqPkrCa4e/ywmwoe/I3KCkJw5DD5U+hJHSlPdBz8AJGDuZuAD7AXc4F+Hsol4aAb1glHVDmUVngm2UtLknIP4Vw0eFOwmWThFbOXUJrTauJFqQ2tIsA0Palal2vGaghxGpKkaqhVcgmtITY3YK+o0ntlKxBgarXzH0c2awpkkBP9fWRZbNagiYE+yY20hzjqjTwkWSybggwBAIOAxy6P9BjXFSKsKsBVaYoPPSIvT4aPU0CsvCdAfFIEA8Ox/EfazImPuXMC6ohtdWReBKV32YnS11Gt4RfjogNJpOVgk27JZOS8TjE7VjTlLAmmw1aNGJIA/KEU5v4xI/oYsxoplSVGnvELBJJMsHcM9dxYq5ZTl2K7+YodvJlgCJqiQ2Pnb0IQ96IoOSZRproya10KbtMc8nvFC5Vdi6YaWebWK/eJoZmnZdNLPU8F99MYGpWIdPVU6ydcwRnkgAD6cZX3UpunmYlB6WwyIJ7ruRQrRmoscSCUbwOV8Wb7qusbkvt21G3lkQ8dtaqImWIE6iKw5hN1HPbmI0vIjtR2SZiATXEcgbhsymbjZdO+BzIPhoskca+cYRu1wzUUqxcxz7lbNBx2Eci99+SE0jvAeywldWwE8jmkKQX5EPzRSUfMLU9fUCzawZqOZZOL/+KlX45+jLTiPRUSt8W02yvzSbl6Ov0NpHJOf3aNtGUUpYitdHJbCJmKQSTHHm7fLe5r13OZBVdKtuVHgTF3Gy6ydT8Jh8swQGads+CuUMYpQyidExq7TbuKTZU1r3bz48CcX/8HoVP4Xt/RGZzD1M8XOB74qCVAP5w6c48lHBOFFLyTxQZwkmyO6Op6zk3aEUWEUxDysLWtNSfksD9wYZFa7JDQRq3qkahxV3Uk186jqHxbeojoFT1Eb0UGt6gkPKKEfE8NA/dJLCNOs6Y8V2/zz05bpRnVxZUDwYRZtqkxZJ6UMQ8IfMVkRZ1tSVaTLNXOcB0Y7JhoMmgAt+wqr8eQxw8R3mCG5dNsmp4kV0jdLH3E5pNmrjE1a5rbObfWoOrwUA2jxiyJc31Jzdxm6G2rvnEpyyqIqzv2IuZesoWROzHix9FNJeS4Y7ObkHvsxeb+UFE4jq7pQErg3WZvaLmAR0Qnz0QcmNgYIa3JQ5pJWS2e2g9ZtIdM0MOI6rRFkZE2R+TyoBTinMhlJMRiq5KMIpxVEYRA5KMUUqIufBKg7yiSUNnC69UIaU1XhFp5W4xYz51oZKTUInwFRQohmywauEBoLWt5Y1UEnOFNH8wBMN4cyRjogpBHI+2US2LQ1SRmcy6eGGvzVRwCHlVYrN82qgxaIoHUSJgzMl8wQJlzInst98v1m/D+mlWos76sC1iMg/ehcyOIfYUpXAUsav0FFiTOYpL9UfHD9sd6cilk3I20KscsKGvRxRVrl3sL5susovn1oBmFsdpef9EFdczThQDFDgX1VOhehTFtltVPQAI3w/TxRAKVIZQbbGLKrJLtLiEXB3HSmOTVN5hfRnqV1a8Kvzq60vmd4fIi0oIqG3JC01M5H5kz//g+tHPFFyY4gRMUd5rABUqBNgVILHa4gmtOnnLeeKWAcIrkEVSc2EMCZHURJa2EgztZVPUeknqubFVE1Onv5gCOlt3mTeYONtj5ja9j0w+7ALB7lC0O6ywcXzS8ZaELnVJNH6QtC3Z/mTmTdOlteZty7riedPI1afIZ1ZoJNq8+PZm42sn9m1DPLywldIveuAkkYOqyMpGazNQ+PU+RYey/Ql74OyCliZcD4jXUyWAiTxmex9R3I8OA4UCPhuIdU2JH5+6sNMWV28+VmmJnEyRnPbY07tQ1hG2eKBaPLdkV+wWV2KnvUSqxEn2S8p8i9M1ThMNZDQ+3H57fxto2rePV18mT8t39Bk/dUUBe95nYoWZlXVI6TOxOmjtTCwrrn+7MlnS178ACq/+Bw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1
    }
  },
  {
    "path": "docs/diagrams/SummarySwitchTabSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T15:18:05.871Z\" agent\u003d\"5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"FiE-kBiL433karabY7LS\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7Vxbc9o4FP41zHQfwtiS5ctjAullN5npLtM23TcDwvbWIGpEAv31K9vyTRKxTWxIS3kBHcuydS7fuUhiAEfL3bvIXfv3ZI7DAdDmuwEcDwAAGgTsK6bsU4pjwpTgRcE8JekFYRL8wJyoceo2mONNpSMlJKTBukqckdUKz2iF5kYReap2W5Cw+tS162GJMJm5oUz9Esypz6m6phUX3uPA8/mjbcQvTN3ZNy8i2xV/3gDARfJJLy/dbCzef+O7c/JUIsHbARxFhND013I3wmHM24xt6X1vD1zN3zvCK9rkhocP996V/+BOHubO9WQz0p0f5lU2mUc33OJsHsnb0n3GoWSOOB5FH8CbJz+geLJ2Z/HVJ6YTjObTZcgv57PUWGMRhOGIhCRKBoIj9nnLXu9GfnU+m0ccUbwrkfhU3mGyxDTasy78Ksz0h6sd5M2nQoZW1sUviQ8Ba2iZXH246nj56AX72A/OwRbc1PtkZkSoSwOyYs0rR8HdMbq1x0Y33L0y9KFtVRjM1GvoSDxGAA4tJLNZN5yhYffEZkPBZjOkMUsIm3KMFRlXzO/b2L5uSsZZkEwv+YbX926w+hKsYl7zgdh7pWPxPqIYmWTW8c/tMrwLFjgMVqx1s8ZRwKaI42eHnPyxoNWJm0EcZW+S3J62w9Bdb4Jp8tREB/BsG22CR/wP3qRIGlPJlsZPGuUIqdUYoqY5jqZ1oyq6VTVESzbEHEvLGmLYWk/qgeqtsMT0NQlWNHkFdDNAY0GKJKI+8cjKDctyPBVvgY4qvNWRirkyb2FvvDVb8TaeacBc7XUYeDFuTQmlZMku4NX8OvbdMS0ks28yG41xHRvxvOLYZSaWmJTxI8Ihw9DHqutXMYmP9jFWjpI8NLU4shE2ZBvNML+p7IrFcQ7JNRuIupGHqTRQIrJ8hi/wUw28/s9iItktnJWGIhBQmYjRl4XoDYKAWHUnvFmw77aglr2Cy40nxIvYFW2Y+whW3l3SGgO1MRVRhpZ0YBN74MMlja9qwdQbXaqYDVSr1jpfaorArMpdb2aLjFPuvtSN6/bh5yBd+ZyDpi32h5qgUukbdGvP4GBENC1CmPoQiRumFCJ9+nAwLsrJ04OxErNkqlbpGVOvBC1ER7EM5vPEDqI4znGLAEiGIndLCY+F9I4gRauisyEjClQgCugNUbp3umSN2aWbubvx81yEXebZuf0MMuBdQGMo0Ya2DXk7QZOhk7fHuwx44sa+1Ch5iPGzOJNabxc4k2U02hA4TjWluQLdhAVQVBjn2LgA1Ax0IC5oD2rVQMYwnRpQE/rbdSCoKedxZP8qaEp3i66cLBYb3E/cZB3E2SMzzzviBbN7d+V6zCYuIvc02aezIpBR1Zvz55660wqru46sn2Hu8wrdmOWGkLlozcJtIIZn3XHc7tw7Hp2S1kfHVkOv1UPuCqu2ktdt2jopsfIqDdRz8gpUCdaLQPhPHK5994bQj260+Y3D7XEYCbplN8VhUXU6Q4UMBH4SHG7P8iNxuDfHB05fGSynImYlFdG7yESeFVRtfpJN/wxIbwr43LAyIo2jo5qB+gZ6VSH/eKCfkeXSjRdrrydb9ivajzjhN9y3xB7TPhABlMHHVkWBvdVIgCoze8V4j9ry3K6tSangvreoO9v1cSn8zrHvbP61XWLZcxEwW1DQho5hVxYVhkgDGaHwvklrX251VwnMZFubfDV2yS/0v5ZQlZBQr6kDRk7NQD074CyqfxU6d1BB6pNu5zRyR4JbzAOx1nLXagbqW+4NljBPVVKpXwhwmpo/aqgGXAoMyhwTSajfUZBuiDI+ds3AELWupzUDJOzzAdU1gEM1+v6L8rDdfp+TeUbbtKqe0Xm1nrExQuamATTbqKjDlW52YxgiisJjUVS0MIicfgzDUL9ws8UrXczWxen2aDiqkPJFhVSeUbNMdRvS33n1oGXO4Yg+wZLdj7KOqmcY2P1W2/PuFGub5+UqfWwd9YR59X8LHH2/83/87dG39vRp9te/t1+b7K8s2csYb2hE9vXmEHf7lp9vgH0yFIqJs6zDqt0zsK/EGZ5+fbBUmEZW94Xppu4/q9GcoQRt1QWlTZ24BIkNo9uufKTRfSrUTXCJhOASmWanwWVtzNhYu16oSo5RDTQhMIaWfpw2iWoJATqtNsFXpE0HRd+3RKFd3bornVZovF1OWHaWBupbnK8p8zybOMVTEUh05Y3FWTNO38uN3Vc7awOFDNCvtKFmm1VE105dLmheSTtfYAEdIbw8FjvEMoM0UEfVAcNSP6fX8wBIFbUccR4gTr9UqX6ya/WSjgRAVJsmIkVS08VytzJNbBCV9pUmtuadJfAOKnYL9JUR7v72P6GpH+jv76fA9T5vtp+XiuPDeIdnW4p5+epNofCbdKdIQfijgSqnXMzwfkWSelbZBXBSc5VXia16xKsDOTlOFagUB+mMnnRcKSY5uOJiulD5AGE1WHUY+KQCkmtV63j/7GVbkXGonn8uKckbo7KNcBcjA5W7PqkM5BJkBmXL+P90fmFzELcKgnObg7zmNasuWl2KJOC5jULxJwQXIgpdOEGDFJsLTysKOZ/wmRxCzHdKv/mFEQrYsCIM4+zCAJdqF2KEC5E9lFcPOxIGaxb/vZYWXoo/uIO3/wM\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 1
    }
  },
  {
    "path": "docs/diagrams/TaskListClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T08:00:15.109Z\" agent\u003d\"5.0 (Windows)\" etag\u003d\"hQpyoxJaPidHceXvDuHf\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"AbNtG0UdLms8ibHrtGx_\" name\u003d\"Page-2\"\u003e7V1Zk5u4Gv01rso8tIt9eYzd6cxUdWZyp5Obm0dsZJtpjDyAe8mvvxJILJKw8SJw0+6aiY2MBIjznW9FjPTp+uVz7G1WX6APwpGm+C8j/XakoT9bQx+45TVvsS03b1jGgZ83qWXDQ/ALkEaFtG4DHyS1HVMIwzTY1BvnMIrAPK21eXEMn+u7LWBYP+rGWwKu4WHuhXzrj8BPV3mrYypl++8gWK7okVWF/LL26M6kIVl5PnyuNOmfRvo0hjDNv61fpiDEk0fnJX15SqY/fn379z9q8Bg9fY/txfwmH+zukC7FJcQgSo8e+rP758P97J9H03oxv3/+Z33778+EdFGevHBL5otca/pKJxBE/kd8H9DWLITzx5E+QU3kRlv51l2ADqXfKmirmKVsI43hYzHvaMYmMdxGPvDJ78BH94ocCoQz+PypbJhkDeiHJxCnAbqh2aHS+PV/uPPYpJs/0aZKN25f6MjZ1ivdegnSvJuhWmT7Z7atKHS77Io3qj2/gjhYgxTEpM33klV2Cfiw+XzhC2Hwtudmkf0SuI3nYMcd0hwiNF68BOmOHXW7wCQSZgDRGcevqONziXrVIvc7BqGXBk/1U/aIpC2LvsVwX2GALkZTCCvc6JY5Vo28G+EFTWeGya+M9Kzikh9MZwdTXaU+WH713GDoS+Vay6YM+geIgfo+xKBT4FKG3QvcHOEdAdfkgWsoxwLXUNjBDNVtBVwEJe+1stsG75DsOHFNMesHcpTdJ1eIUNsOmsN0sPZ1cPnLN5x9sn5EH8E01/ugL/mEnpUUtCspHEoKLWW9BXsYZnekYLiIFHS3/KtjzdWPVmwc2RgKM9i5+MFwDuQHQzlQ3A39CNG1j+hzDK04/VCEfqWIs9sN1L/cyyWW2h1FIH+RBZhtH8sLts4ZvLbZzm44F3ANHqcVLME4XcEljLywCqg69sp97iHcEGz8A9L0lWDb26YQNa3SdVhArBCFCEaAxz666JTuMQ+9JAnmtJns1onharUEYJOOOgxsB1O9btWZ2zL3MTejG5gOcqjRvCLsdISZSj8I0w9EGOtsdIIwqxeE0UhSLYpk7o4hlagsMVcC82TEdY4Pg2EgnTinjfhw9BM7WI62R6e65q4OdQS2775PH4ucifqZay6j2RvMhHNJhd0z70pBeAtO1c2WnNoUJ5UtM1oNFioJFEllSOJs19wTK0yxRR88oa9L/PXbCmTTljyi01fCIMFnHUTon4ft7DOCxuYb+u2etON9PPT/IghTECPMFF0WMVzjgbLh1l42QnW0bCjg08HG9FTQlVXORnCCtGlGG/6aJSB+8mYhyAaip/Lht8qQs7J3ftLkvADCNj7pbZKd+wLGxW/5OMV5zWL2BNgzZeQMuW4bkFkeKRaqJBcWFesGLwyWEdoIwQJ3TTbePIiW99nWrarUhel5FaTgAe2Cuz/H3qY4GHblwMtZNASFpcV72zpNeIkcqVU1V6YpzVJS47VDgesKgLuD1Upbj7X+GrV1zaVl9Hv7TFCTQ1260GKHWjYZts0ZNbnQdYyd7DzzQV/TYYaRneBRdgJItrE4dnS9CsE95iIFVQ1SJcJ2JDlZgMoGWuvspKGfqHVP4hNV7ff225pduf03x6Wdj8WFbAy0TvRZVi+Wl6rXA/oaCei3dA2aundGXdphyrCn0Ip0pjkLeASeHxbG8s+o+4Eaa+KcK1/DeND0OI1u5e795bgPNJfdG9D8wFvDyOd8yVoYj6CxGsPrAo9W25SnKQm4liCVzpbNNMQajkBrHX6mYe+Da72DrRjy8UpltWembIPO/YHqauavk7TbWcIiglhyPe5h2KYcQtUU4XGaq1d27i8JoP2k3YgZSr+3C1kXjq1hFenhvKdrOfs8EbzFmq/dQ7p1muVkw/Qk58Q2ONrKI1wg4eCSgpe0fndpaCnO4zITmu7/SNrXge/nOAJJ8AsHzcj9IBKFhjUnI/N2V5CJ1GaTzqPCKKreqR2Ab4wvIMfItOsGF626OpV2NG1salXDTq/bT+7Yqo8JF4sESDHgtX5SoYXzqZlVwd8p9j2ondbJ9lMDCA1AYdI1qinJ4LcZA97pwICnsjVEZmmovSiYRbPcM4UvEZVwVXxjxoqRyB6CJI498WZIVL15OrJRAxIh/eUjmmYmxVL5hbvdyXOwDr3M8lzAKKVkpFTu+xzdAay9uRufYgqazFdB6N97r3CL7xMycOePdGuygnHwCw3r1WxiwlW6VdvjAfckh86QBL7Sm68WTfdekpJ95jAMvU0S5JDBu6yRiAbRBKYpXNOBavS5o6gO918gu3sKQxhnU6N7SG9knJnvWfnFdbEmwb+Q2bur97xzpp+mUzKllfZF9ofal7HnB6D8jdj+G2oqPeSJIXqm5Cj3QUQvdQ7XOLea/bzEmdZR1duVkB/i0tkmnxzSldITreWHrB35IXLIv7H0R8sQlMdU2WIBp2U+SmNUuofzeZGXgglGQyJFOkWZKn1E86n6R/S1nq6kyUQspI2pRELGTNpQLIf1ZKJRtvxNZgY3QdR3EWYysEK0DaJMRlIvbaTtCZrgKeY5RODaFG2r5XbG6RtklExhhHkoyBAGkIw+Ayynu8SPKBiFkbvCT66KHGlsBe6DHi2hyLJaY5nF1tmsf/rY1K6gRZgRQD3GwJLYHqwUypqA41tmRt6oHIB0HkC6ACyhNwPhV5gEaQCrRgKv+3fhhGHehTMH87mIeWeOaZgclqQBw9Lak5ysHDgNnNSAgcsZkDk6RaS2hPErLnlQcpahTYPjkrYsUTVjNGnIsNsjQx5liB47IMh42M5w0U1SQYZY/6Adl/XinoHqosvCj+tcAH74gFNutKy9R8D4EBUccd7F0IBSAYBxCeaJSuPFvYLFFoCF1sPlnwH2Exe4Xq0smKOf1AH9bwCeL90vtd+qX2rdneiXynMfBUlKgTfnCrw51XSO8R41xntURce7EO9RFxXoXm1/ybZ/UwE4dQrtlvjUm+F5GuOKYgrEvPuAe2JljKaz1Mx5LOEodcxi47I0snQNvAcLgmCXEAvStK8hKmnAWMDKp2Kb0ezEwABwKXGkPTCx+ThSxzARBZHyRx8+rTdpNU4wgzAEXjREtPSOA1XhowMdA6EpaDTHNm0QJR+wrriioRM0aLyv3zEa+PwvceInr7fIsm105Xv0wrRL8sK0o7ywzr0sU7BkisvHDopYdd2M3Z8Rf+NJOsPixOAm041/oXvhb0HBhl9j4CMop0CcpOOfIRpyyKvZJzuZOJsWzqA5Zt4DE0JXHm/yMa8cMLdb8A36WeFPK8QMDC4tzfGLBJWp9w0qPthTgmoVJD8AeHy/TPSWoWW7fUOLjxgV0HpAxziAsa7IuiRkqXTVz96gZfIBqMKF+AL9bXh1It5JKkfnl8ATOhniWLk2dCfD5ENwmIPXmYxMoQ/YYowHUNRifCl3GjARsyQgP0DTtHzaDj9DGJ8xm8F7GrmKonXX/F9T/k8aEOh92AcEWRk/ky/oyrjDewTfo+DfLcgJAjHGh1GttLi5oFj5bdD8wZpovfCHKTDOuuUPvpDrJjufdFWqlA8IKuVWGfp/X6GLY6oADWnIEdgxYuRIM+v5zABGDs0SkSrSJuicljV6+yCRhgtV4TPJHQOjec1A+gmi7RrEXqb8mwv+ynr0a7Ffpx7irfnJyfVj1x6iYC1B1WpZGuG4zYAeRrGfyQfpbj9++zRoEpVu1+95vqtlKZ80NrX46NmXv26/3w/vrh9eqdUzNiw+H9QxNviAEf9MzuUozEwZvW2F2aQQ94VapSlMR+VDqm1LTovY6HA1Jn0Kk3FSMhH501uXdRsPaYyfmh9gzPRSCmCbFgouVgXom0zFEbRsDW6Kkj8QMS5BPAkif6Bo6R0HNAnSHw7EEbFMkf2BJOnliobu0GD3bn6Lo1yj8nUH73aFjt7BoSq9G+B8WWjr7Ozl2OW6Mli7vBF75KQB+yb406xxVa2bxqIovWofiNBmS9w23LFj7T2ipgiOyNr+XRjjfE1sKRjTFbq4jDxBhEB+QeIxgEqgzuO42pg+uVK8S1WAS12AS3bxxHaSoBt1wROW+bQRvC7EQJQfwfl2GOVC4KPvH/KvzQpkb3K+URzezCNXssN7TetV76jtESFWWk2HxYf7vwZRtGP9lFNYsoDF8UT5ZldllFcyKcfOsF3uteCWYFkp8Su3jkqTmdjSqKyFzB7dahm+0Zmjd7HAIh8D5AWHvHgtWHt4meJqrZzYmqCt90wh24yANa9wmyAJWGaQFYEmO9jHZINmmwop3VgELxgyE3I+t6s03eQFW3fov7kfGeNgDqNFgIQhHs/xa/PufMTJ6AO3J/gTRvSriV8Ak/1w4+FXBtxk5XY3sxtVc8YbvFhoRa5UVq4yts+vDi91LPMhRG2s6m75x9i2xfvma7atgJBlraenila9uiLpApHkMkhi3r+k9gwkm48b8K8Xa15Oe78O37+eNl7unb5fUqpMcy6xoD6p07nnvdChzr2j8maC1TP0zV0hs6NWl7yGBgYQOTNM5u3ZLp8HQt7XwQsX7ggZOFzwTHhQ0bNydI2ULmu/RIsoDjijIL22p+GFPa91TLWAnyqrNp++4PYdaCpVIIyCioBONZXDW/tDnX6dKemxbAERdjr3fNp1sHPvcBVc/U//O/JPFH76ReTf5fRr/PRTK/iC02RvP/p7cdWdJvfeKNU1xoJQqyPKpB21KtdbyqRpIpt4TyatWpIzwAdc5S84f7DdLASntAdaHT67OlTVZdTfO87mZAQJoU61mMEX1B5RJddnXdRwn1doxKSkuihsZDXH41XREwtnLJOyOOdS1QRHFCrR7sukjBZZpiHpKdmRnqbXvu7QWCLsSQvz6Lyv+wX6IPziRd7yzDb+AIs8GtKjdDGGoyjzzlsHIcbH7yB8AngGj+HSk1lTt1nzX0RbojILuhzNgUUeSr1oT8iSF/Jkl877yLgwP0RQe1jB5yg3MEh1fv3VQVcuPZpL9T3L7vb9FgO6BsA7sP415nXgqrzqGLQZQ5hWBTj2NqtMS6HG/wM\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1
    }
  },
  {
    "path": "docs/diagrams/TaskListPanelClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T07:48:01.948Z\" agent\u003d\"5.0 (Windows)\" etag\u003d\"AuHkYQHh6vvx9cAD88Xz\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"6jm1_p3PXTMuOE5G0sXk\" name\u003d\"Page-5\"\u003e7V1pk5s4Gv41rspulV0IIY6P6SvJVieTmp7KbD7SBttMsPFi+sqvXwkkjA5jsDlsN12pihGXjR497/0ygtfL10+xu158jTw/HOma9zqCNyNdB4auj8g/zXvLRizTyQbmceDRg7YDD8Fvnw5qdPQp8PwNd2ASRWESrPnBabRa+dOEG3PjOHrhD5tFIX/XtTv3pYGHqRvKo38HXrLIRm2kbcc/+8F8we4MNLpn6bKD6cBm4XrRS2EI3o7gdRxFSfZp+Xrth+ThsefyzfvD+Hyf3P4nvh/DH843Tbf9cXaxuzqn5D8h9ldJs5emk7tJ3tjz8j38+OhmFCeLaB6t3PB2O3oVR08rzydX1fDW9pj7KFrjQYAH//GT5I1iwX1KIjy0SJYh3eu/Bsl/6enk80/yeYLo1s1rYdfNG93YJG6cfCR4wAOraOWzsbsgDNkJK48dMQ3dzSaYZoP0EHLrWbRK6PcCEG9XfLJ0BjbRUzz1S44zDYpwN577ZRdE9MGTp13AKZ25T3609JP4DR8Q+6GbBM88mF26Jub5cfmp36MA/xJdo+vXQXBiw+wstoBt4SrZl6UnbgGEPxS+yXYohVUNiNFH8uyGT/RXSJjDK2tNPgbLdDEXsfLsx0mAV/PHMJiv8FhCMJaP3ruPfvg92gRJEJG9j1GSREt8QEh2XLnTX/MUrddRGMXpveAs/cOHpDf7uFlnpEPw47KNWfBK8H1Fv8/NIkkIW30kz0a/m3orYxJgvpoFeB3Ekym+o37nuYmL/yPjG/J/tGIfEdDpjnFKaOOY0M34cQx0e7JezbklRX5zTjTkS80weAtfX8N/jpOekrj0V4+BTY70ghh//WwII5WwV018k8fqv5bike3Fp4nAshlzvmx5lnHnokCxbEyFYg58dZFm7UdaB+zWEFNtkjj6lYusLrgLVeQuC7TCXfiBuG+FA9aEkDa7qc0AgIMfBIL8q3c8/pB9g0PJL3q0dN39bd/CH9Hr7HkB/n5Yj9k9C5j0YvdlIwETr7uEx5FLGS/OVo7EhMvA8zLE+pvgt/uYXomAiz44fFl0NUI3FDl37jIIyU//7IfPPrlSdQixhSXSQ6610btzipGKNsbaRAeQpw26SI8UdGPgcFcdOzk9sYtEs9nGb0XE2RfDM7qCZzx3s8hlU8OkY2kVScfUToJ0LGbWvOXmQinp7DmeJ529Z0NRdGbPV1Ld5AtpwtfQhAu1rAM6EgtGjxs/fvbrEOEUQ86Pj2fCA2So3SABAgOBZijPMCaGzrOe2RXlMcHWk+WYW4s/RwVjUWk54pmN3wonkc2f7HpkY3tautWwxdkvvzI7cz+/2ifBr7aFOECbRjm/iscjuiCaUurUbKCfglJXFSm7bLuDlDfbcZrhLp2ftzGEE9vujLxgr+RVw+2VkxcoUleByaqQlxe4y2jlCfwFeP6iDLclL60PI9SoaoQi1DRfHeV6AMa5IOpc3RPI6tdSkEWPqNqjajp1bZPDFI0Ao30RB9C5qHcXoaYxl9p+cDceN6hKe2r3liZpQiPdDJPUG/2MP86zj5t16L5t2C7iLd/u5U7QmIKER//3RCJrV5mqlG+y02Yxcbtnpz7G4sXEW3RuZB7jbmOL73iVDWtsyLGa0dgMc6LxHlQAJo5wnRZ1NlMBtQvxunUhPisbgo0rVmo8QcuZOIU/JBhywJlohT+9FdkqxgRM1KxsfZl9+uc5WIfaj8WzF7x8gcnboyJMVdd6bIKkquKLLbtmXF+gGW+/Ayamxc3cGOgcnDCgOmMm62KIqGu9p3LMsXm95zC+cARdXCt3TyEbHXU82OP+Miyr7Pg94QXD4CNxTmtBASUPwiq649PacxO/iurYqloY+rOO3HVNxlqBhfgZZsk4R9IvEwrsqhaYkJBS/tedUigHlqRJHZKLmkguqkf81ROJkMFjyYT0En0lEekqWhog1SiknDYRBW00QTYvFmHPmWks2jGAqmVQFXMgfXeTtIgzoEGSAimZqMyA1cyeMVchHXLA3AkTGbJ50aj3nV+rD9rWxbGYbfBuOD6LEtkqyOXilUddPtw48JhOOADvTKkMOhrnzdV4ZmMhzd6YDQ5FKuduR5o8pIy+hSXsJYLeWXhKnXqil+ee1Jv8vd5jSOXNfu8xXd5tx7RUVVGWKeTkNhS6wvfiZbUNTQG0LeSFWLJREQabpE7w6nhX6rHxddhgfF0zWDnLsdhxROSMgTXpLIhFwXPpdAVG1TPlmmYrpyJbwcZTsY8TZL2EN08mFayD3IzKcsxoJzejtuhhYcat6CkPU0onIGfPCbqGyk5oR7gZQyC/9cYHJwNhoSIOmfsgDEtPaAmRrPDsqMK5hiqID2BAo8loNtItg5uCZhQvomZxvgmNz6mw4IQF5dtXw4wKLlbiLVjXW7/HP3+g2ZoqIY89JNCzuc2S7wcPzmm4CHMg7/fg9AaZXkpYOSncmexvWNxXziZuvkzrIHHvIEF4W3ukvSYqrHVPMPboEw4sPb4ddQI5F6PgdtEQp6pZ1hLIFcXOQtjE1EUHUUPORbGsGu6x1/Yc3w6abVVU8N0nkKJdgvcglRtBAXKjRnydtsllzmi8Xk+LMLpo3HMqRUUitTVUv900I1bt1mM3HnA5StNjjvW+Z7UvAcW6LJ1Y8ySklUgJ+WxRwwKCYdByDyNdJW4GC/N8klBMoXhHN3v2WTi9GKCt01L1nm4d6c1I7KBgCjNatY2aKZqRRjUKqkuUedpdTnVW6fcyACo7vh3129ElPuw+FaAidJ3G/KCkCZLOakuP9jyDCdJ2O1XHZnfxfyRXKDw8Paau5r/cza97PLOytHsJlqGbqp2pKU73aKMKlcqZ+JsugtC7d9+iJzJ7WLud/mJbV4soDn7jy7qcH4HSWppotD3igZxJb52Cxv/OIAHyofs0kzY9ZhqFobveBNmkk0OWeOUGqysqdrMLcUzLyTKFw42Xbq6OJxPlRxb2mHdkoukjU4nztsSfLZCEjhwGr4IABI5CAgIN7sX2n2QRreb4geZ31AUfVx4FLt7PVElcIWXKDTGIVtiMvyJTsmkF/7IlOB6RdxrgBfDNXZJflepN2kMSB1jVyV8KIPHcHnLLgL9Zu1N8mfv0mBtjO/InfQpkKMLnzsIUdAtMif6KaUs7KfEKf6trkjKByVG/xttgu53y5RorDNdYm0tiN0jhRdLLX/w0xbwE75S7FWrczJ7606kEdGqNVsQy2pWQJYM5B2815IpIai54ICfCEbwQnsmh8gVz39yPr7B2faGQOQ0wsEBOf2CQw/QpGIjA+oLX1OsAiY4hwfJUu4CEsjNWL37EU8hyrJzLRp/QqXQy63O+DmxnbNXqZ9zwRLP5O5uML93i06vNPa3bpRM6CWqZsigR7bDv2OQKGzXGcoP7cHvMPCF7DOz2m1K5I/kibVfbXofbg6zcWlPWHOwy49h83PG3ukG3diqW2zLzLDOvGmDeIEfh52TGYFEYsqyOelYe0oRmC/rpWnns3XWCojbFN51H5MpER/srSELfI6vs0vWzPBlDoZrxJFINrOau9yTstuMUTRJU0GxNdTdkv9cfaYYtefqZ1yuL/MvesB05AH16xawTY+GT8YoRP2/643yvFJZ5OpclxIocWwaqVdOg2M2hAAj1DkCXbdr8lZrF+xkCZ3dAokaFpIlLYsndVize82gjA9XJi63v6lJQpAp5AO1G3nGv1ZMD34QEr93YG7TQQQtVEqiO+LwxYMoohio+A8DYDePLUEItfT9/hkGKkNKwfdUoKmXTv1KnxBhIjAtlxoUKdg2FFBVWVSQHZWsQawXM80kkx6kHVnUg72ZfNW5be6mpqh/hFUGLn3zxPnx7Wj4W/cm0177vpX7nf+WO5+cI34X8GPj6UaW1XpLAbtqsqY8aWBE1rZk1rFJOQs06Wj+FmN6IBL8N/SX+5ZsPZCN15W1+DYjpBzGswXV/iFG1qCSIcdfr8O17HGC1Knn76sa/MBuveMgMeOkcL7Zsj3aLFyi70jAOvuLn9jcWRnhWKpoGehd+EePE7IIDtKA9ivwuxWjtxwGecD9+yBYQ+0r0cvepnpl+p2m0JFVX6e45qcEaHRI3qpGPJFTg59VN+wxddJiLRUhGgorWhqdiIbA8qcFC6NxCyGmtuoWg6F2o9M+0ZSEYsn+GBDUW7grPLnNXf7hmMY5tuEPU9Q4S2CKITkpm109pK5PsrUEIVoRQa5UIpsJcuNZHHzUCnR+B/3JWUZDBCyhwX8tewJrBFQfJTRKRLPsrCeNqsl8s/zeciulhYn1Hs7JfmYjUc7u1UTFzzCpPHeuulcVRb1Okz7OxzDXUeHHrQQlNllDOZqNm05OU6DRkQbHAXxgzQHbyzJ0mERVIJ9gOtHTFNVIcZBiIL2anVzq2VMjUJ5pd7NMuvIIJaB32CpVz1D4RpcD3hhS1QS04VC2Qci5sxVt7GlQKpPuZ7L1lRTXcVjkg9Da1gtJs26KCbl25j8TqmSYj66bgeRXWYplPtkefHDy15Vg5V8lxaK7SjvVzZ1/fXl+XrLt57HqBv91HV/zpuuoAECqoTUW7P2Ar3gpi6gctzXPy1anis5CGRrJeC5o6ozALoZR3EjrbaEkvnpecJY8J1Cpx3F7pmEzsAn8T90t2pUGdes/q1O6Mf8B3ZgU8VSsyoZSRQrPk7U2XkXiFVFQ9hFW6CKug2sxcOfGqJF/wOGZWpdAQwZ51FPyS+MsPsjs8FftEXOraYxSFvrsinqLlOiHRlguT8W1mRNQHjKK5RLcZEYzl9paSlCp+Q1OV8y8fMYVGdyrzpbniEcMkLzze2U3T0FRtXlR+jXajHeo1U6Gp3iXRZKO1JDnhHNU2pdNaEuYPEGpJBha8QBaEOh+jaJcFxQo6Va+pUyG9CnbIQHr7GOR8SM+WLYlBMTwvSqyPOhX/qFAn8k81toNGBQ95FXLtgO5sVWXBQHfVgJdzx/nQnSXbwepkwpOlu8G1LbDkaWUKmOK7czSoMnGbSxUwxHgkUtrUOpywF0pwDC8stC40zP3dfIew0rD2SleZbhsTYO7MOIM2UqwB3QR5bu/xeQDnFFxiDQ6G4FLnwSWzkZ4qO5DbWtmOKXcQluJLhSrbIaZ0fHuy2jhRpIfswklrnWSBLMvlZqW786v3y+r9GdakXmBDX7RXJsLaEkU2Enx7liwH2npzi3pOZLJ/f3MivlRFqQ90Oisyo763WRHfcWRCRU5zp3Mi1wqAyeTf72xaDCEgbCCZwGCn0yJ3b3hvSwU6IoHpfROYLgcK3t2sELOSt/pUgcNup2XQwMQ3jAFDoRl3OieDBibNiaIoo9s5GfQvIL7zylZI+m4nRaGAvbtJEexHk7Xg7G1SHGkKeivyL6/xb6isf+ecCz0ExOL/epDY/8Zk+tz7ejVp3Rp/Q9BREQVOqzX+jMGaq/FvgkSOrfJnS66RKn9oiJGJbOvoF4I6E+bEyAv7hfqGRsr61fNeIRd3eMH1cS+4JimI7Qk6ZPIxOqT1rKVD/d0rH+JL70HvczI4GcQ5gbYqgaTbWRl8DJZ5aitl8DFYDm85QU3RqrDLOVE0uxyUlLNSUmyTh5SqzU+3kBrcVgAIzZgtVeZDp5MyuK2A1Aan95UyRA0BECov7L697kh217y7SdFFhb7vlYJkNeW9TYplSC+i7TuQq2i29O5mRcxE6X2lyMWw721ObEsIT2langPR27QMtq84LYi1l2t+TvBmHEVJ0Z8fu+vF18jzyRH/Bw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1
    }
  },
  {
    "path": "docs/diagrams/TimerPanelActivityDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-12T02:08:46.542Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"2f-c7gAzdzB6kHzOL-xQ\" version\u003d\"12.9.11\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"H0szr-YYsvMoYDqsZBnE\" name\u003d\"Page-1\"\u003e7VtZc6M4EP41fowLEOdjbCc7Vbuzm5psZTaPCsg2M4AYIcf2/vptgTgEOCaJj8yOnaoYtQ6kPr5uqeURmsab3xhOl59pQKKRoQWbEZqNDEN3LAO+BGVbUEzLKQgLFgayUU24D/8lkqhJ6ioMSKY05JRGPExVok+ThPhcoWHG6FptNqeR+tYUL0iHcO/jqEv9GgZ8WVBdw6npn0i4WJZv1m2vqIlx2ViuJFvigK4bJHQzQlNGKS+e4s2URIJ5JV+Kfrc7aquJMZLwIR2ufPy4DR+8H5vfY/zw1yd/Hk+upHSecbSSC5aT5duSAzAKMBsKk/Uy5OQ+xb6oWYO8gbbkcQQlHR5xlhYSmIcbAi+dzMMomtKIsnwgpJviD+gVJ0QvOQHCONnsXJle8QsUjdCYcLaFJrKD4bhjyXWpZahk+rqWWUlaNsRV0rDUkkU1ds1IeJC8fAVf9S5jZ2GWRnibAZWRbBVxMUYiFsposPJ5+Bzybb7uRNhQSwp7eM/oKgkE0wtJMF9akqWJYhQuEij4wE8CwpgIboeg49eyIg6DQLxoknFGv1eKng+14jQrxhLFDGYQJgsoCUFyRsgtWFRB0SXlM32uCQlZ3wRgUeVKHBC4/WMllH5CqoqKNELXjfqEA0u+kAjzkCY3Pa2NaV3IOGb8Wpj8juESmuzqS5LgjT0zsoiFmjY7CuxqNPFX7BlEo7QYObO2IbSsZT6fG75fyaRRc21ommGJHjThUs65XYnyLY7DSFjBA2EBTvBhLEy3NcW+XGR17cvrMTB0NAOz9iMXW9L4aZXtRy5FDi/we4eEDgFhnqUw2HHPDWD2AM9QWg1AS4SzLPRbbG1z0vM0+BSWzbb/AFEbW2XxURTLwmyjlLZlaRPyRjcoPcp3iee6kyiUfYppC6x5WTawNLpiPhmgdIA0C8L3wn9X2g1pWj3SLGksh7xndcJ9IpZvuKOhgKDKWl1dtVazpSXFQmWvZsjQGgh8tqqVXmugghGdgXKNq5b9DiV0fjUlPJfKIE3FH9e236Yy7YE8TT+tyrgdlZkygjn4bw1iEfh/p4Zb9OmbiFov8dYl3hoSb/XEV+0w7BDxlqPGW6gvHLBPGW+VgcawnaIaW6WiHkR+z4UddjivaRKQO5yvag4SYaksBS/QYSk6KUf1ARxtmDJlfEkXNMFRw8AbQCT4VLf5g9JUSuAb4XwrFVTAy1D/eMDAqVza3sDJMPuFONi9vU8k3V37C85jillw8RsXv/GB/MaVrqsoZ6Eex2GeFObQLwRz5lCYs84Kc2ZHJF9WSQJg8HcYEyZOKGH64uueMwERYmIpIxkwJDdxETbPxczyd3Gcfc9yFQMNg6bFUKJCjmbjWMBg8pSlFb8vkHmBzA8CmaYzVvestt4TGurm2HW6uGkfDTe7B5zd4ENbpQGEJ8L6gANiG04vGYWL2f0UZmdoY6N16K17fbvcMXK7dmcezTkOOfj+v8QrztB4Zcd59onile4xcGtb1g5fLod6F8j7gJCH1M2ZafZkUd2Tbs66p+Udo/mZsqiO17oIYlpnzqMa3gB3sieF9ZaEUyO5ZVpqemusmfpoT4pLlO4IAzzNwW7Wezz7apd0ruyW4YJeaPVHzWqa+lvTox7w0mt8Wqqnj8vDjxMlv1DfIb0d8cLnJIrWlUAqgO6qcE4A1ppupJtcojVQ24v825oscfYnWedOdmTNypFhpsXgsl1bu/ONiXpRbLArZQRmhp/yoYSipYJzOS+tiZhCx7UOQHPjMFijO8YYOS0874JNdSB3ErRBQ3IK+9CmRA5dRQ1rH2aUKNXAqBqx+lHqNFGuOzTKdc4JUqiVoDK1N8JSpYZl8tBqDXRsFOpmUV6thANubbxSPYcr1P7bPTtOb091VaOlJ+0jqMF64tgvD7RDT0BweNtoJkF554RNo3/CO+fVal/eOqrVtJjBYZW2L01xONdJooxcfCZC5l6H2Wc5x/OXA26RvgOq3hW3Hwve9vvLwbccz4uDLX/pOAfyl05b3Q6Eg/o5YO0A13gv28+jbj/Rm2/nvrj9RO4Bt59QrH+oVDSvf+6Fbv4D\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-12T08:49:36.697Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"BdjCBTQ_Hfngy-LC46tI\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"e7e014a7-5840-1c2e-5031-d8a46d1fe8dd\"\u003e7V1bc6M4Fv41qdp9iEp3wWMu091T013bNZmp9OzLFolJwrZjMrYzneyvXwkjrgKEDQY8pKZ6bIEFnPPp3HU4I1fPbx/X3svTl3DhL88wXLydkeszjBFyqPyfGnnfjTiQ7wYe18EiPikduAn+58eDMB59DRb+JnfiNgyX2+AlP3gfrlb+/TY35q3X4Y/8aQ/hMn/VF+/RLw3c3HvL8uhtsNg+6efibnrgkx88PsWXdnD8fHfe/ffHdfi6iq93hslD9Lc7/OzpueIH3Tx5i/BHZoj8dEau1mG43X16frvyl4q2mmy7332oOJrc99pfbW1+8Mm7/fnXf38Ktr64+s97+Mvtx+vLcxo/zF/e8tXXzxHd7fZdUyh6Rl/Ngs7I5Y8nOcPNi3evjv6QmJBjT9vnZXz4IVgur8JluI5+SxbMdxZUjm+26/C7nzni4DvCeXJE016S5dJb38c4ceS38nPGj/6Xv976b5mh+Lk/+uGzv12/y1Pioy7Z/SKGqObIj5TfDqfAIYLD+C++xFOG8YK5wM3+xRiM8feYXDXlgfwQs6ENS0THLCkTuMAkfgHhhw8mJhEB4dWVPLIOt942CFdy+NyFHXEFMkAxwQWav+sViIDAFBHhEgQJpU6JaZhjAAU2sMoBHEPuuJwxpCbpi1XOsVl1IamFmYlV/IOiYU+sciSrGHQwzWM/ZhWDBKCU2ESUOEU5Ai5E7oCscg2s4kt5F5d38sPjNiLUbuAhlIRSGkcTl//5Gu5OSER8OpRhth5UE5xvIhF2IU9A7OUt+4vd1T6Hj8G9vqR8pt1V83cihzN3V0CW5N3WBB8NilW48gsIioe8ZfCo8HEvEeHL8UuFhEDqxIv4wHOwWKjLGPGaIrojdCGIIMAsEQRFSUAE0DJASmGHl+DFMKCI0jK6MAc5cNGe0MXg2NAVG2ozuprQxbALSEZ2uSNEF2lWM8oSfbGnVmJPe3d6BlhPRYGkoEY8Rzsi5X66LDEsC37EBMCUGHR0RNVUuWOnL+KhZuLlMddaRzcuDLmyIXRdaEZ0Pc+bcZ4lN6UASTQPSG5cKQnbCb5EVHnPigHL8rdAiZcHxSY9nP9JTtbdrfWUvweVYnEiIvBQwOijHEhAsIKubVzR0i4niZM/iDhkw4tD4lJJBWkX67+8hzkJwdjK9R+PYGQVPBy7YDS59fsLxt+DL97Ke/TXpynM7Jk8cWHGeYlT/uLRv4m/huvtU/gYrrzlT+logabpOZ/D8CVm7n/97fY9jqJ5r9swz3r/Ldh+y3z+Q00FWPzt+i2eOfryrr+sFhcq3qru6sVf7UY+BOpx9XGbqN0mfF3f+xZySZGhlvNrf+ltg7/ycVwTg+Kffg2DaJ3p8JMrAKI6fK29AekM5DDD89NuvfWjv41nSlkvCeO9Z057USdsurl2iq7dVVKsJbQ4AH5iSPjBVvCTT5pgVn3J/Ep9TX8WfTPA9m4Z3n+vwS1SOmvhbZ6ScN3hKN4BxsI/6Q7uh8kjU0izPpLROkJh1nQQci4NAYOmm8MY6ijkSpvlHXBq1lJjCl4INqiESaTKH5kjDRIGAuLirJQ5lyM4GakUNPLbV38dSLopvAyiNBvFDae9aNe2CpByDijDeTQjyADK5nxIFn2lOeT5wCXSFdN/osVs/ahTYZEQ6j1SR1lmyVvH0JHLAWMpMTU1szJDzkx4OSXXvRLa38OvZ8vBxD2PxKbOOY6VfBbx4gM8e0OaP3HijcrVkkt8P89+TISnlcbTPj7+Fy9Y3QYrVTVyik5+C37HR7kDoGSixJvg6t+8+hCA8axFU16kHAIqHMSIQ7n6l5ShQiDAVPtfaq6eoOKY4uTH1hQOBQLriL0ujpFEzqbDSFnUCWkOUe0o5IjX4D13R71pSriE6e0k3Ajo3a1g+9XfvC6318HmZamsxhOUbS04rY+SsnunNFvWhGXltVgZ1z6Wf+eMIBtjFGSEUJAujFSUj2xl9ZuF6U2S7WerjYDe3aZhbl6fnz3p9nurxmqbzYu3MkbL4guqSNn68c77h8S6/E8+HjR++qf6GIXRojDbg/ccLN93P38OV+EmQkbulDQSB1UgLj4U4eh8d3p0cBVGaDLk4Fmx/ptJiqvRqHo5+aY5wCIeyJFr9VndOFNUZpJxTeei5FyNwb2mwek0O0YnR9IDO0YkB2IZlfxsB2zTjWWFk+HuSjee/DS553R1MCXD0jN5Zpr3zOOgzPhuPaW/IZlj8ZJKDmaPyaWUPmzmBookjb4mdK2nM2lPZy3M1IC6u5xAU4M7ELJYqKkRFH3NCrZ0NBVu+grEFddQiMxvCsdjAaiOW/G7yM/k2cz8HBN/aC1/lFyKaBhJK6ZFnz5nJwc0mRIRWDyghIT6fBVKUbhaRBNdhm/ZC0S3rK+iz69ESGToVQIgZWakscoYSIZ3Zp8aig0/NZg3/dTB2PirQ2IZs30AJzuJWQ6wdLSIMlSDMtwVyqLBvMyPzysph0QV7tTeSdj07YsSJmrTIzho0maMVQk6pjpIVYK0C/KMJ/lp+6xKqLh2V2mUh19uQ7Hww+8/X4qHP88Z+Xb5+ZwOib79UoZn+xYlKNT+9hTUIRelQqoAv/2wjGDsgWWzhUZGDFqKkNxmrW/8FD7fvW5s/eKCFmncbxUXJXSTwSdYOblOfnk5BGA3oxFK6iCXcRpEGyCLEvqyHM4urf2XSWZBVLKgMentQEvhnS2cgGWK67EDZbwxQyudgXy1YoGdu1VdkvHlyY1BfVQwO7CVAukqLY6QRbx+3AiyVf9DIsgp7KXcD0ANZRWYFkJ1R0aSKRMxKSTZlrcOiCTClAeS1sQLsieUMAVF/0dt2s4V3NtV2HYHIIt8xbgB5I4fQBS5IJtDRnvih4iMJ6wBJBgwedBHA5BFf4ZRA0jvkhgzgCSDTfVqrQHESZRwqtqmBQs9Jo6LJDJo8X1/UZaOSugRspV0fcRciKNylZkE8hF3glRcu9fSVSlnZzTW0UeL+f7R6ADKHJHXeoxBwMs9VjpHo/21+0WjbgQzo7ECjc6AspGjQujpeKLRfOmesTiCqn7BEcBOwZdyCpawoVZz8G3myNh5qUC9Ee4zT7k+sY3mqKYZ0V4tOMSldycp7N1vz8S1qZ/GV2+9PckqzjYYmPg+dMTaBdZiphyoO0td7OLucoeoxpEF+6nrAtVOtMIFpcXKx/z8to6uQyiA0GH55FJTTqFvB9emU8sYMDUSqBDG0n6WmaC+FENV6/9AfNRnDHqHh0Xt8wyPWngQKoDglW7hYfBQk6fV8wxxu7KT7vBhYTnu7O6dZdOKqYeb5JKvGds6Cd1w4NS2E6SQAYdS7rpxS0LD5vwKi6GH1P7+rk0Dzw5vsUUh4G7B4zmvsIfGtckgiVxObFdHCoepbetAuFun5zdv8/3KWy9O061pweapV7IK696pg+gQgh3gcCqSYou851iRBhurNhGH+pBtjLN6fg9ts2l9JYBT19/c1kBjqpkJJSIBSj4q2nSZvi01caijd3KMb1hzjXw/Fucck97shnP24nTcHNWBHCakMcM4NQdyGjRaRwu94Sq9r3MLj33E2tQhIJtVL79RZFzatF2hUS9CdSTFil2toqOtEwu3+m/Cuqnpw3Z7HY6qD0fC0Ux8hmCeyspine/p68PkfRhTqFI52k610grYwWMfk6A52Wfb97KvYsLWjS/r04EVlfdVq6NptgHqCDGaalXr2LCdREv7rvHiggOU7AnT2HELrzu0E61t14Px2ubtA/3CVic/52SknfZHDAiOcIXkkazrYgOIOS+JdBL0WGoeT6gdglbzqWZPtrF31CW/KyvXfru67c6WpNZwJM30bYJrw6YB229iN24vhvnAijvOVnsm127/FGHc7yhqddRbkjDL0rG9kMAVwMFOoaIIFqwGQ63j4ElBvYPy1JdllQk3rmXpdpu5/6jCz/5CJfA/B5vt3Jlx7sw4d2acOzOOjT+0lj9zZ8a5M+PkOjNOzValsFDBNsYCtsTuOiFjtenluZMwW7Fu5DaloNBp5X5cy7BQD4H0A6HTdRP6u8hGnn2e2eeZfZ5WdJ59ntnnKdB+9nnOZp/nBHweCgWgjn4l4ZR8Htem7/O0XB5jfJ65eWaM0c1BcNC2YO2asbdpxLSvU7S/v2Jsu167APou/DF2JOcwX3yTn7Sjsh9j08cBeju5plTg/p7Y13W4eL2XHAm28zvB6kzB2QubvbD0wOyFzV5YgfazF3Y2e2En4IUZM08c5ndDGSz/wZ2wpMPoCXlhDdslJuGPkXnLUTnttL9T5tr6ZD103D1wffbnuvTc+WbE4poh5REX4jQjE9c8+OPHcvUVn9+sLj78a4nfL24uzrW0Gt1r2KnrgOxL2KmhIljty2emvfbHK0K1aGAyrLKr5/rU+nW5pqqWA2rxvaXUCN76ixes6uMuU5Jeh7J8Or27zE+KhxdpxiQKw3KZ1PZ4PO4KM1PPovHZGCUarmDdiCSa+cZN+0cPl2inLs3s2T11aWZhYfQtzThiwCGkKM4IAg3t6Yc3GJLX70xNntm/NH5sBDcpkMMF2rV3Ou7loRzXRxGQcgvnV+UkZNoIXoxjLnPhBDiZLiq60/y4TAbrZnqWwKvq6mtP03GJIHeaIp9XsGH05O5H4M9V6XM9RPHu5nqIuR5iLPyZ6yHO5nqIuR6iQw/I3gCaekzHopHMMDGd0TlAFRshR98gq57vUzPxMTSlibux8U88qmPP8okLtSm9eXsKBUYxj7MFRrUJu+PXF5lhMNeZdQoDXIZBvU4cCQ7YLA5a4KDvHVtMCGXt4ZxWYUw+ZPZFnflZbZvtVmQH6yfvrvWuGX2mrHoRjn2/jmFcnZeFwwFyYGHvHBUiZ0N22nC5YfK+MdDfy8UmiwGOgORV3rgkgoCsy+fsCwECCCO0zdx9I2BCtkibPcgLb/MU3SEaUqe4rgMoc0QeTdQhAKNyJ9+ONwK3urhxK7CtgGx4norl0d0roSxCHQO+Oo0qosH0zWmFV6dRhgHNvpikHE+SUwAOEXW1qZt7aRrKi4+iCunwrWm4N21RJn89q4dWFu92tB/Nu7eExR6Gvwnr4lV5LpdV9JqN/VQ5oQLIpUuSRV2IK/astvkx+TkuAw1zEsV6K3YaVonTtgxuukwxsHxc9reTxBnfO2uE1bnheROv844uzX1a8KhARxzpFQh9U9p/N79CvC3SKOVSi4iq9/00Aboja9H4hMqyy779GrECmg/rG/Pwy20oFn74/edL8fDnOSPfLj+fT+gdZ0cOihXWQmO01EhewwI0nsfMy63zyGjdTXaUSvvVfw4kPNbNpXIF4B0/P2rwNkpMrk6LmTaJcqnHpCeY7qk6K3oXx02eGvltoc4yyX5rl+xg4gnsdkU8pIO/PfSRszAGh0311zJ9apn+5JWKHYmnT/7y5VYKKKkRTiHHfyCv7VP81FB4M3xvF73XfqCmjhn7pamlYyfWS0MY1spOMRKSk7KhUi/+jp/VNdsuZHoGLEAuzcMAysdoAoL89tVfB5JsSorsa9saIvWdGLqG4hAjfqgzJFpMCbjDLd02BWMTM3JV0xPXnaKRa72jrylL0Yv9S7ADIKRpmiIfheA0soSTdjNOicIUMuBQyl03jmQYms6gfLcfKHoitUXx8EHR0VoBVc38o0ev2oaimOQhokQkKCiYSd2FNc2q0yKR97fg27vVchkgu2RmW3/JiHpBOBV2JjkjqYOkrkokZN69aXBRDl3DdlfZGypn8daczOnpphzy0/8B\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Class TaskListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Class TaskCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class CalendarPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class CalendarDayCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class ProductivityPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class ProductivityCard"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "MainWindow *-down-\u003e TaskListPanel"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "MainWindow *-down-\u003e CalendarPanel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "MainWindow *-down-\u003e ProductivityPanel"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "TaskListPanel -down-\u003e TaskCard"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CalendarPanel -down-\u003e CalendarDayCard"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "ProductivityPanel -down-\u003e ProductivityCard"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "TaskListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "TaskCard --|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CalendarPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CalendarDayCard --|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "ProductivityPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "ProductivityCard --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "TaskCard ..\u003e Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CalendarDayCard ..\u003e Model"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "ProductivityCard ..\u003e Model"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "ProductivityPanel -[hidden]left- CalendarPanel"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CalendarPanel -[hidden]left- TaskListPanel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "TaskListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 24,
      "-": 52
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:16:53.155Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"EI4GkkOkbMskqcZPGGYf\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e3VdRb5swEP41PGYCDCR5TEjZOmnTpGjqtDcHHHBncGZMk+7X7wAbcCDtNqXV1DxE5rvz2f6+485YKMxP7wU+ZJ94Qpjl2snJQhvLdYPAh/8aeGwBzwtaIBU0aSGnB7b0F1GgrdCKJqQ0HCXnTNKDCca8KEgsDQwLwY+m254zc9UDTskI2MaYjdE7msisRRfuvMc/EJpmemUnWLaWHGtndZIywwk/DiB0Y6FQcC7bUX4KCau507y086IL1m5jghTyTyZsZ8nma3S3S7/7t/dREaSf0beZivKAWaUOrDYrHzUDgldFQuogtoXWx4xKsj3guLYeQXLAMpkzeHJgqMIRIcnp4j6d7vSQNYTnRIpHcFETkO+1U1TGOJrAY88/0lmUDbifKz+sJE+70D0rMFDE/AVJ7oik24JKiuuJW4klGXEGp5cmMaUU/AcJOeMCkIIX4LneU8bOIMxoWsBjDGwRwNc1lxTycaUMOU2SeplJJUytriCGt7ANMRZjLTQ0lMJ9KSnQRL4GrOZ6B4O0HjSKlBqGVTrL25XJt02Zpt4Z7zV1Ci7qVGk17ndw+NVHwg4ZXkMR7AWrLgo2UGooiuWiKIoWm/VIQbDYze9KtUlXd82zP+Z5OcEzeimel8/Xb1Ikq7oR1tnKcFnS+KmUB8LC0CCMJKMOeUYXtGQsUiKfy4cxrQPa/AnaNCYIw5I+mNuY4lKt8IVT2GBfxByzo4zkKHklYqJmDVvoWSDkzd/ZaG57C4SWCw/NfTOufRa3pWUUt1G6Y+Hfxdd3pP+qe581jI7rgdTz16xEztQVpy01e96I27MV/Ky4NszK5i66AgfHPpx6oy5OYSUaUuoAzR2gq19t3Lfec0bZP6H0le4G8Njfk9u3p//YQDe/AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:18:14.194Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"ZVixv750X3zKUwRI4q7Q\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e3Zddb5swFIZ/DZeRAAMhlwlt9iFtmhRNnXbnYgfcGZwZ06T79TsONh+FLN2UVl17UcFr+9h+Xvtw4qCkOLyTeJd/EoRyx3fJwUFXju9HUQj/tfDQCEEQNUImGWkkrxM27Bc1omvUmhFaDToqIbhiu6GYirKkqRpoWEqxH3bbCj6cdYczOhI2KeZj9YYRlTdq7M87/T1lWW5n9qJF01Jg29nspMoxEfuehK4dlEghVPNUHBLKNTvLpRm3PtHaLkzSUj1lwGZGrr6ub26z7+GHu3UZZZ/Rt5mJco95bTZsFqseLAEp6pJQHcR10GqfM0U3O5zq1j1YDlquCg5vHjyacFQqeji5Tq/dPZwaKgqq5AN0MQNQGDRDzInxLMB9xx/ZU5T32M9NP2wsz9rQHRV4MGD+ApI/grTcKiqPp64ocEkcvcToZ62tXMEFoIqCFHbaCCrgUUNylZLiB00EFxKUUpTQc7VlnD+SMGdZCa8p4IQ1oJWGzeDALk1DwQjR00xaNTTzAm4F1h3jVjw2q70BfbP85zILTZzoiGvYt/CQ6YeNwgpyipFhlrbl7foUukOfpm5V8JI+RSd9qq0bd7ew+eVHync5XsE96gyrTxrWc6pviuOj9XodX61GDkKLe/y7UPay+d9yDsecFxOc0XNxnj+Fs/ffcQ5i93VxXpz/ktKSLHVJorMCx1XF0j+lFgCWJANglIxqlbO4ejjCCRxWk5Rjxe6H4acYmRm+CAYTd9nFH36zR5grUcuUmlH9IuVMIC9+FEhhmVE1CnS0rN32v7toy87XVBAFC3cabs/b+Uumbm+qamxyxlYc3exo2QpIN8yqY3m/hA6euzv0y6MmyyS1PELRAbCuodpE1MR96x/pIA7POh1fxml47X56NLen+/2Grn8D\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:19:04.488Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"Qi_mC4pBiXGDo_3Dlzi_\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e3Vddb5swFP01PEYCHEjymNCyD2nTpGjqtDcXO+DO4MyYJt2v33Ww+Qik6aY2ahuJyD7XvrbPMfdeHBTl+w8Sb7MvglDu+C7ZO+jK8f0wDOBfAw81MJ2GNZBKRmrIa4E1+0MN6Bq0YoSWvYFKCK7Ytg8moihoonoYllLs+sM2gvdX3eKUDoB1gvkQvWFEZTU692ct/pGyNLMre+GituTYDjYnKTNMxK4DoWsHRVIIVbfyfUS55s7yUs+LT1ibjUlaqKdMWE/I1ff45jb9GXy6i4sw/Yp+TIyXe8wrc2CzWfVgGZCiKgjVTlwHrXYZU3S9xYm27kBywDKVc+h50DTuqFR0f3KfXnN6uDVU5FTJBxhiJqBgWk8xN8azBO5a/pG9RVmH+5kZh43kaeO6ZQUahph/IMkfkLTcKCoPty7PcUEcvcXwd6WlXGGi+/DEy7JkaZHrczfWAb1AlOpzWCopftFIcCEBKUQBI1cbxvkRhDl4h24CC8Bu0ErTzuDqLo0hZ4ToZUZF68v6DLpNrU5Gt/lQtuZd6Mrmv5RsaORuh1yTfQuNVDfWCiuILgaGVRrL+9UpcPs6jb1f00vqFJ7UqbJq3N3C4ZefKd9meCVUR7DqpGAdpbqiOD6K43h+tRooCBb38HumOGYzgeU5GPK8GOEZvRTPs6fw7L05nqdz93XxvDifU2lBlro40VGBY0gTyWOhBQiLoh5hlAyqlrN0degIRuiwmKQcK3bfdz/GkVnhm2A6v1k1QtTP3gOaS1HJhJpZ3XLljCNvfuRIYZlSNXB0kKw59v+raAvQ11QahUehuyG3o+3skqHbG6sf65ixEQc1W7ZsBaQNk/JQ6C9hgOdu993yqI4yUSUPpGgHkKI7gaj2++6T9CI4q/T8okoPi+CR7OG/uewRLC6WPaDbfu3VYar9ZEbXfwE\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:20:18.908Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"rl8EHnGS75v162Msi_ZH\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e3Zddb5swFIZ/DZeRAAMhlwlt9iFtmhRNnXbnYgfcGZwZ0yT79TsOdoBCmm5qo7a5iMxr+xg/r3N84qCk2H2QeJN/EYRyx3fJzkFXju9HUQjfWtg3QhBEjZBJRhrJa4UV+0ON6Bq1ZoRWvYFKCK7Ypi+moixpqnoallJs+8PWgvdX3eCMDoRVivlQvWFE5Y0a+9NW/0hZltuVvWjW9BTYDjY7qXJMxLYjoWsHJVII1bSKXUK5Zme5NPOWJ3qPLyZpqZ4yYTUhV9+XN7fZz/DT3bKMsq/ox8REuce8Nhs2L6v2loAUdUmoDuI6aLHNmaKrDU517xYsBy1XBYcnD5omHJWK7k6+p3fcPZwaKgqq5B6GmAkoDJop5sR4FuC25Y/sKco77KdmHDaWZ8fQLRVoGDD/AMkfQJqvFZWHU1cUuCSOfsXod62tXAAt0T4NcAIY1WdWKSl+0URwIUEpRQkjF2vG+QMJc5aV8JgCSFgdLTRmBkd1bjoKRoheZtSkvo3P4FNgfTE+xUObjme/a5P/UjahkbMccQ37FhqZbqwUVpBNjAyrHHver0+h2/dp7PcUXNKn6KRPtXXj7hY2P/9M+SbHC/gdtYbVJw3rONU1xfHRcrmMrxYDB6HHPXyeKW/ZzG85h0POsxHO6KU4T5/C2XtznIPYfV2cZ+fvUFqSuS5GdFbguKpY+lhqAWBJ0gNGyaBKOYurgyMcwWE1STlW7L4ffoyRWeGbYLBwm138/m09wFyJWqbUzOqWJ2cCefGDQArLjKpBoINlx23/v4u24HxNpVAwc8fhdrydXjJ1e2P1YpMz1uLgZkvLVkC6Y1IdCvs5DPDcza5bHjVZJqnlAYoOAFd0JxE1cd/7JR3E4Vmn44s6PSx6R24P/83dHuHsYrcHPLb/7po01f5FRtd/AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:24:22.267Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"-OA9ssgc_rwO0QwX0_ZQ\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e3Zddb5swFIZ/DZeRAAMhlwlt9iFtmhRNnXbnYgfcGZwZ0yT79TsOdoBCmm5qo7a5iMxr+xg/r3N84qCk2H2QeJN/EYRyx3fJzkFXju9HUQjfWtg3QhBEjZBJRhrJa4UV+0ON6Bq1ZoRWvYFKCK7Ypi+moixpqnoallJs+8PWgvdX3eCMDoRVivlQvWFE5Y0a+9NW/0hZltuVvWjW9BTYDjY7qXJMxLYjoWsHJVII1bSKXUK5Zme5NPOWJ3qPLyZpqZ4yYTUhV9+XN7fZz/DT3bKMsq/ox8REuce8Nhs2L6v2loAUdUmoDuI6aLHNmaKrDU517xYsBy1XBYcnD5omHJWK7k6+p3fcPZwaKgqq5B6GmAkoDJop5sR4FuC25Y/sKco77KdmHDaWZ8fQLRVoGDD/AMkfQJqvFZWHU1cUuCSOfsXod62tXHBWqfZpgBPAqD6zSknxiyaCCwlKKUoYuVgzzh9ImLOshMcUQMLqaKExMziqc9NRMEL0MqMm9W18Bp8C64vxKR7adDz7XZv8l7IJjZzliGvYt9DIdGOlsIJsYmRY5djzfn0K3b5PY7+n4JI+RSd9qq0bd7ew+flnyjc5XgjVMaw+aVjHqa4pjo+Wy2V8tRg4CD3u4fNMectmfss5HHKejXBGL8V5+hTO3pvjHMTu6+I8O3+H0pLMdTGiswLHVcXSx1ILAEuSHjBKBlXKWVwdHOEIDqtJyrFi9/3wY4zMCt8Eg4Xb7OL3b+sB5krUMqVmVrc8ORPIix8EUlhmVA0CHSw7bvv/XbQF52sqhYKZOw634+30kqnbG6sXm5yxFgc3W1q2AtIdk+pQ2M9hgOdudt3yqMkySS0PUHQAuKI7iaiJ+94v6SAOzzodX9TpYdE7cnv4b+72CGcXuz3gsf1316Sp9i8yuv4L\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:27:36.732Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"X6NfHqaBBnVRrlT26vp7\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"M-IVu_m2Jkjfwe8HLYvd\" name\u003d\"Page-1\"\u003e5VjbcpswEP0aHpPhbvvRJqGXmTad8XTS6ZuMZFAiEJVF7PTruwJxMzhO08STpH7wiCNpJZ2z2l0wnCDdfRAoT75wTJhhm3hnOBeGbbu2B/8KuNeAZVdALCiuIKsFlvQ30aCp0YJisukNlJwzSfM+GPEsI5HsYUgIvu0PW3PWXzVHMRkAywixIXpNsUwqdGpPWvwjoXFSr2z5s6onRfVgfZJNgjDfdiDn0nACwbmsWukuIExxV/NSzQsP9DYbEySTj5mwPMMX38PrVfzT+3QTZn781flxpq3cIVboA+vNyvuaAcGLDBNlxDScxTahkixzFKneLUgOWCJTBk8WNLU5IiTZHdyn1ZwevIbwlEhxD0P0BMdzqynaY6yawG3Lv+P6FZZ0uJ/ocUhLHjemW1agoYn5C5LsAUnztSSi9Lo0RRk21Bb9X4WSchExgkT7OOATmJF90jZS8FsScMYFIBnPYORiTRnbgxCjcQaPETAJyzsLxTMFX53rjpRirJYZVamv4zMI5dbCaKGmQ50a5+/qZL+UTs6IM/tMkb2CRqwaS4kkhBMNwypNz/vVyTP7Oo1dKPeUOvkHdSpqNW5WcPj5Z8LyBC3gHrWCFQcF6yjVFcWwnTAMpxeLgYLQY5a/ZwpcdeivefaGPM9GeHZeiufJY3i23hzP7tR8XTzPjidRkuG5qkZUVGBos6HRQ6EFCAuCHmEED8qUo3R16PBG6KgxQRiS9K5vfowjvcI3TmHhRg3f6afrAc0bXoiI6Fnd+uSIIWu6Z0giERM5MFRK1hz76SrWFedrqoX8vdDdkNvRdnLK0G2NFYxVzFjzUs2WrboCUh1nm7Kyn8MAy8x33fKoijJBIUpSlAFI0Z1AVNl990l65h1VenpSpYdV70j2sN9c9vBmryx7WGNl6x5p8O6Yk9J35SGP7PC6QtFtXHroVSEZVe5e4hiJ2yuYRaU6u3lueg9mnn15pmFol/JUL+mw7+eJcd5ejDOHgljWSV3f/fcgZ40FuWUV2kx1b2wTE0Ykwef/XazzvclRxceu4BMEh8f2C0tVKbSfqZzLPw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T09:38:57.191Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"cMuIu7_QLsKEDYHKxUk3\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram name\u003d\"Page-1\" id\u003d\"13e1069c-82ec-6db2-03f1-153e76fe0fe0\"\u003e7Vtfc+I4Ev80VM0+QFmy5T+PhGxmd3bnbiq5vcs+GiPAFYNYY5Iwn34lW7JlSRjH2GFudqhUBbXkltX9U3erW4zs2eb1Yxru1p/JAicjaC1eR/btCEJgWS79xyjHguLanLBK4wUfVBEe4q9YPMmph3iB97WBGSFJFu/qxIhstzjKarQwTclLfdiSJPVZd+EKa4SHKEx06v/iRbbmVLqwquMXHK/WfGof8Y55GD2tUnLY8vlG0F7mn6J7EwpefPx+HS7Ii0Syfx7Zs5SQrPi2eZ3hhMlWiK147u5Eb/neKd5mbR54/PXzarx+DB8eF8H0YT8DwVd3LBbzHCYHLNaRv212FBLK14gZFzCyb17WcYYfdmHEel8oJihtnW0S3l2u0qKNZZwkM5KQNGdkz+jn7o4NylLyhKUei36CgPboi+LrfMZphl8lEl/kR0w2OEuPdIjotVHxCAekz1f0UmkXAY7RtaRYBHyOKo6oVcm6kir9wgX7BiGDIWWckizMYrKlzXFgEPrSj3AUmYQ+95GDrH6EjgSQuNBBYJK6N/F0ucMATdyhJO9rosevODpk+AOVN/lJ04MkZbb4mNqJaRKvmHTnJMvIhnbg7WLKDA+jJSR60mXu3AaBZeVD6SoemaYmlusJwp9MV5RiQUG5feXaLFpHufUFpzGVBk45MQnnOLkpjY+Ydku2uEmXWZiucNYkq6AYiBc1g6mrXFKpz7We4oSC8LluUk3a5Ny+kJi+Xoketw4eaME6hz05pBHmD8kmTuFDYTdBzawKMWiscnSVa+wOOMfWABeRzSbcLu7x/pBklwKO7DDtulmE+3VpLWg3d6t+AxQ7wuYsGi5UPYJAURkCXbXvwIkNbQQDBwDPdVynme/AUEAms+9SCFAdkfy9o1JN7l8HFgbcVK5QIll7ETQJGpC73RX/n7Oe1+AlRrEJxwWbKR0A0O5VZ/E7WcWR4EOXPFd5U1rx5oKsYJn6iqzuqUIO5YjCihkwDeObeLFgj9+kmL5eOM9ZMbjumFpyRaGbEbplvA4Z4ZIA/Tgt27XrkYKj+SxhmWoOyxrIW8FuiBFRpwYJe/oJJ7t1eEOyL2G6pwpoqUgaYOzY18Mm+T1e4iTObcROckQJJ0vO6VzUQgP4LKSPpGU7ScLdPq50nlLPnO6pLbnHXNGMSg4Zm2lWxv/WmTDTpZ88zOwDIrZXj2uEEZEwUh4VZJA4/lDRJHTPh5MDhjFV0PJnQfCCLlGMrpvGLXE2eoHoatELqvsZYHnd/BdQY2igGJr+HNan1Xz85a/52vllttv+kbwevn4MxvA8rljssHuj6rTNVp7lubkfyedh0yZ0kCJgy7AH9S0YDGanW0hK2oG6K5MtKUmzNVmRbZjItrSjfWvU63mjdzWBol4d34F6vj/o8W5WRN4/vN5bvZ7jWkpQDgLDnoO2jhHbHczv6amqHYtqFC3PU6Hgdz7isxO97yrO8ds64gs7dQUnCR1QAxTsesqzHa+Z0QkvSfUZHqVh3Cpf5kfny09Zev/0nMS7p/2a3Kf/uftsDuNP25pbzDJzxxZpvzyBJ5LUtiHVV9jDfhJ6AE5A/XiEUHlUl61AMPEMdgD4YuwlhsAs3/4D4O8urWIH9e1md06pOWp+RmPVX1hqVrenqfug6XvY1MNbldwM24vjYZZM9utKETWGrrARbIL6E2S53ONhtHo6Mz+4y25WZ82h28pp1wGdHHp3OzCIJ54E0ser+1PbDiYic/pWY4GAO3F9q/woNshhwJVmVmYZ2I44ulv+zlPzlblwPLcf7IhtK0ICF3RDistiYzlV7zbzPYGNim+vFmt2f5ckv/7rafpbMH1G3m93h8eVqYprT/l9iO/qJBlCemxBI0PF2L1ju5qfygcKPF1fzYJBPeYcLONq1Px10z29qqMR2e3zA2ii2HaI2uXkgN1DDsm4COdNShrWoHc32ZemoqkDln173VpDNTfT+swtbnOcYtSf6zYDVK+qK/nBsyVPqo5aydOcUYyifEcNUV3lnuKfU131FEPu67mDd62uAv0ceWF1NS+Yfw634epHabXDPT2/HvMBkVc45+iRNRhEgqt6+j6lC23FQRulqwvXdnsQrvH8BVqk7U7UF3urJCKgHHaddmEL7CNsMUvFVPpqJ5VmKXeX1bkQzoN9pHaNG9A2hdqFYd3vwq3R+3KrzTxvupqHH+gr0z86v2X89hP7mkcAudtehps4ORaPb8iW7HMjWxtSeXbL5NhHEKnX4xFdMqPml7vLlhAByoVAKbfsO3sxxJaJqOTOjQXlWIGETmxgxaaQdNlTdRSCLjsKv8WaUsmCNmXXxHpz58TouZ1kFJA35eIFo9o5tTKAYqLS36JcsuItCzS3kUPZVYqggjZihqAciVxpuceK7kiy5Juh7LOlLr4pjH10Z5T0lTS/qqC8WWpJJtaxw8dpICuDjmJ7nAg6ruOzmu3dxbcRhrRDhprDNyLUDoU8pV5qt3N5dg/ZFON1FN3hsTp9eVPx2un/kyK/xs0yqIQrLqyzaHuA94TSTzEa+GrZt1Sx7a7gC7XpwaAhOeMEUP0ZTOuyC3SVGi1jhuS53lXbBuNpT/+L6fmTbrFFudM1CPx/n42vmzb3gvoON6bNHYOdd/q41WeEgV7hfU8f2qs6GmHevrSh/DbJe797rMYFiMkkDaV4j7PbMAs/3ONw8e9tciy3q+6XJXMcJeF+H0f1rXemzv4aZ8Wd8iDweJsX2Z2At6saO2scpYZaYS+r9mBioVGtZu9BZ9RLzb4JBYWtPr8b5Dt6TePaFnfH1gQiX6nKAg1XyIAr1E+QoqR5YdCxyACUGAU67YoMpy/2nZgHKLEQsJrfSx3Pf19c7bziDcxPj+tpuLF6W7GXerURSHouk8XZP8JrOSpWbrb5QD1RtgWvj3yF1fsG2AJW/+wI20dKGOx1Pi+dYdRZnSOe2ZGGVzkd++e/AQ\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":JelphaBotParser\" as JelphaBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":VersionedJelphaBot\" as VersionedJelphaBot MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e JelphaBotParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate JelphaBotParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "UndoCommand --\u003e JelphaBotParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate JelphaBotParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "UndoCommand -\u003e Model : undoJelphaBot()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Model -\u003e VersionedJelphaBot : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate VersionedJelphaBot"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "VersionedJelphaBot -\u003e VersionedJelphaBot :resetData(ReadOnlyJelphaBot)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "VersionedJelphaBot --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate VersionedJelphaBot"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/UseCaseDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T03:01:19.911Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"c4YP2-anYbnpPiqx-eh2\" version\u003d\"12.9.10\" type\u003d\"google\"\u003e\u003cdiagram id\u003d\"RzNoku5AfDL7Wh7zWvGi\" name\u003d\"Page-1\"\u003e7Zxde6I4FMc/jZf1gSS8XVbbzjyzM7vddXanO3dUorKicSBWu59+g7xIXlTqgiCduZgHAqTyP7+cHE4O9OBwsf0QuqvZF+LhoAc0b9uDdz0AHGCw/+OG16QBAZg0TEPfS5r0fcPI/xenjVrauvY9HHEnUkIC6q/4xjFZLvGYcm1uGJINf9qEBPxfXblTLDWMxm4gt37zPTpLWm1g7ds/Yn86y/6ybjrJkYWbnZzeSTRzPbIpNMH7HhyGhNBka7Ed4iDWLtMlue7hwNH8h4V4Sctc8BTMN/THh8C+vdE+ad739WRCbkDSy4sbrNMbTn8sfc0UCMl66eG4E60HB5uZT/Fo5Y7joxtmctY2o4uA7els0/NDZgWfLNl+RNaxBIP0T+CQ4u3B367nijCSMFlgGr6yU9ILgJ2KmFKU7W72JkGZzrOCOUyYNropBtO8671SbCMVSy3c17+01dPo25Juvn75fuP+sybzjzf2aeFYL4xSfFq0iR8EQxKQcHcdvLMG4N5i7RENyRwXjjimBV0zl1TST6HyQUmhaXOSQkPW1FFIiqy+UZOmuqTpnxEOJV3ZQFrFm+tFcDumsTaD+LZ9Nmg/u884eCSRnyL4TCglC3ZCEB8YuOP5dIdzQdPJ7l+hj9vAn8bXUiKYieEc+Etmj8zTaNVYQrfNTNLcFqZkC0NhC10z+6Aua5RwDW0n3OFU1fXGCYeSpreeF09pbjSX1GW3SXkZebmWZIkFbdMmN0V4zMTDoYLthe95wSG78Q6/CkPYJm8IAPuWIROOZFuAuvw36hrdqHm6za5pCmDjmlqSpnc4wBS/A6cBxVnRbN5tOAcceIgXPrt/OVjpkD34eBEdcOLwgtbIXN41exwx9ssdTINxuByIf3HD+TtwOTziADXvcIBsi2tD3OKf3Q3QOOCZhgVRR9QNaUy4v+i2F7d4Y8DmvTiQY5xrR1yRn7o04nKCahRnNN4f4U7zhBuSLe49n+bzqeZh6vpB1GWjSMG81vzcCmW7XJvjkcJH3Wrc9UA5D/DZjzLc3xXlut0Cyq9/ejUdQVdkyqJemnJ5gs0zM+8iGyCaxLIbn2ehnJ65NtSFSNJEjbtzJCdZfnVf/KmbJCFJHL/strvLOh9RmsZFI8rojz+8+e8vUF9rhvt4+8NHv/ymWCqtDHTHGQ4fHlSga5ppDofViGoIqXao25Ki+YJdUdJsabRySeWcwJ0frQI3/tE9YP5Yx4UaA3/JTmD9sM4YZdv9AdaCw5B02OcblmAyKK9Sq3xTbYNAXk1l5nAX8c0HiUmKe8wMeOnlbVPujHRPMF3BZqL0eWUB6/M2rjNibWSF2aGB50azne56cjgtarKPWQF7XBnSQRvcaH1NHDoZuSEOXOq/YK5jlehp74/EX9KiefmpByLBbhFZh2OcXrU3ndQRMvmOdLEIh7rhFNMjHWUnkskkwlTiJJflfHRUy78dR4eRgxDgLIPaDQ7z9f0sJd8idlRZg+6zA23nIuzoZ7JjSEVUut532kePqkii3fQwaMLXp/wQ2/k7DiqY3Onu3TYNMpK911MhR2KFI48c9pvptCDiXUc1dIpB6vmeTaITtJJOVa7oJ53K0rHydMZPjHxE1DY6hVLgQtayRWyqSq5/sqlO9paHE2lZ5xmcWtvoFAKPQqKxNJ3Z45NwG/XBqspEdhNWvPXpU2G7cBXb218U75wEPIHiiK5lB8LbI1xgI94NVuOlTTbR6wLB0O4j68zRILwJY6BW+mplZd6V8K/1HQvxYwAis4ZRsOvhEYc+UzvO711qaLx5jgBQCBBgNUMDCktICpZLjwtx4UQ/Y1xcfJZQVFpKoBcgTvPCBfT30F4qwgAl4Tnx6pJRTZQBoPhglb8H8VaCoGkcWb0/wVBlQIDKgOhrBs+EBU9O5W9ySKeDUaO7rPAPdKD8LFwZKarVj5a7jrIx2RXyIHZlapcnosw7bS0jomwo0gUizMsTUabA8SgRdT3bHS3faQkNsgktcH6AWoKtumko835mu/yD2Sogag02YQMTRpnK0HYBkendRSL4kBI2MF2U+ahJu3gou1J4hTggsSvF5FM3EGXqadsFROkFkCskgv+KhgFLr4NUxQNQZXXbzUPZxdorxEGMINDl01V1vp18qTpkYdFH8f6UrukKIpAkdnWlyECSdV+LHBF2bx7bCHYvVQlqd6fa2BZf+tFtuUTccGTL1FZvDK6v4Pg6FnWrzyjXXvMq0cnm436WvX/74pXEulUuN3DJNV0oz/6fcLCauQMi+6Huf6RPP/B1kPwd0Dq+1Kc2zPUldtq2NJQVJ2W2ddCZI1noiMUqdQVkyu+5Kmeo3Wz0zDZ2k87oNaJ4wU56jgeZG8tiprPXQ35Sq+OK//UpWSQUHSg+1aF87+yMqILt7j/vm1h4/41keP8f\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/diagrams/ViewTaskListGetSequenceDiagram.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-11T06:44:25.988Z\" agent\u003d\"5.0 (Windows)\" etag\u003d\"Vgvgyn4-x4O7CDVdYG-w\" version\u003d\"12.9.10\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"kRXSYnDfc1T-0ysqkSGQ\" name\u003d\"Page-3\"\u003e7Vptb6M4EP41kbofGgHmLR/bpO2drqeuNqu73U8nJzgEleDImCbprz8bzJtNAnkh3dtbVKl4MIM988z48cQDMF5tnwhcL//EHgoHhuZtB2AyMAzdNIwB/9O8XSZx7FEm8EngiU6lYBq8IyHUhDQJPBTXOlKMQxqs68I5jiI0pzUZJARv6t0WOKx/dQ19pAimcxiq0r8Djy4zqWtppfw3FPjL/Mu6Jp6sYN5ZCOIl9PCmIgIPAzAmGNPsbrUdo5AbL7cLekfh+5dk536fbCPivxBw9+02U/Z4zCvFFAiK6Mmqf1/Y/8zHTxC+PFhLy4V/+CYRr2hvMEyEvZ4xXov50l1uRDb1Nb9NVuEjgSt2e79ZBhRN13DO5RuGHSZb0lXIWjq7XeCICjDoQLTHOMQkVQi09GLyjlMTJnhDhKJtxbFiqk8IrxAlO9ZFPDVMO3tFwNa03ay9KUEARmL6yxoABOChAJ5f6C6Ny26EfY+wNVBsPQB3fwVo8xXGr89BTA+Z/TlYoDCIuOXXiARsRIibMhTiz6WszTMs0Chkr5CiHYZwHQez9KvcJwTNExIHb+gLijMXcilOKP/SuIhTLixigjcWQRhWfAwNTTOsdiws0osrowS/osoT+7FnlIA82AVKDFdTUFIkhCpKzLzjxVFiKigJYUynS7yJOEaGPqI3QeSh7ScFLhUncxMELAnehYEfMdkMU4pX7AGKvDueVbksxPNX1W3mZDRKjS677TgnIK+Wl1UXVEycG5OgEFKGu/oi0GBhoe0zDthQCm/qVt2bwJacFOOEzJF4q5oqJUXAtA4ropAwPyiKUocXUzwdA5aCAR6HN6rHuZGnookJXWIfRzB8KKXVwIcCCyFaUB5tLEMEkf+ctiZGMzYIThjWPBHgzPFk902oSxvfm0P/QhjKzHzAUPnS3Aq2M5EFZGQ5bidkMXPCXaXbmneID3zHsRq/sxeocv+RK+ExG8FF0Wmr69iZmQivEXt078F4mWItg1dOJt0D+ELbgHJAakPXBaKdYnI4KtqTbQ5f3thVGpVVc3I+WjMMXAKtwru32tAYjZyahwslZyLaNEZ1fmR1Q3RDrmxRtCdXHh8aZv07wGkJDam/2RZKZuM8TuxfDz3V/NKCgheLGPWyljhqtIK7l1mMyBtklC/jnTZccZYY8nVhmsx8lvbXJSsVT31ahMQvjno9jmoa9Z1ME0ct9qjX4aiuginKwPJxq0DPTFU4QhvqUiq+SCaWuYXtnMhaZfqrKNqTiUtF/Wej0VHcQawJTGzdD6yJlFdKwlvNLIei3WbX4+PZgOkeuxaoQ8bS1SqE3hC6oK/I1dWCz48TtgWZqxO50fFE7sLETaC2dTuijzpmlDNThuUY9Ug3TyRvpq7LioaaK6pz7JJG1vO2Nx9MFZzWPYLzJXdSMgtTNqIlEQ24rjkmhK/yTCuvh/D/jD9qC75l5dlCxjWLWdq8I54zmKTJQ8b7KvC8dBtNOMuAJf1QMxNMKBZM5Jj6Z9pPjLFrnff4MpfVXgw1nIY8ZPSWh4wmWqpSz19k87pk03bayaauW9ckm3pD3fyKnGGv0/Y7Z587Vacdjo3uNMMYSnUg46N5hlrG5oXrq9esi4rlrTbU2PJcKVumkqJPyS3S1q7aktlFzlP0Gk9xgdMzT2nnH6Aj/6gUmAwNKFC5UD0eWHVU2hpjF/ZpTMWVdsFMVyducs3Nja7W7X8ccn1hStwZamdiyNElv4NT65RWi6K+yW1T2dxOK25e8MZu0/JaVkdhsUg55/WZ3aIBJ2FZxxnJ++USNpTK2w0KC2rM9WQEuvnNq5Ll008HHA48ecUsjpWI0QyqJzf2ZETLlY4O6BdJhgwA9fLMraSix7zUUAP+WRjUz1qnUUusLDlNsz3wzafhnt+Dr8WmtKFuKGRKO4lMXXpd6lqr6VqquTwtMnVdousF3I5d1CzXPqyo70XtY+u5/4HMsvcoSVtm0ftKLcZxJeD/pc/qP2nnpyrafCb/qNvBZaxZHiDNorI8hgse/gU\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1
    }
  },
  {
    "path": "docs/diagrams/interaction.drawio",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cmxfile host\u003d\"app.diagrams.net\" modified\u003d\"2020-04-09T05:47:44.324Z\" agent\u003d\"5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.163 Safari/537.36\" etag\u003d\"fZ0skJCetc0pav2Ibxpg\" version\u003d\"12.9.9\" type\u003d\"device\"\u003e\u003cdiagram id\u003d\"PnAtoG9oxPUh2EXN0bKi\" name\u003d\"Page-1\"\u003e7Vxbc5s4FP41mek+xAOIi/0YO013u92dzqS73X1UQbFpseViObH76ysZiYskDFYMJpn6IUFHQsC5fOfTEfYVmC1371K4XvyFI5RcOVa0uwK3V45jW5ZP/zHJPpP4gAvmaRzxQYXgPv6BxJlcuo0jtKkMJBgnJF5XhSFerVBIKjKYpvipOuwBJ9WrruEcKYL7ECaq9HMckUUmHTtBIf8dxfOFuLLtT7KeJRSD+ZNsFjDCTyUReHsFZinGJDta7mYoYcoTesnOu6vpzW8sRSvS5oT3+NP3zY93yXyN/r5G3ucd/vPrtetl0zzCZMufmN8t2QsVpHi7ihCbxb4C06dFTND9Goas94kancoWZJnw7g1J8Tc0wwlOD2eDu8Mn7xFKBFTyECdJaeTD4cPkeEXu4DJOmM/8i9IIriAVqw/MdfCIUoJ2JRFXwDuEl4ikezqE97rcFtwZbcDbT4VpA5/LFiWzgjEXQu5O83zqQuP0gCv9BAOAkwxgNRtAVir0x5ZVr1TFXv6dZeUn6KxzBjP4QdUOuXpLdrA1ZnC7soLdbAQavmt2uF0mNyFhWpmyB44pVHyAX1DyEW9iEuMVHfIFE4KXdEDCOqYw/DY/mFCnTTHHTRLP2bkES/bEW5LEK2ohgW+WNpbOYBXJKLavGsXp0yhOs1HQKrphIE9bK7yiwmkEN4scq0pqrNUPiioJQNVO6fE9zeMLWYoSSOLHatrQ6YRf4SOO6Z3kyh9Xle/KgLPB2zRE/KQyyh+fJw8jMQ+B6RwRZZ6DgfKHNreZDs38hHA4YQk4wy0q/b5lmW8qoCgX0KP54T+4+ecPcTa9mWwC3ndOiLSs2cz3dVh441mW2zEW2nJO0oTdpM+w808KuzCBm00cvuhgU3TZNtjspok6jraxYipKvxFBVGYrRqP+SI5xNQ6g5eDgIshzU0jNiVJN0lrGUcQuow28amh2x+1kWzjt4sjpKo4mJumrjFJ6TVEFpfv/mDZHnmj+z085NG53XNVZa89blcQoIaBvwYkd6BDQuaV8WGUczjGTZdFzjG1xlWfR0ZxNBoIa9tir5mhT2HAlyM/9sifYEPrvas2RJ9Tugr0WeRtWEI7V2RKixRridcZ7YxgLQww1jk25tjyR4lxdxzHQuJw52/6A55TI9UC4fWhZB/qsuB8IGHZ0S7hlonBxwm27JshRt9CtgZHTTXACAgwksAGQkoJnGNjKRH0HdsdFwdz6bYuCfcQlcDy99RpSut1ZbdY+w1JYjaLGPF/O8kVe12f51ondssLwwMmekcYHRscn9pmi3anhkn1Fe9CUxsPcjkXaFhZVMjnaoXBL0Juip1wUELLf2ib61142yLH9GOzo6t6dFQ5stazzHFrH92S7p3WQqtLxLrWnJC+qL0/rjApAz6N1LUygJiS0iwlfYFIqmrVZ7rm2Rpbtc0GRf1hjX2p8RGlMNcYi/CCrtWVjXcgZ1jrRHbujwD9PjtHN1TOpFNrtilTmvjeknWZXrhNpUEFLKjurEzmn1YmGQCpr14p5jzmpHFjMA+Dp/eXkgBfvARUTjazSB7j9Br+uxtDMMbmBFVqRMcpPcPPtDaF/fpFJ4T6+2wJu+iSTzmlr2MuxkFrtDwQZ3HNVjTVUAMgo0zUa6FacRjmo3uptslNOPA/nCd5pH6WcFdesdZoXxzWlGgQwL116l3Wt01Y9z6M3pxOV3OXM/K20GTcJxhVONZq4uaCGVx1a51suiXrcS9t/k+ttLjD0dXtc5ViuwLWefB20WFH1t3Ej9byk3CrvtxjnVuBMlNwqz9W1U/S5vju9/C8A0DYDwGeg1bBA6NqrMnUgv4Nj+MKt8lJQ1+7maNzNvFh8T3DKvhHTQ7k4/2aC4qyzgNKfrr+CIEHOxcvFQPcyx4CIk1ElqdZQjZwFDGuzUc5QSlZpCxe+2zBR13hxgZdN6iNd6qnZlSilqjw7aVOVeXYamLv5gTeyxpPiU/EZxxuPXEP3C9xRIO2b97wPAS5QkTLywFpvGo6TVKmHMSapTuHKBcmunaJxz1tbn+bWU5jMBj6y9x0IZvwnTlrzmddenw7kMtNEZT2BxmM7K08DXbnIfF+C2f09StYLOMXkzVdx9Gt/YieQR7K/bn/C7dMBxMXOWoo+AupNpejWy+KcENsjO3tLolwKdE1KgWdaaYPWdcFhkR5PXkqb1gWBxLH7TmZui6XcK/xOv1R306QW/TdyukotXWxynY4s4TZ9LPYPRPVtZHtOCWqske30+abV0JY7Y6fqO8ZMdiJFvvj5mYbIp04A96VhazZgU3/DCo/iN1x3X/J4gUiFf2d30BKGaLP43ZhsePHrO+DtTw\u003d\u003d\u003c/diagram\u003e\u003c/mxfile\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 1
    }
  },
  {
    "path": "docs/diagrams/old/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteTask(t)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/old/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":JelphaBotParser\" as JelphaBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e JelphaBotParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate JelphaBotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "DeleteCommandParser --\u003e JelphaBotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "DeleteCommandParser --\u003e JelphaBotParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e JelphaBotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate JelphaBotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "DeleteCommand -\u003e Model : deleteTask(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Model -[hidden]-\u003e DeleteCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "destroy Model"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 14,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/old/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Class JelphaBotParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e\"1\" AddressBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 61
    }
  },
  {
    "path": "docs/diagrams/old/StartSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":JelphaBotParser\" as JelphaBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":StartCommandParser\" as StartCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \"d:StartCommand\" as StartCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e JelphaBotParser : parseCommand(\"start 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate JelphaBotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create StartCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e StartCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StartCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommandParser --\u003e JelphaBotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StartCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e StartCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StartCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create StartCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommandParser -\u003e StartCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StartCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommand --\u003e StartCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StartCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommandParser --\u003e JelphaBotParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StartCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommandParser -[hidden]-\u003e JelphaBotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "destroy StartCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate JelphaBotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e StartCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StartCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommand -\u003e Model : startTask(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Model --\u003e StartCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CommandResult --\u003e StartCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StartCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StartCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 69
    }
  },
  {
    "path": "docs/diagrams/old/StopSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":JelphaBotParser\" as JelphaBotParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":StopCommandParser\" as StopCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \"d:StopCommand\" as StopCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e JelphaBotParser : parseCommand(\"stop 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate JelphaBotParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create StopCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e StopCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StopCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommandParser --\u003e JelphaBotParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StopCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser -\u003e StopCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StopCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create StopCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommandParser -\u003e StopCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StopCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommand --\u003e StopCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StopCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommandParser --\u003e JelphaBotParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StopCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommandParser -[hidden]-\u003e JelphaBotParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "destroy StopCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBotParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate JelphaBotParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "LogicManager -\u003e StopCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate StopCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommand -\u003e Model : startTask(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Model --\u003e StopCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "CommandResult --\u003e StopCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "StopCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate StopCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 69
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":AddressBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "ecp -\u003e ec ++: index, editTaskDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 20
    }
  },
  {
    "path": "docs/stylesheets/asciidoctor.css",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/* Remove comment around @import statement below when using as a custom stylesheet */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/*@import \"https://fonts.googleapis.com/css?family\u003dOpen+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700\";*/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "audio,canvas,video{display:inline-block}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "audio:not([controls]){display:none;height:0}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "[hidden],template{display:none}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "script{display:none!important}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "body{margin:0}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "a{background:transparent}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "a:focus{outline:thin dotted}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "a:active,a:hover{outline:0}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2em;margin:.67em 0}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]{border-bottom:1px dotted}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "b,strong{font-weight:bold}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "dfn{font-style:italic}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mark{background:#ff0;color:#000}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "code,kbd,pre,samp{font-family:monospace;font-size:1em}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "pre{white-space:pre-wrap}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "q{quotes:\"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\"}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:80%}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "sup{top:-.5em}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "sub{bottom:-.25em}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "img{border:0}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "svg:not(:root){overflow:hidden}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "figure{margin:0}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "legend{border:0;padding:0}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "button,input{line-height:normal}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "button,select{text-transform:none}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "button,html input[type\u003d\"button\"],input[type\u003d\"reset\"],input[type\u003d\"submit\"]{-webkit-appearance:button;cursor:pointer}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "button[disabled],html input[disabled]{cursor:default}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"checkbox\"],input[type\u003d\"radio\"]{box-sizing:border-box;padding:0}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "input[type\u003d\"search\"]::-webkit-search-cancel-button,input[type\u003d\"search\"]::-webkit-search-decoration{-webkit-appearance:none}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{overflow:auto;vertical-align:top}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "table{border-collapse:collapse;border-spacing:0}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*,*:before,*:after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "html,body{font-size:100%}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover{cursor:pointer}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,embed{max-width:100%;height:auto}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "object,embed{height:100%}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "img{-ms-interpolation-mode:bicubic}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".left{float:left!important}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".right{float:right!important}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".text-left{text-align:left!important}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".text-right{text-align:right!important}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".text-center{text-align:center!important}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".text-justify{text-align:justify!important}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".hide{display:none}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "body{-webkit-font-smoothing:antialiased}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "img,object,svg{display:inline-block;vertical-align:middle}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "textarea{height:auto;min-height:50px}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "select{width:100%}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".center{margin-left:auto;margin-right:auto}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".spread{width:100%}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "p.lead,.paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:1.21875em;line-height:1.6}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,.admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:#2156a5;text-decoration:underline;line-height:inherit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "a:hover,a:focus{color:#1d4b8f}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a img{border:none}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "p aside{font-size:.875em;line-height:1.35;font-style:italic}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "h1 small,h2 small,h3 small,#toctitle small,.sidebarblock\u003e.content\u003e.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.125em}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:1.6875em}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.375em}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "h4,h5{font-size:1.125em}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "h6{font-size:1em}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "hr{border:solid #ddddd8;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "em,i{font-style:italic;line-height:inherit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "strong,b{font-weight:bold;line-height:inherit}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "small{font-size:60%;line-height:inherit}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "code{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ul,ol,ul.no-bullet,ol.no-bullet{margin-left:1.5em}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "ul.square{list-style-type:square}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "ul.circle{list-style-type:circle}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "ul.disc{list-style-type:disc}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "ul.no-bullet{list-style:none}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "dl dt{margin-bottom:.3125em;font-weight:bold}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "abbr{text-transform:none}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite:before{content:\"\\2014 \\0020\"}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "h1{font-size:2.75em}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "h2{font-size:2.3125em}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "h3,#toctitle,.sidebarblock\u003e.content\u003e.title{font-size:1.6875em}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "h4{font-size:1.4375em}}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "table thead,table tfoot{background:#f7f8f7;font-weight:bold}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "body{tab-size:4}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock\u003e.content\u003e.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:before,.clearfix:after,.float-group:before,.float-group:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".clearfix:after,.float-group:after{clear:both}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "*:not(pre)\u003ecode{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "pre,pre\u003ecode{line-height:1.45;color:rgba(0,0,0,.9);font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;font-weight:400;text-rendering:optimizeSpeed}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq{color:rgba(51,51,51,.8)}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "kbd{font-family:\"Droid Sans Mono\",\"DejaVu Sans Mono\",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:first-child{margin-left:0}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".keyseq kbd:last-child{margin-right:0}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".menuseq,.menu{color:rgba(0,0,0,.8)}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before,b.button:after{position:relative;top:-1px;font-weight:400}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:before{content:\"[\";padding:0 3px 0 2px}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "b.button:after{content:\"]\";padding:0 2px 0 3px}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "p a\u003ecode:hover{color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "#header:before,#header:after,#content:before,#content:after,#footnotes:before,#footnotes:after,#footer:before,#footer:after{content:\" \";display:table}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "#header:after,#content:after,#footnotes:after,#footer:after{clear:both}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "#content{margin-top:1.25em}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "#content:before{content:none}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child+#toc{margin-top:8px;border-top:1px solid #ddddd8}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:only-child,body.toc2 #header\u003eh1:nth-last-child(2){border-bottom:1px solid #ddddd8;padding-bottom:8px}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details{border-bottom:1px solid #ddddd8;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span:first-child{margin-left:-.125em}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details span.email a{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br{display:none}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span:before{content:\"\\00a0\\2013\\00a0\"}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span.author:before{content:\"\\00a0\\22c5\\00a0\";color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "#header .details br+span#revremark:before{content:\"\\00a0|\\00a0\"}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber{text-transform:capitalize}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "#header #revnumber:after{content:\"\\00a0\"}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "#content\u003eh1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #ddddd8;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #efefed;padding-bottom:.5em}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "#toc\u003eul{margin-left:.125em}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0\u003eli\u003ea{font-style:italic}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "#toc ul{font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;list-style-type:none}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "#toc li{line-height:1.3334;margin-top:.3334em}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a{text-decoration:none}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "#toc a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle{color:#7a2518;font-size:1.2em}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){#toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2{padding-left:15em;padding-right:0}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #efefed;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.9em;margin-bottom:0}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{margin-left:0;padding-left:1em}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:15em}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #efefed;left:auto;right:0}}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2{width:20em}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 #toctitle{font-size:1.375em}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2\u003eul{font-size:.95em}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "#toc.toc2 ul ul{padding-left:1.25em}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "body.toc2.toc-right{padding-left:0;padding-right:20em}}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "#content #toc\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(255,255,255,.8);line-height:1.44}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:.625em}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.sect1{padding-bottom:1.25em}}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border-top:1px solid #efefed}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor,h2\u003ea.anchor,h3\u003ea.anchor,#toctitle\u003ea.anchor,.sidebarblock\u003e.content\u003e.title\u003ea.anchor,h4\u003ea.anchor,h5\u003ea.anchor,h6\u003ea.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.anchor:before,h2\u003ea.anchor:before,h3\u003ea.anchor:before,#toctitle\u003ea.anchor:before,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:before,h4\u003ea.anchor:before,h5\u003ea.anchor:before,h6\u003ea.anchor:before{content:\"\\00A7\";font-size:.85em;display:block;padding-top:.1em}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1:hover\u003ea.anchor,#content h1\u003ea.anchor:hover,h2:hover\u003ea.anchor,h2\u003ea.anchor:hover,h3:hover\u003ea.anchor,#toctitle:hover\u003ea.anchor,.sidebarblock\u003e.content\u003e.title:hover\u003ea.anchor,h3\u003ea.anchor:hover,#toctitle\u003ea.anchor:hover,.sidebarblock\u003e.content\u003e.title\u003ea.anchor:hover,h4:hover\u003ea.anchor,h4\u003ea.anchor:hover,h5:hover\u003ea.anchor,h5\u003ea.anchor:hover,h6:hover\u003ea.anchor,h6\u003ea.anchor:hover{visibility:visible}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link,h2\u003ea.link,h3\u003ea.link,#toctitle\u003ea.link,.sidebarblock\u003e.content\u003e.title\u003ea.link,h4\u003ea.link,h5\u003ea.link,h6\u003ea.link{color:#ba3925;text-decoration:none}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1\u003ea.link:hover,h2\u003ea.link:hover,h3\u003ea.link:hover,#toctitle\u003ea.link:hover,.sidebarblock\u003e.content\u003e.title\u003ea.link:hover,h4\u003ea.link:hover,h5\u003ea.link:hover,h6\u003ea.link:hover{color:#a53221}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content\u003e.title,.audioblock\u003e.title,.exampleblock\u003e.title,.imageblock\u003e.title,.listingblock\u003e.title,.literalblock\u003e.title,.stemblock\u003e.title,.openblock\u003e.title,.paragraph\u003e.title,.quoteblock\u003e.title,table.tableblock\u003e.title,.verseblock\u003e.title,.videoblock\u003e.title,.dlist\u003e.title,.olist\u003e.title,.ulist\u003e.title,.qlist\u003e.title,.hdlist\u003e.title{text-rendering:optimizeLegibility;text-align:left;font-family:\"Noto Serif\",\"DejaVu Serif\",serif;font-size:1rem;font-style:italic}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock\u003ecaption.title{white-space:nowrap;overflow:visible;max-width:0}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph.lead\u003ep,#preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{color:rgba(0,0,0,.85)}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock #preamble\u003e.sectionbody\u003e.paragraph:first-of-type p{font-size:inherit}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable{border-collapse:separate;border:0;background:none;width:100%}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon{text-align:center;width:80px}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon img{max-width:none}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.icon .title{font-weight:bold;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;text-transform:uppercase}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #ddddd8;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock\u003etable td.content\u003e:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:first-child{margin-top:0}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock\u003e.content\u003e.title{color:#7a2518;margin-top:0;text-align:center}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content\u003e:last-child\u003e:last-child,.exampleblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.exampleblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content\u003e:last-child\u003e:last-child,.sidebarblock\u003e.content .olist\u003eol\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .ulist\u003eul\u003eli:last-child\u003e:last-child,.sidebarblock\u003e.content .qlist\u003eol\u003eli:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class\u003d\"highlight\"],.listingblock pre[class^\u003d\"highlight \"],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class\u003d\"highlight\"],.sidebarblock .listingblock pre[class^\u003d\"highlight \"],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;padding:1em;font-size:.8125em}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock pre.nowrap,.literalblock pre[class].nowrap,.listingblock pre.nowrap,.listingblock pre[class].nowrap{overflow-x:auto;white-space:pre;word-wrap:normal}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "@media only screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs{padding:0}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.highlightjs\u003ecode{padding:1em;-webkit-border-radius:4px;border-radius:4px}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock pre.prettyprint{border-width:0}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock\u003e.content{position:relative}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock:hover code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:before{content:attr(data-prompt);padding-right:.5em;color:#999}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock.terminal pre .command:not([data-prompt]):before{content:\"$\"}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable td.code{padding-left:.75em;padding-right:0}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #ddddd8}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "pre.pygments .lineno{display:inline-block;margin-right:.25em}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "table.pyhltable .linenodiv{background:none!important;padding-right:0!important}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock{margin:0 1em 1.25em 1.5em;display:table}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock\u003e.title{margin-left:-1.5em;margin-bottom:.75em}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote,.quoteblock blockquote p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote{margin:0;padding:0;border:0}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote:before{content:\"\\201c\";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock blockquote\u003e.paragraph:last-child p{margin-bottom:0}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution{margin-top:.5em;margin-right:.5ex;text-align:right}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock{margin-left:0;margin-right:0;padding:.5em 0;border-left:3px solid rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote{padding:0 0 0 .75em}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .quoteblock blockquote:before{display:none}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock{margin:0 1em 1.25em 1em}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre{font-family:\"Open Sans\",\"DejaVu Sans\",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock pre strong{font-weight:400}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution br,.verseblock .attribution br{display:none}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract{margin:0 0 1.25em 0;display:block}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote,.quoteblock.abstract blockquote p{text-align:left;word-spacing:0}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock.abstract blockquote:before,.quoteblock.abstract blockquote p:first-of-type:before{display:none}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock{max-width:100%;border-collapse:separate}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock td\u003e.paragraph:last-child p\u003ep:last-child,table.tableblock th\u003ep:last-child,table.tableblock td\u003ep:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all th.tableblock,table.grid-all td.tableblock{border-width:0 1px 1px 0}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tfoot\u003etr\u003eth.tableblock,table.grid-all tfoot\u003etr\u003etd.tableblock{border-width:1px 1px 0 0}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-cols th.tableblock,table.grid-cols td.tableblock{border-width:0 1px 0 0}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all *\u003etr\u003e.tableblock:last-child,table.grid-cols *\u003etr\u003e.tableblock:last-child{border-right-width:0}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows th.tableblock,table.grid-rows td.tableblock{border-width:0 0 1px 0}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-all tbody\u003etr:last-child\u003eth.tableblock,table.grid-all tbody\u003etr:last-child\u003etd.tableblock,table.grid-all thead:last-child\u003etr\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003eth.tableblock,table.grid-rows tbody\u003etr:last-child\u003etd.tableblock,table.grid-rows thead:last-child\u003etr\u003eth.tableblock{border-bottom-width:0}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "table.grid-rows tfoot\u003etr\u003eth.tableblock,table.grid-rows tfoot\u003etr\u003etd.tableblock{border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-all{border-width:1px}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-sides{border-width:0 1px}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "table.frame-topbot{border-width:1px 0}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-left,td.halign-left{text-align:left}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-right,td.halign-right{text-align:right}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "th.halign-center,td.halign-center{text-align:center}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-top,td.valign-top{vertical-align:top}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-bottom,td.valign-bottom{vertical-align:bottom}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "th.valign-middle,td.valign-middle{vertical-align:middle}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "table thead th,table tfoot th{font-weight:bold}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock\u003ecode:only-child{background:none;padding:0}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "td\u003ediv.verse{white-space:pre}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "ol{margin-left:1.75em}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "ul li ol{margin-left:1.5em}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd{margin-left:1.125em}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "dl dd:last-child,dl dd:last-child\u003e:last-child{margin-bottom:0}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "ol\u003eli p,ul\u003eli p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist,ul.none{list-style-type:none}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "ul.unstyled,ol.unnumbered,ul.checklist{margin-left:.625em}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003e.fa-square-o:first-child,ul.checklist li\u003ep:first-child\u003e.fa-check-square-o:first-child{width:1em;font-size:.85em}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "ul.checklist li\u003ep:first-child\u003einput[type\u003d\"checkbox\"]:first-child{width:1em;position:relative;top:1px}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline{margin:0 auto .625em auto;margin-left:-1.375em;margin-right:0;padding:0;list-style:none;overflow:hidden}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli{list-style:none;float:left;margin-left:1.375em;display:block}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "ul.inline\u003eli\u003e*{display:block}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".unstyled dl dt{font-weight:400;font-style:normal}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "ol.arabic{list-style-type:decimal}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "ol.decimal{list-style-type:decimal-leading-zero}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "ol.loweralpha{list-style-type:lower-alpha}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperalpha{list-style-type:upper-alpha}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowerroman{list-style-type:lower-roman}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "ol.upperroman{list-style-type:upper-roman}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "ol.lowergreek{list-style-type:lower-greek}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable,.colist\u003etable{border:0;background:none}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist\u003etable\u003etbody\u003etr,.colist\u003etable\u003etbody\u003etr{background:none}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "td.hdlist1{font-weight:bold;padding-bottom:1.25em}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock+.colist,.listingblock+.colist{margin-top:-.5em}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:first-of-type{padding:0 .75em;line-height:1}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".colist\u003etable tr\u003etd:last-of-type{padding:.25em 0}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.left,.imageblock[style*\u003d\"float: left\"]{margin:.25em .625em 1.25em 0}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.right,.imageblock[style*\u003d\"float: right\"]{margin:.25em 0 1.25em .625em}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".imageblock\u003e.title{margin-bottom:0; text-align: inherit;}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb,.imageblock.th{border-width:6px}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock.thumb\u003e.title,.imageblock.th\u003e.title{padding:0 .125em}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".image.left{margin-right:.625em}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".image.right{margin-left:.625em}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "a.image{text-decoration:none;display:inline-block}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "a.image object{pointer-events:none}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a,sup.footnoteref a{text-decoration:none}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em 0;border-width:1px 0 0 0}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;text-indent:-1.05em;margin-bottom:.2em}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "#footnotes .footnote:last-of-type{margin-bottom:0}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable{border:0;background:#fff;width:100%;margin-bottom:0}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ".gist .file-data\u003etable td.line-data{width:99%}"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "div.unbreakable{page-break-inside:avoid}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ".big{font-size:larger}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ".small{font-size:smaller}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".underline{text-decoration:underline}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ".overline{text-decoration:overline}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".line-through{text-decoration:line-through}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua{color:#00bfbf}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ".aqua-background{background-color:#00fafa}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".black{color:#000}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ".black-background{background-color:#000}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".blue{color:#0000bf}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ".blue-background{background-color:#0000fa}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia{color:#bf00bf}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ".fuchsia-background{background-color:#fa00fa}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".gray{color:#606060}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".gray-background{background-color:#7d7d7d}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".green{color:#006000}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".green-background{background-color:#007d00}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".lime{color:#00bf00}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ".lime-background{background-color:#00fa00}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon{color:#600000}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".maroon-background{background-color:#7d0000}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ".navy{color:#000060}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".navy-background{background-color:#00007d}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ".olive{color:#606000}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".olive-background{background-color:#7d7d00}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ".purple{color:#600060}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ".purple-background{background-color:#7d007d}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ".red{color:#bf0000}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".red-background{background-color:#fa0000}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ".silver{color:#909090}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ".silver-background{background-color:#bcbcbc}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".teal{color:#006060}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".teal-background{background-color:#007d7d}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".white{color:#bfbfbf}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".white-background{background-color:#fafafa}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow{color:#bfbf00}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".yellow-background{background-color:#fafa00}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "span.icon\u003e.fa{cursor:default}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon [class^\u003d\"fa icon-\"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-note:before{content:\"\\f05a\";color:#19407c}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-tip:before{content:\"\\f0eb\";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-warning:before{content:\"\\f071\";color:#bf6900}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-caution:before{content:\"\\f06d\";color:#bf3400}"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.icon .icon-important:before{content:\"\\f06a\";color:#bf0000}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:\"Open Sans\",\"DejaVu Sans\",sans-serif;font-style:normal;font-weight:bold}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value] *{color:#fff!important}"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]+b{display:none}"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ".conum[data-value]:after{content:attr(data-value)}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "pre .conum[data-value]{position:relative;top:-.125em}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "b.conum *{color:inherit!important}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ".conum:not([data-value]):empty{display:none}"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "h1,h2,p,td.content,span.alt{letter-spacing:-.01em}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "p{margin-bottom:1.25rem}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock\u003e.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:none!important}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "@media print{@page{margin:1.25cm .75cm}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "a{color:inherit!important;text-decoration:underline!important}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "a.bare,a[href^\u003d\"#\"],a[href^\u003d\"mailto:\"]{text-decoration:none!important}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "a[href^\u003d\"http:\"]:not(.bare):after,a[href^\u003d\"https:\"]:not(.bare):after{content:\"(\" attr(href) \")\";display:inline-block;font-size:.875em;padding-left:.25em}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "abbr[title]:after{content:\" (\" attr(title) \")\"}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "pre,blockquote,tr,img,object,svg{page-break-inside:avoid}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "thead{display:table-header-group}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "svg{max-width:100%}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "h2,h3,#toctitle,.sidebarblock\u003e.content\u003e.title{page-break-after:avoid}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "#toc,.sidebarblock,.exampleblock\u003e.content{background:none!important}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#toc{border-bottom:1px solid #ddddd8!important;padding-bottom:0!important}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1{padding-bottom:0!important}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ".sect1+.sect1{border:0!important}"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "#header\u003eh1:first-child{margin-top:1.25rem}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header{text-align:center}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header\u003eh1:first-child{border:0!important;margin:2.5em 0 1em 0}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details{border:0!important;display:block;padding:0!important}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details span:first-child{margin-left:0!important}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br{display:block}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #header .details br+span:before{content:none!important}"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1\u003eh2{page-break-before:always}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock code[data-lang]:before{display:block}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "#footer{background:none!important;padding:0 .9375em}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "#footer-text{color:rgba(0,0,0,.6)!important;font-size:.9em}"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-on-print{display:none!important}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".print-only{display:block!important}"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ".hide-for-print{display:none!important}"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ".show-for-print{display:inherit!important}}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 406
    }
  },
  {
    "path": "docs/team/alam8064.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d Amanda Lam - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d PROJECT: JelphaBot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "JelphaBot is a desktop application integrated with various features for managing tasks efficiently, mainly focusing on"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "NUS students as our target group. It is specially designed by my talented crew of teammates, together with myself."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "JelphaBot was developed for our software engineering module, CS2103T, where we were tasked to morph an address book"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "application that manages contact details into something else. As part of the project constraints, user interactions are"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "primarily Command-Line Interface (CLI), assisted with a GUI created using JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "This section contains a summary of my coding, documentation, and other helpful contributions to my team project."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Major enhancement*: Implemented the Calendar feature"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** What it does: A calendar integrated to display a monthly calendar of overarching tasks due,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "together with a task list panel on the left for detailed tasks to be shown."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Allow users to navigate to other months of their choice."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Allow users to view specific tasks due to be listed on selected dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Allow users to navigate directly to today\u0027s date of the calendar view, as well as listing out the tasks due today."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Justification:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** The use of a calendar to display a visual view of these information is neat and easy to navigate, making the feature"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "more user-friendly."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Integrating a calendar allows users to be able to plan their schedules easily by being able to immediately"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "visualise which days are busier with more tasks on hand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** The overarching view of the tasks displayed on the calendar (shown by the dot indicators) is done by filtering the"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "existing main task list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** The implementation was challenging as it required constant updates to be accounted for after other commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "edits the main task list is input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Moreover, to avoid user mistakes and increase the feature\u0027s usability, the included commands implementation in"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "carrying out various functions as listed above uses the same command keyword : `calendar`. This involved the heavy use"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "and interaction between the `Ui`, `Logic`, and `Model` components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/314[#314],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/299[#299],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/297[#297],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/177[#177],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/174[#174],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/165[#165],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/138[#138],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/84[#84]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Minor enhancement*: Added in the panel of tabs in the main Ui layout during initial stages."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "This was done for the subsequence integration of our individual features."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Pull requests:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/78[#78]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dalam8064[View on RepoSense]]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Managed releases `v1.2.1` - `v1.3` (2 releases) on GitHub"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Updated `SampleDataUtil` to propagate an empty instance of the app with time-sensitive test data to streamline manual testing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "(Pull requests: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/357[#357])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Added diagrams and documentation for the Calendar feature in the Developer Guide."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Updated diagram for the Ui section, the delete command diagram and the proposed undo feature from AB3 in the Developer Guide."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Added documentation for Calendar feature in the User Guide."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "*** Reported bugs and suggestions for other teams:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "https://github.com/alam8064/ped/issues[Reported 11 bugs during PE Dry Run]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The full User Guide can be found https://ay1920s2-cs2103t-f09-2.github.io/main/UserGuide.html[here]._"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "The full Developer Guide can be found https://ay1920s2-cs2103t-f09-2.github.io/main/DeveloperGuide.html[here]._"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcalendar]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "alam8064": 95
    }
  },
  {
    "path": "docs/team/clouddoggo.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d Jel Lim – Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "JelphaBot is a desktop Task Manager that aids NUS students in tracking tasks efficiently. The user interacts with it using a CLI, but it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Code contributed: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dclouddoggo\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[View on RepoSense]]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Major enhancement:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Added the start and stop a timer feature for tasks as well as a viewing panel for the user’s overall productivity for the day."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** What it does: `start \u003cindex\u003e` command allows the user to start a timer for the task specified by the index provided."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The user may stop this timer with `stop \u003cindex\u003e` command. The productivity panel will show the total time spent on as well as the number of tasks completed that are due today."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Justification: If the user wants to gauge the amount of time spent on their tasks and how many tasks they have completed or an overview of their productivity in that day, it is easy to view all this information in one tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Highlights: This enhancement works with existing as well as future commands. An in-depth analysis of design alternatives was necessary to decide the layout of the productivity panel and how effective it was in improving overall user experience."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "The implementation was also challenging as it was difficult to decide how much data to present to users."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Credits: Stop and Start command classes were adapted from existing commands such as Edit command."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Minor enhancement:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "Added a command history that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d\u003d Other contributions:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Issues management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Out of a total of 95 issues from versions 1.0 to 1.4. I managed 42 of them on GitHub (examples: https://github.com/AY1920S2-CS2103T-F09-2/main/issues/163[#163] https://github.com/AY1920S2-CS2103T-F09-2/main/issues/263[#263])."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* User stories management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** There was a total of 30 user stories, for versions 1.0 to 1.4. I managed 10 of them."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Developer Guide:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*** Section 3.1, Delete Sequence diagram, whole section of 3.3, 4.1, 4.4, 4.7 +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "*** Appendix C, Use Case diagram, whole section of appendix C8, C9, D, E, F7, F8, F9, F10"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Language improvements to User Guide : PR https://github.com/AY1920S2-CS2103T-F09-2/main/pull/283[#283], https://github.com/AY1920S2-CS2103T-F09-2/main/pull/300[#300], https://github.com/AY1920S2-CS2103T-F09-2/main/pull/316[#316]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Replaced existing UML diagrams to ones that corresponds with our final product: PR https://github.com/AY1920S2-CS2103T-F09-2/main/pull/198[#198], https://github.com/AY1920S2-CS2103T-F09-2/main/pull/326[#326]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Added Use Case diagram and Activity diagrams for start command: PR https://github.com/AY1920S2-CS2103T-F09-2/main/pull/326[#326]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Added Sequence diagram for stop command: PR https://github.com/AY1920S2-CS2103T-F09-2/main/pull/328[#328]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Enhancement to existing features:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Added DateTime model to Task model to integrate deadlines."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Reviewed Pull Request: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/19[#19]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Reported 13 bugs and offered suggestions during PE dry run: https://github.com/Clouddoggo/ped/issues[issues]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Reviewed other team\u0027s DG: (examples: https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/25/files#r398983142[1],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/25/files#r398989484[2], https://github.com/nus-cs2103-AY1920S2/addressbook-level3/pull/25/files#r398987630[3])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "* Tools:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "** Integrated CI/CD tools (Appveyor and Coveralls) to the team repository."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d Contributions to User Guide (Extracts)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|_Below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dproductivitytracker]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfeedback]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003d\u003d Contributions to Developer Guide (Extracts)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|_Below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dproductivityImplementation]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dproductivityFunctions]"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 80
    }
  },
  {
    "path": "docs/team/eedenong.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d Ong Eden - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d PROJECT: JelphaBot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "JelphaBot is a desktop application that serves as a simple yet comprehensive task manager for NUS students."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "Interactions with the application and commands are entered through CLI. For a better user experience, JavaFX was used to create and enhance the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It is writtren in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Major enhancement*: added *the ability for users to have a summary view of their tasks due and completed within the day*."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** What it does: allows the user to have a simplified view of all the tasks that are due to be completed within the day, as well as the tasks that the user have completed within the day, under one page. This page is shown upon the startup of the application, and can be accessed anytime"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "while using the app by entering the `summary` command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Justification: In the event the user wishes to have a quick look at what tasks he/she has remaining to complete within the day, or to see what tasks he/she has completed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "within the day, the user can easily do so and view this information all under the same page, with just a single command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "This feature improves the product significantly with the convenience that it provides to the user in obtaining a quick but comprehensive overview of the above-mentioned tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*** This enhancement works with existing commands and commands to be added in future. It required an in-depth analysis of design alternatives so as to determine the optimal layout of the UI of the Summary panel to enhance the user experience as much as possible."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*** The implementation too was challenging as it required the creation of special predicates to filter the tasks in the user\u0027s task list to be displayed, as well as deciding on what information from the tasks to display to the users.  Eventually, I decided to display only the Module Code and the Description of the task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "*** Another challenge during the implementation was ensuring that the tasks that were completed within the day were still displayed when the user exits the application, and starts it again within the same day. This required extra data to be stored and hence required modification of classes in `Storage` to ensure that"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "the data was stored correctly."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/80[#80],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/172[#172],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/230[#230]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/243[#243]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Credits: The structure and the classes in the summary package (under `Model`) were inspired by that of the productivity package, which is under `Model` as well."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Minor enhancement*: added a `done` command that allows the user to mark a task with the given index as completed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/71[#71]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003deedenong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003deedenong\u0026tabRepo\u003dAY1920S2-CS2103T-F09-2%2Fmain%5Bmaster%5D[Functional Code]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003deedenong\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003deedenong\u0026tabRepo\u003dAY1920S2-CS2103T-F09-2%2Fmain%5Bmaster%5D[Test Code]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d Other contributions:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "---"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* Issues management:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Managed issues on GitHub:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/issues/92[#92],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/issues/97[#97],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/issues/101[#101],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/issues/113[#113]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* Enhancements to existing features:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Updated and shifted task list filtering logic in relevant Model and Logic classes and APIs so as to not break abstraction between the classes and roles of the classes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/170[#170]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* Documentation:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Replaced the Model class diagrams of the User Guide to make them the consistent with the structure of JelphaBot: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/189[#189]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Added documentation for SummaryCommand, ShowCompletedCommand and ShowIncompleteCommand in User Guide: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/189[#189]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Added documentation and sequence diagrams for SummaryCommand to Developer Guide: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/294[#294], https://github.com/AY1920S2-CS2103T-F09-2/main/pull/336[#336]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Added Use Cases UC4 to UC6: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/58[#58]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": "* Community:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** PRs reviewed: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/32[#32]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "** Reviewed other team\u0027s application to find and report https://github.com/eedenong/ped/issues[bugs]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsummary]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowcompleted]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowincomplete]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsummary]"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 82
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 66
    }
  },
  {
    "path": "docs/team/yaojiethng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d Thng Yao Jie - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d PROJECT: JelphaBot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot is a desktop application to help NUS students manage tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "JelphaBot allows students to track and manage tasks conveniently."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Users enter commands in JelphaBot through a CLI. However, a GUI is implemented with JavaFX for a smoother user experience."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d About this portfolio"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This portfolio lists my individual contributions to the JelphaBot."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "It includes a summary of the feature enhancements implemented and contribution to the User Guide and Developer Guide."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "It also details other contributions I made throughout the duration of the project to team-based tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Major enhancement*: added the ability for users to *group their tasks by time or module code*, as well as *provided interfaces for other developers to implement new grouping categories*."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** What it does: allows users to change the way their tasks are listed by switching between a list that shows:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Tasks listed by how soon their due date is to the current date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Tasks listed by their Module Code."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** *Justification*: Task management is the core feature of JelphaBot."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This feature improves the task management process significantly because it allows users to see at first glance their most urgent or important tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** *Highlights*:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** This feature involves full-stack development in `Logic`, `Model`, `Storage` and `Ui` components."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** As all other features use `Task` as the underlying Model entity, there was high coupling with features implemented by other groupmates."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** This enhancement affected existing commands as `GroupedTaskList` listed showed tasks in a different order from the underlying list stored in the model, and this order would vary depending on the `Category` displayed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** It required model objects to be queried from the displayed index in `Ui` instead of the the default order in `Model` (which was the order in which objects were implemented)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** The implementation was challenging as it required changes to be made to existing commands while still reducing conflict with other teammates\u0027 work."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "This required many design alternatives to be considered."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** All non-User-Interface classes added were backed up with tests."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/122[#122],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/161[#161],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/196[#196],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/204[#204],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/205[#205],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/212[#212],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/219[#219],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/228[#228],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/298[#298],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Minor enhancement*: Updated the Ui layout for each Task to allow tasks to be distinguished by priority."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Pull requests:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/196[#196],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/212[#212]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dyaojiethng\u0026tabRepo\u003dAY1920S2-CS2103T-F09-2%2Fmain%5Bmaster%5D[Functional code]] [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dyaojiethng\u0026tabRepo\u003dAY1920S2-CS2103T-F09-2%2Fmain%5Bmaster%5D[Test code]]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Managed releases `v1.1` - `v1.2` (2 releases) on GitHub."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Refactored `AddressBook 3` to `JelphaBot`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Pull requests: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/6[6],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/37[#37],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/24[#24],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/41[#41],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/47[#47])"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Updated the code-base to use Java 8 `LocalDateTime` instead of Java 7 `DateTime`, which fixed some deprecation issues."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Pull requests: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/159[#159])"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Updated `SampleDataUtil` to propagate an empty instance of the app with time-sensitive test data to streamline manual testing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "(Pull requests: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/129[#129])"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Updated Logic section from AB3, added diagrams and documentation for the implementation of Tab Grouping feature in Developer Guide."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Added documentation for Task List panel and List Command in User Guide."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "*** Integrated Github plugins (gh-pages, Travis, Netlify) to the team repository."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtasklist]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlist]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c\u003c\u003c"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtaskgroups]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 100,
      "Clouddoggo": 1
    }
  },
  {
    "path": "docs/team/yapdianhao.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Yap Dian Hao - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "JelphaBot is a desktop application to help NUS students manage tasks."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "JelphaBot allows students to track and manage tasks conveniently."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Users enter commands in JelphaBot through a CLI. However, a GUI is implemented with JavaFX for a smoother user experience."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "It is written in Java, and has about 13 kLoC."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability for users to add reminders to certain tasks*."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows users to add or remove reminders to remind tasks that will due soon to increase users\u0027 efficiency, including:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "*** Tasks that are uncompleted"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "*** Tasks that will due within a week"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: As our target users are students with a lot of commitments, students may miss out several"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "commitments over time. Therefore, they will need to manage their tasks and schedule upcoming tasks accordingly. Therefore,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "we have decided to include a reminding feature in JelphaBot to address this need. I implemented jelphaBot\u0027s ability"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "to link tasks and reminders, and combined them to maximize users\u0027 efficiency in fulfilling their commitments. This adds"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "significant feature to JelphaBot, as a task manager and a task reminder."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "*** This feature introduces a new class, `Reminder`, which plays the similar significance to `Task`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "The `Reminder` class is leveraged on the Object-Oriented paradigm that a `Task` needs to be reminded by a `Reminder`,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "therefore they are closely relatable to each other. To successfully design such a class that transcends a wide"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "range of components, a complete understanding and thorough analysis of the whole application is required."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "*** Challenging as it requires real time synchronization and integration between GUI and internal logic components."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "For instance, a user, when deletes a `Task`, should observe the deletion of its corresponding `Reminder` from the UI as well."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** This feature is implemented in a way that it undergoes the whole application\u0027s main components\u0027 development, in front-end"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "and back-end. It involves the `Ui`, `Logic`, `Model`, and `Storage`, with over 3k lines of functional and test code."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/88[#88],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/149[#149],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/167[#167],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/179[#179],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/207[#207],"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/309[#309],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/346[#346]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dyapdianhao\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse[Code contributed]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Increased code coverage from 58% to 62% through writing new tests and improved existing tests."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Relevant pull requests:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/33[#33],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "https://github.com/AY1920S2-CS2103T-F09-2/main/pull/76[#76]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancement to existing features:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/222[#222]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated JelphaBot\u0027s architecture diagram for Developer Guide."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the `Storage` component\u0027s sequence diagram for Developer Guide."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added screenshots and descriptions as visual aids for User Guide."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions: requesting usage for third-party libraries (controlsfx) https://github.com/nus-cs2103-AY1920S2/forum/issues/81[#81]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reviewed pull requests: https://github.com/AY1920S2-CS2103T-F09-2/main/pull/13[#13], https://github.com/AY1920S2-CS2103T-F09-2/main/pull/17[#17]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for another team in PE dry run: https://github.com/yapdianhao/ped/issues[Reported 15 bugs]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreminder]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminder]"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 71
    }
  },
  {
    "path": "docs/templates/_header.html.slim",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/ NOTE: You must restart the gradle daemon after modifying any template file for the changes to take effect."
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "- if !(attr? \u0027no-site-header\u0027) \u0026\u0026 (attr? \u0027site-seedu\u0027)"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  #seedu-header"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    nav.navbar.navbar-lg.navbar-light.bg-lighter"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "      .container"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        a.navbar-brand href\u003d\u0027https://se-edu.github.io/\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "          img src\u003d(site_url \u0027images/SeEduLogo.png\u0027) alt\u003d\u0027SE-EDU\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        ul.navbar-nav"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/addressbook-level1\u0027 AB-1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/addressbook-level2\u0027 AB-2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link.active href\u003d(site_url \u0027index.html\u0027) AB-3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/addressbook-level4\u0027 AB-4"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/collate\u0027 Collate"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/se-book\u0027 Book"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            a.nav-link href\u003d\u0027https://se-edu.github.io/learningresources\u0027 Resources"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "- if !(attr? \u0027no-site-header\u0027)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  #site-header"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    nav.navbar.navbar-light.bg-light"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      .container"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? \u0027site-name\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            a.navbar-brand href\u003d(site_url \u0027index.html\u0027) \u003d(attr \u0027site-name\u0027)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ul.navbar-nav"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027UserGuide\u0027, \u0027UserGuide.html\u0027, \u0027User Guide\u0027)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027DeveloperGuide\u0027, \u0027DeveloperGuide.html\u0027, \u0027Developer Guide\u0027)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          - if attr? \u0027site-seedu\u0027"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            li.nav-item"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003dnav_link(\u0027LearningOutcomes\u0027, \u0027LearningOutcomes.html\u0027, \u0027LOs\u0027)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027AboutUs\u0027, \u0027AboutUs.html\u0027, \u0027About Us\u0027)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          li.nav-item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003dnav_link(\u0027ContactUs\u0027, \u0027ContactUs.html\u0027, \u0027Contact Us\u0027)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          - if attr? \u0027site-githuburl\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            li.navitem"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "              a.nav-link href\u003d(attr \u0027site-githuburl\u0027)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                span.fa.fa-github.fa-lg aria-hidden\u003d\u0027true\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                | \u0026nbsp;View on GitHub"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/ AsciiDoc leaves an empty header div even if there\u0027s no doctitle"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "#header"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  - if has_header?"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    - unless notitle"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "      h1 \u003dheader.title"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    - if [:author, :revnumber, :revdate, :revremark].any? {|a| attr? a }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      .details"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :author"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          span.author#author \u003d(attr :author)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          br"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "          - if attr? :moduleCode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            span.moduleCode#moduleCode \u003dsub_macros(attr :moduleCode)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            br"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          - if (authorcount \u003d (attr :authorcount).to_i) \u003e 1"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            - (2..authorcount).each do |idx|"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "              span.author id\u003d\"author#{idx}\" \u003d(attr \"author_#{idx}\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              br"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "              - if attr? \"email_#{idx}\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                span.moduleCode id\u003d\"moduleCode#{idx}\" \u003dsub_macros(attr \"email_#{idx}\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revnumber"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revnumber #{((attr \u0027version-label\u0027) || \u0027\u0027).downcase} #{attr :revnumber}#{\u0027,\u0027 if attr? :revdate}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revdate"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revdate \u003dattr :revdate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        - if attr? :revremark"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          br"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "          span#revremark \u003d(attr :revremark)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  - if (attr? :toc) \u0026\u0026 (attr? \u0027toc-placement\u0027, \u0027auto\u0027)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    include _toc.html"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 73
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/jelphabot/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must implement the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "----"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 422
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.jelphabot.model.task.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "----"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "----"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 113
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.jelphabot.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.JelphaBotStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.JsonJelphaBotStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing JelphaBot ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            userPrefs.getJelphaBotFilePath(), userPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s task list and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The data from the sample task list will be used instead if {@code storage}\u0027s task list is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * or an empty task list will be used instead if errors occur when reading {@code storage}\u0027s task list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Optional\u003cReadOnlyJelphaBot\u003e jelphaBotOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyJelphaBot\u003e jelphaBotReminderOptional;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyJelphaBot initialData;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyJelphaBot initialReminderData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            jelphaBotOptional \u003d storage.readJelphaBot();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            jelphaBotReminderOptional \u003d storage.readJelphaBot(true);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (!jelphaBotOptional.isPresent()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample JelphaBot\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            initialData \u003d jelphaBotOptional.orElseGet(SampleDataUtil::getSampleJelphaBot);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            initialReminderData \u003d jelphaBotReminderOptional.orElseGet(SampleDataUtil::getSampleJelphaBot);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialReminderData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialReminderData \u003d new JelphaBot();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        initialData.setReminders(initialReminderData.getReminderList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty JelphaBot\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting JelphaBot \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping JelphaBot ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 3,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        windowCoordinates \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 6,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String LOG_FILE \u003d \"jelphabot.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command. Type \u0027help\u0027 for our user guide.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"Date should be one of these possible formats:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[d-MMM-uuuu], E.g. 1-Jan-2020\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[d/MMM/uuuu], E.g. 1/Jan/2020\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[MMM-d-uuuu], E.g. Jan-1-2020\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                 + \"[MMM/d/uuuu], E.g. Jan/1/2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_INVALID_YEARMONTH_FORMAT \u003d \"Invalid YearMonth format! YearMonth should be one \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"of these possible formats:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[MMM-uuuu], E.g. Jan-2020\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[MMM/uuuu], E.g. Jan/2020\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu/MMM], E.g. 2020/Jan\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu-MMM], E.g. 2020-Jan\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu-MM], E.g. 2020-01\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uuuu/MM], E.g. 2020/01\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uu-MM], E.g. 20-01\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                      + \"[uu/MM], E.g. 20/01\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_COMPLIMENT \u003d \"Good work! (:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_ENCOURAGEMENT \u003d \"You can do better than this!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_CRITICISM \u003d \"Do better! You have many unfinished tasks that are past their\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                       + \" due date!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_NO_TIMERS \u003d \"There are no tasks being timed at the moment.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 8,
      "-": 9,
      "alam8064": 16
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/DateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueAfterDatePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueBeforeDatePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Helper functions for handling dates."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time the method is called."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the current day\u0027s date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateToday() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time one day after the method is called."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the next day\u0027s date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateTomorrow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now().plusDays(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Get the date at the time one week after the method is called."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate representing the date one week from now."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate getDateNextWeek() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return LocalDate.now().plusWeeks(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Convert a Java7 Date object to a Java8 LocalDate object representing the same instant in time."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date Java7 Date object to be converted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate with the same date as the input Date."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDate dateToLocalDate(Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return date.toInstant()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .toLocalDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Convert a Java7 Date object to a Java8 LocalDateTime object representing the same instant in time."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param date Java7 Date object to be converted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return LocalDate with the same date and time as the input Date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static LocalDateTime dateToLocalDateTime(Date date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return date.toInstant()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .atZone(ZoneId.systemDefault())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   .toLocalDateTime();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date before the instant the method was called."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getOverduePredicate() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueBeforeDatePredicate();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date the same day as the instant the method was called."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueTodayPredicate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueAfterDatePredicate().and(new TaskDueBeforeDatePredicate(getDateTomorrow()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date between one and seven days after the instant the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * method was called."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueThisWeekPredicate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueAfterDatePredicate(getDateTomorrow()).and(new TaskDueBeforeDatePredicate(getDateNextWeek()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which filters tasks with a due date more than seven days after the instant the"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * method was called."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Predicate\u003cTask\u003e getDueSomedayPredicate() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new TaskDueAfterDatePredicate(getDateNextWeek());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 98
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            //return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return !s.startsWith(\"+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.PinnedTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the JelphaBot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.jelphabot.model.Model#getJelphaBot()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyJelphaBot getJelphaBot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of tasks in the Calendar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the completed tasks in the task list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByCompleteTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the tasks that were completed within the day."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByCompletedTodayTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks in the task list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByIncompleteTaskList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns a wrapper for categorised tasks in the task list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    GroupedTaskList getGroupedTaskList(Category category);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due today in"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * the task list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByIncompleteDueTodayTaskList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due soon,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * as specified by the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredByReminder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s productivity."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ProductivityList getProductivityList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s summary."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    SummaryList getSummaryList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the user prefs\u0027 jelphabot file path."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns the GUI settings for a popup window"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    GuiSettings getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    PinnedTaskList getPinnedTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 20,
      "Clouddoggo": 14,
      "eedenong": 22,
      "-": 57,
      "alam8064": 13
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueTodayPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.JelphaBotParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.predicates.ReminderPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskCompletedWithinDayPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.PinnedTaskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JelphaBotParser jelphaBotParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBotParser \u003d new JelphaBotParser();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d jelphaBotParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveJelphaBot(model.getJelphaBot());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            //storage.saveJelphaBot(model.getJelphaBot(), true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredReminderList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateReminderShowsTask();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getReminderShowsTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getJelphaBot();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return model.getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByCompleteTaskList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByCompletedTodayTaskList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskCompletedWithinDayPredicate pred \u003d new TaskCompletedWithinDayPredicate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, pred);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByReminder() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //logger.info(\"reached filtered by reminder\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ViewTaskList taskList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cReminder\u003e reminderList \u003d model.getReminderListFromJelphaBot();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ReminderPredicate reminderPredicate \u003d new ReminderPredicate(taskList, reminderList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //logger.info(\"\" + filteredList.size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return model.getFilteredTaskList().filtered(reminderPredicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByIncompleteTaskList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate taskIncompletePredicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredTasks, taskIncompletePredicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredByIncompleteDueTodayTaskList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e filteredTasks \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate taskIncompletePredicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        FilteredList\u003cTask\u003e filteredIncompleteList \u003d new FilteredList\u003c\u003e(filteredTasks, taskIncompletePredicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new FilteredList\u003c\u003e(filteredIncompleteList, getDueTodayPredicate());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getGroupedTaskList(category);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getPinnedTaskList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getProductivityList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getSummaryList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getRemindersFilePath();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return model.getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 4,
      "eedenong": 98,
      "-": 79,
      "alam8064": 6
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Adds a Task to the task list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"Parameters: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_DATETIME + \"DATETIME in format MMM-dd-YYYY HH mm\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + PREFIX_MODULE_CODE + \"MODULE_CODE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \" + \"[\" + PREFIX_PRIORITY + \"PRIORITY (-1, 0 or 1), DEFAULTS TO 1]\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + \"    \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Assignment 1 \" + PREFIX_DATETIME + \"Jan-01-2020 23 59 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS3230 \" + PREFIX_PRIORITY + \"1\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), true, false, false));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 10,
      "Clouddoggo": 4,
      "eedenong": 2,
      "-": 47,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/CalendarCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Lists all tasks in task list whose date corresponds with the specified date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Shows the tasks that are due on the specified date."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":C\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":c\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    //update this"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all task that is under the due date specified.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                   + \"Parameters: DATE \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" Jan-1-2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to calendar panel.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_CALENDAR_VIEW_ACKNOWLEDGEMENT \u003d \"Switched calendar panel to : %s, %s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_SWITCH_CALENDAR_TODAY_ACKNOWLEDGEMENT \u003d \"Switched calendar panel back to : \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                                   + \"%s, %s. Displaying all your tasks\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                                                                   + \" that are due today!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final TaskDueWithinDayPredicate predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final YearMonth yearMonth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private boolean isToday;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private boolean isMonth;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        yearMonth \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(TaskDueWithinDayPredicate predicate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        yearMonth \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate firstDayOfMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d new TaskDueWithinDayPredicate(firstDayOfMonth);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        isMonth \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand(TaskDueWithinDayPredicate predicate, boolean today) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.isToday \u003d today;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        yearMonth \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (predicate \u003d\u003d null \u0026\u0026 yearMonth \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, false, false).isShowCalendar();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (isToday) { //switch calendar view and task list for today"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate date \u003d predicate.getDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SWITCH_CALENDAR_TODAY_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                CalendarDate.getMonthNameOf(date.getMonthValue()), date.getYear()), null, null);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (isMonth) { //switch calendar view"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SWITCH_CALENDAR_VIEW_ACKNOWLEDGEMENT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                CalendarDate.getMonthNameOf(yearMonth.getMonthValue()), yearMonth.getYear()), null, yearMonth);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else { //switch task list for specific dates"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate date \u003d predicate.getDate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    model.getFilteredCalendarTaskList().size()), date, null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 predicate.equals(((CalendarCommand) other).predicate)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 yearMonth \u003d\u003d null \u0026\u0026 ((CalendarCommand) other).yearMonth \u003d\u003d null)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   || (other instanceof CalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 predicate.equals(((CalendarCommand) other).predicate)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 yearMonth.equals(((CalendarCommand) other).yearMonth)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alam8064": 102
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Clears the task list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all tasks in the list permanently.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"JelphaBot has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setJelphaBot(new JelphaBot());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), true, true, true));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 7,
      "eedenong": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private boolean calendarCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private YearMonth yearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private SwitchTab toSwitch \u003d SwitchTab.STAY_ON_CURRENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CommandResult(String feedbackToUser, LocalDate date, YearMonth yearMonth) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.yearMonth \u003d yearMonth;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.calendarCommand \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Task List tab"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"switch to window\" flag to Task List."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowDateTaskList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.TASK_LIST_DATE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Task List tab"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"switch to window\" flag to Task List."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowModuleTaskList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.TASK_LIST_MODULE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public YearMonth getYearMonth() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return yearMonth;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isCalendarCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarCommand;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the productivity tab."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Productivity."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowProductivity() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.PRODUCTIVITY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Calendar tab."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Calendar."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowCalendar() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.CALENDAR;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The application should switch to the Summary tab."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Summary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult isShowSummary() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.toSwitch \u003d SwitchTab.SUMMARY;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The application should switch to the Calendar tab."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return Sets the \"toSwitch\" flag to Calendar."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult isShowReminder() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.toSwitch \u003d SwitchTab.REMINDER;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public SwitchTab getTabSwitch() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return toSwitch;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   \u0026\u0026 toSwitch \u003d\u003d otherCommandResult.toSwitch;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, toSwitch);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Enum representing switch that indicates if the command should switch to another window."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public enum SwitchTab {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CALENDAR,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        PRODUCTIVITY,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SUMMARY,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TASK_LIST_DATE,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TASK_LIST_MODULE,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        STAY_ON_CURRENT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        REMINDER"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 67,
      "Clouddoggo": 12,
      "eedenong": 3,
      "-": 64,
      "alam8064": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Deletes a task identified using it\u0027s displayed index from the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \": Deletes the task identified by the index number used in the \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"displayed task list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DELETE_RUNNING_TASK \u003d \"Deleted Task with running timer: %1$s \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size() || targetIndex.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult fromDeleteReminderCommand \u003d new DeleteReminderCommand(targetIndex).execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), true, true, true));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (taskToDelete.isBeingTimed()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_RUNNING_TASK, taskToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                   || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 9,
      "Clouddoggo": 13,
      "eedenong": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Marks the specified as done by updating it\u0027s status to COMPLETE."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        + \": Marks the task specified by the index number as completed.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_MARK_TASK_COMPLETE_SUCCESS \u003d \"Marked task as completed: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_MARKED_COMPLETE \u003d \"The specified task has already \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                          + \"been marked as complete!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_STOP_TASK_FIRST \u003d \"Please stop timer for this task before marking it as done!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param index of the task in the filtered task list to mark done"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public DoneCommand(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task taskToMarkDone \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (taskToMarkDone.isBeingTimed()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new CommandException(MESSAGE_STOP_TASK_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        boolean isSameTask \u003d taskToMarkDone.equals(doneTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (isSameTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), true, false, false));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Creates and returns a {@code Task} with the updated COMPLETE status, and updated DoneTime."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * DoneTime is set according to the time that the task was marked done."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Creation of the {@code Task} is done by copying all the details of the given {@code Task}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * and creating a new {@code Task} object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param task Task object to get the relevant details from."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return Task object with it\u0027s status set as COMPLETE."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static Task createDoneTask(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Description description \u003d task.getDescription();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModuleCode moduleCode \u003d task.getModuleCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dateTime \u003d task.getDateTime();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Status status \u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String doneTimeString \u003d LocalDateTime.now().format(DateTime.STANDARD_FORMATTER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        LocalDateTime doneTime \u003d LocalDateTime.parse(doneTimeString, DateTime.STANDARD_FORMATTER);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Priority priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TimeSpent timeSpent \u003d task.getTimeSpent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new Task(description, status, dateTime, doneTime, moduleCode, priority, tags, timeSpent);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Creates and returns a {@code Task} with the updated COMPLETE status, and updated DoneTime."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * DoneTime is set according to the String representing the time the task was completed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Creation of the {@code Task} is done by copying all the details of the given {@code Task}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * and creating a new {@code Task} object."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param task Task object to get the relevant details from."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param doneTimeString String representing the time that the task was marked done."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return Task object with it\u0027s status set as COMPLETE and it\u0027s doneTime set as the doneTimeString."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    protected static Task createDoneTask(Task task, String doneTimeString) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Description description \u003d task.getDescription();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModuleCode moduleCode \u003d task.getModuleCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dateTime \u003d task.getDateTime();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Status status \u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        LocalDateTime doneTime \u003d LocalDateTime.parse(doneTimeString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Priority priority \u003d task.getPriority();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TimeSpent timeSpent \u003d task.getTimeSpent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new Task(description, status, dateTime, doneTime, moduleCode, priority, tags, timeSpent);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!(other instanceof DoneCommand)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand d \u003d (DoneCommand) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return index.equals(d.index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 142
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Edits the details of an existing task in the task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters:\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_DATETIME + \"DATETIME]\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_MODULE_CODE + \"MODULE_CODE]\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_PRIORITY + \"PRIORITY (-1, 0, or 1)]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"    \" + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_MODULE_CODE + \"CS2105 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + PREFIX_DATETIME + \"Jan-1-2020 20 20 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                                   + PREFIX_TAG + \"Ungraded\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_CANNOT_EDIT_TASK \u003d \"This task cannot be edited while the timer is running.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param index              of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * edited with {@code editTaskDescriptor}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Description updatedDescription \u003d editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editTaskDescriptor.getModuleCode().orElse(taskToEdit.getModuleCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DateTime dateTime \u003d editTaskDescriptor.getDateTime().orElse(taskToEdit.getDateTime());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Status updatedStatus \u003d taskToEdit.getStatus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Priority updatedPriority \u003d editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TimeSpent timeSpent \u003d taskToEdit.getTimeSpent();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new Task(updatedDescription, updatedStatus, dateTime, updatedModuleCode, updatedPriority, updatedTags,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            timeSpent"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size() || index.getZeroBased() \u003c 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (taskToEdit.isBeingTimed()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_CANNOT_EDIT_TASK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), true, false, false));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * replace the corresponding field value of the task."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        private DateTime dateTime;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public EditTaskDescriptor() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Copy constructor. A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            setDateTime(toCopy.dateTime);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, dateTime, moduleCode, tags, priority);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code tags} is used internally."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * Returns an unmodifiable tag set, which throws"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code UnsupportedOperationException} if modification is attempted. Returns"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setDateTime(DateTime dateTime) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public Optional\u003cDateTime\u003e getDateTime() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return Optional.ofNullable(dateTime);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            return getDescription().equals(e.getDescription()) \u0026\u0026 getDateTime().equals(e.getDateTime())"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                       \u0026\u0026 getModuleCode().equals(e.getModuleCode())"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                       \u0026\u0026 getPriority().equals(e.getPriority()) \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 54,
      "Clouddoggo": 41,
      "eedenong": 3,
      "-": 138,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program and closes the window.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting JelphaBot as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Finds and lists all tasks in task list whose task description contains any of the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * argument keywords. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\" + \"Example: \" + COMMAND_WORD + \" assignment\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW, model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 6,
      "-": 29,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Lists all tasks in the task list to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String COMMAND_SHORTCUT \u003d \":T\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String COMMAND_SHORTCUT_TWO \u003d \":t\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATE_GROUPING \u003d \"date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MODULE_GROUPING \u003d \"module\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks by %s.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to Task List panel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches to Task List panel and lists all tasks.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"This command groups tasks by Date by default, but you can also \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"group by module. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + DATE_GROUPING + \"]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"    \" + \"[\" + MODULE_GROUPING + \"]\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD + \" module\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String grouping;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.grouping \u003d \"none\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand(String grouping) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.grouping \u003d grouping;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (grouping) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"module\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, grouping)).isShowModuleTaskList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, grouping)).isShowDateTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case \"none\": // Fallthrough"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 51,
      "Clouddoggo": 2,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ProductivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Switches to the productivity panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"productivity\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":P\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":p\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows productivity panel.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to productivity panel.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowProductivity();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 22
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ShowCompletedCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Displays to the user a list of tasks that are currently of the COMPLETE status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowCompletedCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show-completed\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all completed tasks in the task list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying all completed tasks\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final Predicate\u003cTask\u003e COMPLETED_PREDICATE \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(COMPLETED_PREDICATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (model.getFilteredTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(\"\\nYou do not have any tasks that are complete!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(sb.toString()).isShowDateTaskList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 34
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/ShowIncompleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Displays to the user a list of tasks that are currently of the INCOMPLETE status."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowIncompleteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"show-incomplete\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows all incomplete tasks in the task list\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Displaying all incomplete tasks\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final Predicate\u003cTask\u003e INCOMPLETE_PREDICATE \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(INCOMPLETE_PREDICATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (model.getFilteredTaskList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(\"\\nYou do not have any tasks that are incomplete!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(sb.toString()).isShowDateTaskList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 35
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/StartTimerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Starts a timer for a task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StartTimerCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"start\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \": Starts the timer for the task specified by the index number.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Started timer for task %d. %s %s.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_TASK_ALREADY_TIMED \u003d \"This task has already been marked as done and cannot be \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                                + \"timed.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_TIMER_ALREADY_STARTED \u003d \"Timer for this task has already been started.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StartTimerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskToTime \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (taskToTime.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_TASK_ALREADY_TIMED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (taskToTime.isBeingTimed()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_TIMER_ALREADY_STARTED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskToTime.startTimer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), false, true, false));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToTime.getModuleCode().toString(), taskToTime.getDescription().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof StartTimerCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand d \u003d (StartTimerCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return targetIndex.equals(d.targetIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 78
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/StopTimerCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Starts a timer for a task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StopTimerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stop\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \": Stops the timer for the task specified by the index number.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + \"Parameters: INDEX (must be a positive integer)\\n\" + \"Example: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                   + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Stopped timer for task %d. %s %s.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                                     + \"Total time spent on this task: %s.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_NO_TIMER_TO_STOP \u003d \"No timers were started.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StopTimerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ViewTaskList lastShownList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskToStop \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task dummy \u003d taskToStop;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!taskToStop.isBeingTimed()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new CommandException(MESSAGE_NO_TIMER_TO_STOP);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskToStop.stopTimer();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setTask(dummy, taskToStop);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.setProductivity(new Productivity(model.getFilteredTaskList(), false, false, true));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetIndex.getOneBased(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToStop.getModuleCode().toString(), taskToStop.getDescription().toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskToStop.getTimeSpent().toString()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof StopTimerCommand)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand d \u003d (StopTimerCommand) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return targetIndex.equals(d.targetIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 76
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/SummaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Switches to the summary panel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"summary\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_SHORTCUT_UPPER \u003d \":S\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String COMMAND_SHORTCUT_LOWER \u003d \":s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows summary panel.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT \u003d \"Switched to summary panel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.setSummary(new Summary(model.getFilteredTaskList()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, false, false).isShowSummary();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        PREFIX_DATETIME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        PREFIX_TAG"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_MODULE_CODE, PREFIX_DATETIME)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime dateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //noinspection OptionalGetWithoutIsPresent guaranteed present return from ParserUtil"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Priority priority \u003d Priority.MEDIUM;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task task \u003d new Task(description, Status.INCOMPLETE, dateTime, moduleCode, priority, tagList,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            new TimeSpent(Duration.ZERO));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14,
      "Clouddoggo": 6,
      "-": 54,
      "alam8064": 3
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/CalendarCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Parses input argument and creates a new CalendarCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandParser implements Parser\u003cCalendarCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final DateTimeFormatter ACCEPTED_DATE_FORMATS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM/d/uuuu\"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d-MMM-uuuu\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"d/MMM/uuuu\"))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .toFormatter().withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final DateTimeFormatter ACCEPTED_YEARMONTH_FORMATS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM-uuuu\"))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"MMM/uuuu\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu/MMM\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu-MMM\"))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu-MM\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uuuu/MM\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uu-MM\"))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .appendOptional(DateTimeFormatter.ofPattern(\"uu/MM\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .toFormatter().withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Parses the given {@code String} of argument in the context of the CalendarCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * and returns a CalendarCommand object for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String input \u003d args.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            // throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //     String.format(MESSAGE_INVALID_COMMAND_FORMAT, CalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (input.length() \u003e 8) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //case for switching date for task list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (!isValidDate(input)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_DATE_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(input, ACCEPTED_DATE_FORMATS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(new TaskDueWithinDayPredicate(date));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (input.equals(\"today\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(new TaskDueWithinDayPredicate(DateUtil.getDateToday()), true);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            //case for switching month view"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (!isValidYearMonth(input)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                throw new ParseException(Messages.MESSAGE_INVALID_YEARMONTH_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth yearMonth \u003d YearMonth.parse(input, ACCEPTED_YEARMONTH_FORMATS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommand(yearMonth);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns if the given string is a valid date format, specified in"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * the ACCEPTED_DATE_FORMATS DateTimeFormatter."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param test The date to be checked."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return The boolean representing whether the date provided is valid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate.parse(test, ACCEPTED_DATE_FORMATS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns if the given string is a valid date format, specified in"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * the ACCEPTED_YEARMONTH_FORMATS DateTimeFormatter."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param test The date of yearmonth to be checked."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return The boolean representing whether the date provided is valid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static boolean isValidYearMonth(String test) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth.parse(test, ACCEPTED_YEARMONTH_FORMATS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 105
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REMIND_DAY \u003d new Prefix(\"days/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_REMIND_HOUR \u003d new Prefix(\"hours/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of DoneCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * and returns a DoneCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return a DoneCommand object to be used for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new DoneCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 32
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                args,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_DATETIME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                PREFIX_TAG"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setDescription("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setDateTime("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_DATETIME).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_CODE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            editTaskDescriptor.setModuleCode(ParserUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                .parseModuleCode(argMultimap.getValue(PREFIX_MODULE_CODE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                 .parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 34,
      "Clouddoggo": 1,
      "-": 56,
      "alam8064": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/JelphaBotParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteReminderCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.ProductivityCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ReminderTabCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.ShowCompletedCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.ShowIncompleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StartTimerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StopTimerCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class JelphaBotParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteReminderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new ClearCommand(), ClearCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ListCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.COMMAND_SHORTCUT: // fallthrough"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ListCommand.COMMAND_SHORTCUT_TWO:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new ExitCommand(), ExitCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new HelpCommand(), HelpCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ReminderCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ReminderCommand.COMMAND_WORD_UPPER: // fallthrough"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ReminderCommand.COMMAND_WORD_LOWER:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ReminderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ReminderTabCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return getCommand(arguments, new ReminderTabCommand(), ReminderTabCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case ShowCompletedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new ShowCompletedCommand(), ShowCompletedCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case ShowIncompleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new ShowIncompleteCommand(), ShowIncompleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case CalendarCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return new CalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case SummaryCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new SummaryCommand(), SummaryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_WORD: // fallthrough"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_SHORTCUT_UPPER: // fallthrough"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case ProductivityCommand.COMMAND_SHORTCUT_LOWER:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return getCommand(arguments, new ProductivityCommand(), ProductivityCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case StartTimerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StartTimerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        case StopTimerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StopTimerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static Command getCommand(String arguments, Command command, String message) throws ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (arguments.length() \u003e 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, message));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 37,
      "eedenong": 11,
      "-": 81,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Parses input argument and creates a new ListCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ListCommandParser implements Parser\u003cListCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String input \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (input.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.DATE_GROUPING:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand(\"date\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        case ListCommand.MODULE_GROUPING:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new ListCommand(\"module\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 29
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderDay;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderHour;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Description}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String dateTime} into an {@code dateTime}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code dateTime} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String trimmedDatetime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDatetime)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new DateTime(trimmedDatetime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String module code} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code module code} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Priority.toPriority(trimmedPriority);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String reminderDay} into a {@code ReminderDay}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code reminderDay} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReminderDay parseReminderDay(String reminderDay) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reminderDay);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedReminderDay \u003d reminderDay.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //int convertedReminderDay \u003d Integer.parseInt(trimmedReminderDay);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ReminderDay.isValidReminderDay(trimmedReminderDay)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ReminderDay.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //int convertedReminderDay \u003d Integer.parseInt(trimmedReminderDay);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ReminderDay(trimmedReminderDay);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String reminderHour} into a {@code ReminderHour}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code reminderHour} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReminderHour parseReminderHour(String reminderHour) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reminderHour);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedReminderHour \u003d reminderHour.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //int convertedReminderHour \u003d Integer.parseInt(trimmedReminderHour);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ReminderHour.isValidReminderHour(trimmedReminderHour)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ReminderHour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ReminderHour(trimmedReminderHour);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 42,
      "Clouddoggo": 2,
      "-": 111,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/StartTimerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StartTimerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Parses input arguments and creates a new StartTimerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StartTimerCommandParser implements Parser\u003cStartTimerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of StartTimerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * and returns a StartTimerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return a StartTimerCommand object to be used for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StartTimerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StartTimerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartTimerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 30
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/logic/parser/StopTimerCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StopTimerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Parses input arguments and creates a new StopTimerCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class StopTimerCommandParser implements Parser\u003cStopTimerCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of StartTimerCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * and returns a StartTimerCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @param args user arguments."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return a StartTimerCommand object to be used for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public StopTimerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new StopTimerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopTimerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 31
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/JelphaBot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.UniqueReminderList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.UniqueReminderShowsTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JelphaBot implements ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReminder\u003e reminderList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final UniqueTaskList tasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueReminderList reminders;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueReminderShowsTaskList reminderShowsTaskList \u003d new UniqueReminderShowsTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        reminders \u003d new UniqueReminderList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBot() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates an JelphaBot using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBot(ReadOnlyJelphaBot toBeCopied) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminders.setReminders(reminders);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setReminderShowsTasks(List\u003cReminderShowsTask\u003e reminderShowsTasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminderShowsTaskList.setReminderShowsTasks(reminderShowsTasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code JelphaBot} with {@code newData}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyJelphaBot newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : newData.getTaskList()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            taskList.add(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Reminder reminder : newData.getReminderList()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderList.add(reminder);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setReminders(newData.getReminderList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setReminderShowsTasks(newData.getReminderShowsTaskList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the JelphaBot."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a reminder with the same identity as {@code reminder} exists in JelphaBot."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminders.contains(reminder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if a task is currently being timed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTaskBeingTimed() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.hasTaskBeingTimed();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a task to the task list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must not already exist in the task list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addTask(Task p) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.add(p);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addReminder(Reminder r) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        reminders.add(r);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code target} must exist in the task list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code JelphaBot}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code key} must exist in the task list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeReminder(Reminder key) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        reminders.remove(key);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * adds the ReminderShowsTask Object to the panel."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addReminderShowsTask(Reminder reminder, ViewTaskList lastShownList) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d lastShownList.get(reminder.getIndex().getZeroBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderShowsTask reminderShowsTask \u003d new ReminderShowsTask(reminder, task);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderShowsTaskList.add(reminderShowsTask);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * deletes the ReminderShowsTask Object from the panel list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteReminderShowsTask(Reminder reminder, ViewTaskList lastShownList) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d lastShownList.get(reminder.getIndex().getZeroBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderShowsTask reminderShowsTask \u003d new ReminderShowsTask(reminder, task);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderShowsTaskList.remove(reminderShowsTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderShowsTaskList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cTask\u003e getTasksAsList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cReminder\u003e getRemindersAsList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderList;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the reminder list panel after adding / delete a reminder."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateReminderShowsTask(ViewTaskList viewTaskList) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Reminder reminder : getReminderList()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            int idx \u003d reminder.getIndex().getZeroBased();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Task currTask \u003d viewTaskList.get(idx);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            ReminderShowsTask reminderShowsTask \u003d new ReminderShowsTask(reminder, currTask);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderShowsTaskList.add(reminderShowsTask);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof JelphaBot // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u0026\u0026 tasks.equals(((JelphaBot) other).tasks));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 34,
      "-": 179
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.PinnedTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns the GUI settings for a popup window"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    GuiSettings getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the user prefs\u0027 task list file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Sets the user prefs\u0027 task list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void setJelphaBotFilePath(Path jelphaBotFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns the JelphaBot"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyJelphaBot getJelphaBot();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces jelphaBot data with the data in {@code jelphaBot}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void setJelphaBot(ReadOnlyJelphaBot jelphaBot);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the task list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasReminder(Reminder reminder);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must exist in the task list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given reminder."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteReminder(Reminder reminder);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code task} must not already exist in the task list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void addReminder(Reminder reminder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code target} must exist in the task list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the task list."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the existing productivity with {@code productivity}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void setProductivity(Productivity productivity);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Replaces the existing summary with {@code summary}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void setSummary(Summary summary);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    PinnedTaskList getPinnedTaskList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    ViewTaskList getLastShownList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminder\u003e getFilteredReminderList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns an unmodifiable view of the filtered task list in the Calendar"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredCalendarTaskList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    List\u003cTask\u003e getTaskListFromJelphaBot();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    List\u003cReminder\u003e getReminderListFromJelphaBot();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the incomplete tasks that are due soon,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * as specified by the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    //public ObservableList\u003cTask\u003e getFilteredByReminder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s productivity."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    ProductivityList getProductivityList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an unmodifiable view of the user\u0027s summary."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    SummaryList getSummaryList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateReminderShowsTask();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 31,
      "Clouddoggo": 32,
      "eedenong": 20,
      "-": 89,
      "alam8064": 8
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.PinnedTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the in-memory model of the task list data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JelphaBot readOnlyJelphaBot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cReminder\u003e filteredReminders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredCalendarTasks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ProductivityList productivityList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final SummaryList summaryList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private GroupedTaskList lastShownList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given readOnlyJelphaBot and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyJelphaBot readOnlyJelphaBot, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(readOnlyJelphaBot, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        logger.fine(\"Initializing with task list: \" + readOnlyJelphaBot + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.readOnlyJelphaBot \u003d new JelphaBot(readOnlyJelphaBot);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getTaskList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredReminders \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getReminderList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        filteredCalendarTasks \u003d new FilteredList\u003c\u003e(this.readOnlyJelphaBot.getTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityList \u003d new ProductivityList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList \u003d new SummaryList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        lastShownList \u003d getGroupedTaskList(GroupedTaskList.Category.DATE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new JelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return userPrefs.getPopUpWindowGuiSettings();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getRemindersFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBotFilePath(Path readOnlyJelphaBotFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(readOnlyJelphaBotFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setJelphaBotFilePath(readOnlyJelphaBotFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBotReminderFilePath(Path reminderFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(reminderFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setJelphaBotReminderFilePath(reminderFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JelphaBot \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return readOnlyJelphaBot;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBot(ReadOnlyJelphaBot readOnlyJelphaBot) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.readOnlyJelphaBot.resetData(readOnlyJelphaBot);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return readOnlyJelphaBot.hasTask(task);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reminder);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return readOnlyJelphaBot.hasReminder(reminder);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.removeTask(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.deleteReminderShowsTask(reminder, getLastShownList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.removeReminder(reminder);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        //updateReminderShowsTask();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.addTask(task);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.addReminderShowsTask(reminder, getLastShownList());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.addReminder(reminder);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        //updateReminderShowsTask();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateReminderShowsTask() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.updateReminderShowsTask(getLastShownList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        readOnlyJelphaBot.setTask(target, editedTask);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Productivity List"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(productivity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityList.setProductivity(productivity);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return productivityList;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Summary List"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(summary);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList.setSummary(summary);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return summaryList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * internal list of {@code versionedJelphaBot}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (lastShownList \u003d\u003d null || lastShownList.getCategory() !\u003d category) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            lastShownList \u003d GroupedTaskList.makeGroupedTaskList("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                getFilteredTaskList(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                category,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                getPinnedTaskList()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            );"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return lastShownList;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // TODO implement pinned tasks"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new PinnedTaskList(filteredTasks.filtered(task -\u003e false), Bindings.createIntegerBinding(() -\u003e 0));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ViewTaskList getLastShownList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return lastShownList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredReminders;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.readOnlyJelphaBot.getReminderShowsTaskList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return filteredCalendarTasks;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public List\u003cTask\u003e getTaskListFromJelphaBot() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.readOnlyJelphaBot.getTasksAsList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public List\u003cReminder\u003e getReminderListFromJelphaBot() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.readOnlyJelphaBot.getRemindersAsList();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the filter of the filtered calendar task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        filteredCalendarTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return readOnlyJelphaBot.equals(other.readOnlyJelphaBot) \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 44,
      "Clouddoggo": 28,
      "eedenong": 29,
      "-": 176,
      "alam8064": 18
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ReadOnlyJelphaBot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Unmodifiable view of an task list"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminder\u003e getReminderList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setTasks(List\u003cTask\u003e tasks);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setReminders(List\u003cReminder\u003e reminders);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 3,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getRemindersFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Path jelphaBotFilePath \u003d Paths.get(\"data\" , \"jelphabot.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path remindersFilePath \u003d Paths.get(\"data\", \"reminder.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setJelphaBotFilePath(newUserPrefs.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setJelphaBotReminderFilePath(newUserPrefs.getRemindersFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // create a new GuiSettings object with smaller dimensions than the default"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new GuiSettings(540.0, 400.0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return jelphaBotFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return remindersFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setJelphaBotFilePath(Path jelphaBotFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(jelphaBotFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.jelphaBotFilePath \u003d jelphaBotFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBotReminderFilePath(Path remindersFilePath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(remindersFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remindersFilePath \u003d remindersFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u0026\u0026 jelphaBotFilePath.equals(o.jelphaBotFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return Objects.hash(guiSettings, jelphaBotFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + jelphaBotFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 8,
      "eedenong": 5,
      "-": 89
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/calendar/CalendarDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Class representing a date without time, mainly for the calendar UI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarDate {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String[] months \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate(LocalDate date) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static CalendarDate getCurrentDate() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(DateUtil.getDateToday());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isToday() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.equals(DateUtil.getDateToday());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getDayOfMonth();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getMonthValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getYear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public String getMonthName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return months[getMonth() - 1];"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static String getMonthNameOf(int monthValue) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return months[monthValue - 1];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getDayOfWeek() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return date.getDayOfWeek().getValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate getFirstDay() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(date.minusDays(getDay() - 1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getLengthPrevMonth() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate prevMonth \u003d date.minusMonths(1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return prevMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Creates a date of the previous month with the specified day input."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param day Specified day for the previous month."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @return CalendarDate object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate createPrevMonthDate(int day) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate prevMonth \u003d date.minusMonths(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate datePrevMonth \u003d prevMonth.withDayOfMonth(day);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(datePrevMonth);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isSameMonth(int month) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return getMonth() \u003d\u003d month;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate dateNextDay() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return new CalendarDate(date.plusDays(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   || (other instanceof CalendarDate // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                           \u0026\u0026 date.equals(((CalendarDate) other).date)); // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 92
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/Productivity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueSomedayPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueThisWeekPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getOverduePredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the overall productivity of the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class Productivity {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static TasksCompleted tasksCompleted;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static RunningTimers runningTimers;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static TimeSpentToday timeSpentToday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // booleans to decide which sub-productivity needs to be re-rendered."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean hasNewOrEditedTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean hasNewTimer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean hasChangeInTimeSpent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Productivity(ObservableList\u003cTask\u003e taskList, boolean hasNewOrEditedTasks, boolean hasNewTimer,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        boolean hasChangeInTimeSpent) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.hasNewOrEditedTasks \u003d hasNewOrEditedTasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.hasNewTimer \u003d hasNewTimer;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.hasChangeInTimeSpent \u003d hasChangeInTimeSpent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        createProductivites();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TasksCompleted getTasksCompleted() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasksCompleted;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public RunningTimers getRunningTimers() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return runningTimers;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpentToday getTimeSpentToday() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return timeSpentToday;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Creates the respective productivity objects."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void createProductivites() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e tasksDueToday \u003d taskList.filtered(new TaskDueWithinDayPredicate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e tasksDueThisWeek \u003d taskList.filtered(getDueThisWeekPredicate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (tasksCompleted \u003d\u003d null || hasNewOrEditedTasks) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            tasksCompleted \u003d new TasksCompleted(tasksDueToday, tasksDueThisWeek,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                taskList.filtered(getOverduePredicate()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (runningTimers \u003d\u003d null || hasNewTimer) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            runningTimers \u003d new RunningTimers(taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (timeSpentToday \u003d\u003d null || hasChangeInTimeSpent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            timeSpentToday \u003d new TimeSpentToday(tasksDueToday, tasksDueThisWeek,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                taskList.filtered(getDueSomedayPredicate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 71
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/ProductivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A list of productivity that does not allow nulls"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Only allows set and add list operations."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityList implements Iterable\u003cProductivity\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cProductivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final ObservableList\u003cProductivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a productivity to the list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addProductivity(Productivity toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Clears the list and adds {@code productivity} into the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(productivity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        internalList.add(productivity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ObservableList\u003cProductivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Iterator\u003cProductivity\u003e iterator() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   || (other instanceof ProductivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           \u0026\u0026 internalList.equals(((ProductivityList) other).internalList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 60
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/RunningTimers.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_NO_TIMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the timer that is currently running for the user\u0027s task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class RunningTimers {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean hasTimers;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public RunningTimers(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Gets the tasks with running timers.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @return String representation of the tasks\u0027 Description and DateTime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getTasksWithTimers() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StringBuilder tasksWithTimers \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task t : taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (t.isBeingTimed()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                hasTimers \u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                tasksWithTimers.append(String.format(\"Task: %s %s, Deadline: %s\\n\", t.getModuleCode(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    t.getDescription(), t.getDateTime()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasksWithTimers.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String timers \u003d getTasksWithTimers();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!hasTimers) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return MESSAGE_NO_TIMERS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return String.format(\"Timer is currently running for:\\n%s\", timers);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 47
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/TasksCompleted.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_COMPLIMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_CRITICISM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_ENCOURAGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Highlights overdue tasks if any, and mentions number of tasks completed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TasksCompleted {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueThisWeek;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e overdueTasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private double percentage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TasksCompleted(ObservableList\u003cTask\u003e tasksDueToday, ObservableList\u003cTask\u003e tasksDueThisWeek,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e overdueTasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(tasksDueToday, tasksDueThisWeek, overdueTasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueToday \u003d tasksDueToday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueThisWeek \u003d tasksDueThisWeek;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.overdueTasks \u003d overdueTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.percentage \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getCompletionStatus() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        double size \u003d tasksDueThisWeek.size() + tasksDueToday.size();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        double completed \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : tasksDueThisWeek) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (task.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                completed++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : tasksDueToday) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (task.getStatus() \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                completed++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String message \u003d \"There are no tasks to complete today!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (size \u003e 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            double percentage \u003d completed / size;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            this.percentage \u003d percentage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (percentage \u003e 0.7) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Great work today!\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else if (percentage \u003e 0.4) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Not bad but let\u0027s do better.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                message \u003d \"Wow! It must feel great to have accomplished so little today!\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return String.format(\"%.0f out of %.0f done.\\n%s\", completed,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                size, message);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return String.format(\"No tasks due today!\\n%s\", message);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the number of incomplete overdue tasks and provides criticism or encouragement depending on the number."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getOverdueStatus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        int n \u003d overdueTasks.filtered(new TaskIsIncompletePredicate()).size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StringBuilder response \u003d new StringBuilder(\"There \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (n \u003e 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"are \").append(n).append(\" overdue tasks that are incomplete.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (n \u003d\u003d 1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"is \").append(n).append(\" an overdue task that is incomplete.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            response.append(\"are no overdue tasks that are incomplete.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return response.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getRemark() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        int n \u003d overdueTasks.filtered(new TaskIsIncompletePredicate()).size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (n \u003e 3) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return MESSAGE_CRITICISM;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else if (n \u003e 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return MESSAGE_ENCOURAGEMENT;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return MESSAGE_COMPLIMENT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public double getPercentage() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.percentage;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String[] toStringArray() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new String[] {getCompletionStatus(), getRemark(), getOverdueStatus()};"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 106
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/productivity/TimeSpentToday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents the user\u0027s productivity for the day"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TimeSpentToday {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueThisWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ObservableList\u003cTask\u003e remainingTasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpentToday(ObservableList\u003cTask\u003e tasksDueToday, ObservableList\u003cTask\u003e tasksDueThisWeek,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ObservableList\u003cTask\u003e remainingTasks) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(tasksDueToday, tasksDueThisWeek, remainingTasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueToday \u003d tasksDueToday;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.tasksDueThisWeek \u003d tasksDueThisWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.remainingTasks \u003d remainingTasks;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent getTimeSpent(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TimeSpent result \u003d new TimeSpent(Duration.ZERO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            result.addTime(task.getTimeSpent());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return String.format(\"Tasks due today: %s.\\nTasks due in next 6 days: %s.\\nTasks due after 6 days: %s.\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            getTimeSpent(tasksDueToday), getTimeSpent(tasksDueThisWeek), getTimeSpent(remainingTasks));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 41
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/Summary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskCompletedWithinDayPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayAndIncompletePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Represents a Summary for the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class Summary {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TasksIncompleteDueToday tasksIncompleteDueToday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TasksCompletedToday tasksCompletedToday;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Summary(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        populateSummary();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksIncompleteDueToday getTasksIncompleteDueToday() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return tasksIncompleteDueToday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksCompletedToday getTasksCompletedToday() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return tasksCompletedToday;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * populates the respective Summary objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void populateSummary() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e dueTodayTaskList \u003d taskList.filtered(new TaskDueWithinDayAndIncompletePredicate());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ObservableList\u003cTask\u003e completedTodayTaskList \u003d taskList.filtered(new TaskCompletedWithinDayPredicate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksIncompleteDueToday \u003d new TasksIncompleteDueToday(dueTodayTaskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksCompletedToday \u003d new TasksCompletedToday(completedTodayTaskList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eedenong": 44
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/SummaryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * A list of summary that does not allow nulls"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Only allows set and add list operations."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryList implements Iterable\u003cSummary\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cSummary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final ObservableList\u003cSummary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Adds a summary to the list"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void addSummary(Summary summaryToAdd) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(summaryToAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.add(summaryToAdd);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(summary);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        internalList.add(summary);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ObservableList\u003cSummary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Iterator\u003cSummary\u003e iterator() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   || (other instanceof SummaryList // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                           \u0026\u0026 internalList.equals(((SummaryList) other).internalList));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 56
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/TasksCompletedToday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Gives an overview of the tasks that were completed today (within the day)."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TasksCompletedToday {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksCompletedToday;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksCompletedToday(ObservableList\u003cTask\u003e tasksCompletedToday) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(tasksCompletedToday);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksCompletedToday \u003d tasksCompletedToday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public String getTasksCompletedTodayString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // For each of the tasks, arrange them in the format example:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // [ ] (CS3230) Assignment 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (Task task: tasksCompletedToday) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String moduleCodeString \u003d task.getModuleCode().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String descriptionString \u003d task.getDescription().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String toAppend \u003d String.format(\"[X] (%s) %s\\n\", moduleCodeString, descriptionString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 35
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/summary/TasksIncompleteDueToday.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Gives an overview of the tasks that are due today."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TasksIncompleteDueToday {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ObservableList\u003cTask\u003e tasksDueToday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TasksIncompleteDueToday(ObservableList\u003cTask\u003e tasksDueToday) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(tasksDueToday);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tasksDueToday \u003d tasksDueToday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //TODO: implement method to get string of the tasks due today"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public String getTasksDueTodayString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // For each of the tasks, arrange them in the format example:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // [ ] (CS3230) Assignment 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (Task task: tasksDueToday) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String moduleCodeString \u003d task.getModuleCode().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String descriptionString \u003d task.getDescription().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            String toAppend \u003d String.format(\"[ ] (%s) %s\\n\", moduleCodeString, descriptionString);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            sb.append(toAppend);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 34
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Tag in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \"Tag names should only contain alphanumeric characters, dash, or underscore, and be non-empty\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[a-zA-Z0-9-_]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                   || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 2,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Task\u0027s description in the task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \"Descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Represents a Task\u0027s module code in the task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ModuleCode implements Comparable\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Module Code should be of the format [faculty][code][variant] \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"1. The faculty should only contain alphabetical \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"characters.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"2. This is followed by a reference code, and optionally a\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \" variant tag.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"    - The reference code must be 4 digits long.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"    - The variant tag is an optional alphabetical \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                                         + \"character.\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FACULTY_REGEX \u003d \"^[A-Za-z]{2,3}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String REFERENCE_CODE \u003d \"\\\\d{4}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VARIANT_TAG \u003d \"[A-Za-z]?$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d FACULTY_REGEX + REFERENCE_CODE + VARIANT_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Constructs an {@code ModuleCode}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCode code A valid module code address."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        value \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns if a given string is a valid module code."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           \u0026\u0026 value.equals(((ModuleCode) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int compareTo(ModuleCode o) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this.toString().compareTo(o.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 69
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Enum class representative of the different possible priorities that a task can have."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * By default, the priority of a task is set to MEDIUM."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    HIGH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    MEDIUM,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    LOW;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \"Priority should be either -1, 0, or 1, or the string representation HIGH, MEDIUM or LOW\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns if the given string is a valid priority."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param test The date to be checked."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return The boolean representing whether the priority provided is valid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        switch (test.toLowerCase()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"high\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"medium\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"low\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"-1\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Converts input String to Priority object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param test String to convert."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return Priority of the input string."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static Priority toPriority(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        switch (test.toLowerCase()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"high\": // fallthrough"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return Priority.HIGH;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"medium\": // fallthrough"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"0\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return Priority.MEDIUM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"low\": // fallthrough"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        case \"-1\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return Priority.LOW;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            checkArgument(isValidPriority(test), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 57
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Enum class containing the possible states of a task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    COMPLETE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    INCOMPLETE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static Status toStatus(String test) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Status.valueOf(test.strip().toUpperCase());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents a Task in the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String DEFAULT_DONE_TIME \u003d \"Jan-1-2000 00 00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final DateTime dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private LocalDateTime startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private LocalDateTime endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private LocalDateTime doneTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent timeSpent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private boolean isTiming;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Task(Description description, Status status, DateTime dateTime, ModuleCode moduleCode, Priority priority,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Set\u003cTag\u003e tags, TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireAllNonNull(description, status, dateTime, moduleCode, tags, timeSpent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d LocalDateTime.parse(DEFAULT_DONE_TIME, DateTime.STANDARD_FORMATTER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.isTiming \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Special constructor with additional DoneTime field for use in JsonAdaptedTask."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Task(Description description, Status status, DateTime dateTime, LocalDateTime doneTime,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModuleCode moduleCode, Priority priority, Set\u003cTag\u003e tags, TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireAllNonNull(description, status, dateTime, doneTime, moduleCode, tags, timeSpent);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d doneTime;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.isTiming \u003d false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public DateTime getDateTime() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Starts the timer for the task specified."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void startTimer() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.startTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.isTiming \u003d true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Stops the timer for the task specified"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void stopTimer() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.endTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.isTiming \u003d false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.timeSpent.addTime(new TimeSpent(Duration.between(this.startTime, this.endTime)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TimeSpent getTimeSpent() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.timeSpent;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setDoneTime(DateTime datetime) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d datetime.getDateTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public LocalDateTime getStartTime() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public LocalDateTime getDoneTime() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.doneTime;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns true if both tasks of the same description also occur at the same dateTime and have the same ModuleCode."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Those fields that are chosen are a combination which is meant to be unique."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Mainly used to check for duplicate tasks."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns true if the timer is running for this task."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean isBeingTimed() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return this.isTiming;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Used to check for two instances of the same model entity."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getDoneTime().equals(getDoneTime())"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getModuleCode().equals(getModuleCode())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return Objects.hash(description, dateTime, doneTime, moduleCode, tags);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(\" Status: \")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(getStatus())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(\" DateTime: \")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(getDateTime())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(\" ModuleCode: \")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(getModuleCode())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(\" Priority: \")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(getPriority())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            .append(\" Tags: \");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 6,
      "Clouddoggo": 15,
      "eedenong": 160,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/TimeSpent.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Represents amount of time spent on a Task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TimeSpent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // Empty constructor needed to pass test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpent() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public TimeSpent(Duration duration) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return this.duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void addTime(TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.duration \u003d this.duration.plus(timeSpent.duration);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return String.format(\"%d h %d m %d s\", duration.toHoursPart(), duration.toMinutesPart(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            duration.toSecondsPart());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   || (other instanceof TimeSpent // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           \u0026\u0026 duration.equals(((TimeSpent) other).duration)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return duration.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 48
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean hasTaskBeingTimed() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return internalList.stream().anyMatch(task -\u003e task.isBeingTimed());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "Clouddoggo": 28,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/DuplicateModuleCodeException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Signals that the operation will result in duplicate ModuleCode (Module Codes are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * the same internal string)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DuplicateModuleCodeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public DuplicateModuleCodeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 11
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDescription().fullDescription, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "eedenong": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskCompletedWithinDayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.dateToLocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task} is completed within the specified Date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskCompletedWithinDayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // default constructor sets the date to the instant the constructor is called"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate(Date date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateToLocalDate(date);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskCompletedWithinDayPredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Tests that a {@code Task}\u0027s {@code DateTime}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            LocalDate taskDoneTime \u003d task.getDoneTime().toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return !taskDoneTime.isAfter(date.plusDays(1))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                       \u0026\u0026 !taskDoneTime.isBefore(date.minusDays(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   || (other instanceof TaskCompletedWithinDayPredicate) // instanceof handles null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskCompletedWithinDayPredicate) other).date);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 55
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueAfterDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls after the given Date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueAfterDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueAfterDatePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDateTime();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDateTime taskDate \u003d task.getDateTime().getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskDate.isAfter(this.date);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueAfterDatePredicate) // instanceof handles null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueAfterDatePredicate) other).date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 45
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueBeforeDatePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls before the given Date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueBeforeDatePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDateTime date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d date.atStartOfDay();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Support for methods that use Java7 Date."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param dateTime the internal model representation of DateTime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueBeforeDatePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDateTime();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDateTime taskDate \u003d task.getDateTime().getDateTime();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskDate.isBefore(this.date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueBeforeDatePredicate) // instanceof handles null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueBeforeDatePredicate) other).date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 48
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayAndIncompletePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} is due within the day and is incomplete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskDueWithinDayAndIncompletePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate(LocalDate date) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public TaskDueWithinDayAndIncompletePredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        LocalDate taskDate \u003d task.getDateTime().getDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Status status \u003d task.getStatus();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return !taskDate.isAfter(date)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 !taskDate.isBefore(date)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   \u0026\u0026 (status !\u003d Status.COMPLETE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 37
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code DateTime} falls within the given Date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskDueWithinDayPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // default constructor sets the date to the instant the method was called"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueWithinDayPredicate() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueWithinDayPredicate(LocalDate date) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskDueWithinDayPredicate(DateTime dateTime) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.date \u003d dateTime.getDate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Tests that a {@code Task}\u0027s {@code DateTime} falls within the given Date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate taskDate \u003d task.getDateTime().getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskDate.isEqual(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof TaskDueWithinDayPredicate) // instanceof handles null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                          \u0026\u0026 this.date.equals(((TaskDueWithinDayPredicate) other).date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 50
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskIsCompletedPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Status} is COMPLETE."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskIsCompletedPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return task.getStatus() \u003d\u003d Status.COMPLETE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same objcet"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                || (other instanceof TaskIsCompletedPredicate); // instanceof handles null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/predicates/TaskIsIncompletePredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Tests that a {@code Task}\u0027s {@code Status} is INCOMPLETE."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskIsIncompletePredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return task.getStatus() \u003d\u003d Status.INCOMPLETE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                || (other instanceof TaskIsIncompletePredicate); // instanceof handles null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 23
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/GroupedByDateTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueSomedayPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueThisWeekPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getDueTodayPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.DateUtil.getOverduePredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A container for ObservableList\u0026lt;Task\u0026gt; that splits the TaskList into groups."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * GroupedByDateTaskList groups Tasks by how close the due date is to the current date."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Separation is done over @code{ObservableList} through use of filters."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedByDateTaskList extends GroupedTaskList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isOverdue \u003d getOverduePredicate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueToday \u003d getDueTodayPredicate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueThisWeek \u003d getDueThisWeekPredicate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Predicate\u003cTask\u003e isDueSomeday \u003d getDueSomedayPredicate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedByDateTaskList(ObservableList\u003cTask\u003e tasks, PinnedTaskList pinnedTaskList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(tasks, pinnedTaskList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Overdue\", isOverdue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due Today\", isDueToday);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due This Week\", isDueThisWeek);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due Someday\", isDueSomeday);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected GroupedByDateTaskList(PinnedTaskList pinnedTaskList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXCollections.observableArrayList(), pinnedTaskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Category.DATE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a new sublist."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The sublist must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void addSublist(String title, Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subLists.add("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(title, tasks.filtered(predicate), subsequentElementStartIndex()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cSubgroupTaskList\u003e getSublists() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return subLists;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /* \u003d\u003d\u003d Methods used for testing. Application classes should not call these methods as Tasks are intended"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    to be modified through UniqueTaskList. \u003d\u003d\u003d */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void setTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.setAll(taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subLists.clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Overdue\", isOverdue);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due Today\", isDueToday);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due This Week\", isDueThisWeek);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        addSublist(\"Due Someday\", isDueSomeday);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u003d\u003d\u003d End of Methods used for testing \u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //  * A Listener that handles the updating of categories when the underlying list of Tasks is updated."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //  */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // private class TaskListChangeListener implements ListChangeListener\u003cTask\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //     @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //     public void onChanged(Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //         while (change.next()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             subLists.clear();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             addSublist(\"Overdue\", isOverdue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             addSublist(\"Due Today\", isDueToday);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             addSublist(\"Due This Week\", isDueThisWeek);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             addSublist(\"Due Someday\", isDueSomeday);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //             subLists.removeIf(SubgroupTaskList::isEmpty);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //         }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 90
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/GroupedByModuleTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.SetChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A container for ObservableList\u0026lt;Task\u0026gt; that splits the TaskList into groups."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * GroupedByDateTaskList groups Tasks by their module codes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Separation is done over @code{ObservableList} through use of filters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedByModuleTaskList extends GroupedTaskList {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableSet\u003cModuleCode\u003e moduleCodes \u003d FXCollections.observableSet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedByModuleTaskList(ObservableList\u003cTask\u003e tasks, PinnedTaskList pinnedTaskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(tasks, pinnedTaskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCodes.addAll(makeUniqueModuleSet(tasks));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (ModuleCode code : moduleCodes) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            addSublist(code);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCodes.addListener(new ModuleCodeChangeListener());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.addListener(new TaskListChangeListener());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected GroupedByModuleTaskList(PinnedTaskList pinnedTaskList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXCollections.observableArrayList(), pinnedTaskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCodes.addListener(new ModuleCodeChangeListener());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.addListener(new TaskListChangeListener());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Creates a set of unique module codes based on the given tasklist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param taskList a list of unique Task objects"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a set of unique ModuleCode objects"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static Set\u003cModuleCode\u003e makeUniqueModuleSet(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Set\u003cModuleCode\u003e moduleSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleSet.add(task.getModuleCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return moduleSet;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCode The ModuleCode to be tested"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @return a predicate which tests Tasks for the parameter module code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Predicate\u003cTask\u003e withModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return task -\u003e task.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return Category.MODULE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a new sublist with the given ModuleCode as header."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The sublist must not already exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param moduleCode the value of the sublist header."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void addSublist(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        subLists.add("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new SubgroupTaskList(moduleCode.toString(), this.tasks.filtered(withModuleCode(moduleCode)),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                subsequentElementStartIndex()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if the list contains a sublist with the same module code as the given argument."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean containsSublist(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return subLists.stream().anyMatch(sublist -\u003e sublist.getGroupName().equals(moduleCode.toString()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cSubgroupTaskList\u003e getSublists() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return subLists; //.sorted(Comparator.comparing(SubgroupTaskList::getGroupName));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /* \u003d\u003d\u003d Methods used for testing. Application classes should not call these methods as Tasks are intended"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    to be modified through UniqueTaskList. \u003d\u003d\u003d */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void setTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.setAll(taskList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCodes.clear();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCodes.addAll(makeUniqueModuleSet(tasks));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (ModuleCode code : moduleCodes) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            addSublist(code);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u003d\u003d\u003d End of Methods used for testing \u003d\u003d\u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                   || (other instanceof GroupedByModuleTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           \u0026\u0026 tasks.equals(((GroupedByModuleTaskList) other).tasks));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * A Listener that handles the updating of moduleCodes when the underlying list of Tasks is updated."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private class TaskListChangeListener implements ListChangeListener\u003cTask\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void onChanged(Change\u003c? extends Task\u003e change) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            while (change.next()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (change.wasAdded()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    for (Task task : change.getAddedSubList()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        moduleCodes.add(task.getModuleCode());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (change.wasRemoved()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    for (Task task : change.getRemoved()) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        if (tasks.stream().noneMatch(toCheck -\u003e toCheck.getModuleCode() \u003d\u003d task.getModuleCode())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            moduleCodes.remove(task.getModuleCode());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * A Listener that handles the updating of SubgroupTaskList when the underlying set of ModuleCodes is updated."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private class ModuleCodeChangeListener"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        implements SetChangeListener\u003cModuleCode\u003e {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public void onChanged(Change\u003c? extends ModuleCode\u003e change) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (change.wasAdded()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ModuleCode addedCode \u003d change.getElementAdded();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                if (!containsSublist(addedCode)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    addSublist(addedCode);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (change.wasRemoved()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ModuleCode removedCode \u003d change.getElementRemoved();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                subLists.removeIf(sublist -\u003e sublist.getGroupName().equals(removedCode.toString()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 161
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/GroupedTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.BiFunction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Interface representing a TaskList which is split into sub-groups by predefined groups."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Each \u0027GroupedTaskList\u0027 is a container for `ObservableList\u0026lt;Task\u003e objects,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * each containing a unique filter over the full task list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Classes which extend GroupedTaskList are expected to provide a getter method for each grouping defined."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public abstract class GroupedTaskList implements ViewTaskList {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected final PinnedTaskList pinnedTaskList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * underlying task list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected final ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected final ObservableList\u003cSubgroupTaskList\u003e subLists \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected GroupedTaskList(ObservableList\u003cTask\u003e tasks, PinnedTaskList pinnedTaskList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(pinnedTaskList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.pinnedTaskList \u003d pinnedTaskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static GroupedTaskList makeGroupedTaskList(ObservableList\u003cTask\u003e tasks, Category category,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return category.construct(tasks, pinnedTasks);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public abstract Category getCategory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(int id) throws TaskNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assert id \u003c size();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (SubgroupTaskList sublist : subLists) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (id \u003c sublist.size()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                return sublist.get(id);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                id -\u003d sublist.size();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(Index index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        for (SubgroupTaskList sublist : subLists) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            tasks.addAll(sublist.getList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.iterator();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public abstract ObservableList\u003cSubgroupTaskList\u003e getSublists();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Gets an IntegerBinding for the next Sublist in this GroupedTaskList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected IntegerBinding subsequentElementStartIndex() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (subLists.isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return Bindings.createIntegerBinding(() -\u003e 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            SubgroupTaskList lastSublist \u003d subLists.get(subLists.size() - 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return (IntegerBinding) lastSublist.startIndexBinding().add(lastSublist.sizeBinding());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /* \u003d\u003d\u003d Methods used for testing. Application classes should not call these methods as Tasks are intended"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        to be modified through UniqueTaskList. \u003d\u003d\u003d */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void add(Task toAdd) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks.add(toAdd);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        int index \u003d tasks.indexOf(target);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks.set(index, editedTask);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void remove(Task target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!contains(target)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks.remove(target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Removes all tasks from the list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void clear() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.pinnedTaskList.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subLists.clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the inner moduleCodeTaskLists according to the contents of taskList."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Since taskList is retrieved from UniqueTaskList, it is assumed that there are no duplicate tasks."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param taskList the updated list of tasks."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected abstract void setTasks(List\u003cTask\u003e taskList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    protected void setTasks(GroupedTaskList replacement) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        subLists.setAll(replacement.getSublists());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setTasks(replacement.tasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u003d\u003d\u003d End of Methods used for testing \u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Category defines a set of fixed enum mappings from the commandArgument to the corresponding"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * constructor."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public enum Category {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DATE(\"date\", GroupedByDateTaskList::new),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        MODULE(\"module\", GroupedByModuleTaskList::new);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public final String commandArgument;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private final BiFunction\u003cObservableList\u003cTask\u003e, PinnedTaskList, GroupedTaskList\u003e constructor;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Category(String commandArgument,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            BiFunction\u003cObservableList\u003cTask\u003e, PinnedTaskList, GroupedTaskList\u003e groupedTaskListConstructor) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.commandArgument \u003d commandArgument;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.constructor \u003d groupedTaskListConstructor;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private GroupedTaskList construct(ObservableList\u003cTask\u003e tasks, PinnedTaskList pinnedTasks) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return constructor.apply(tasks, pinnedTasks);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 199,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/PinnedTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Wrapper class for a ObservableList of pinned Tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class PinnedTaskList extends SubgroupTaskList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public PinnedTaskList(ObservableList\u003cTask\u003e taskList, IntegerBinding startIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(\"Pinned\", taskList, startIndex);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/SubgroupTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Wrapper class for a ObservableList Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SubgroupTaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String groupName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final IntegerBinding size;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final IntegerBinding startIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    SubgroupTaskList(String groupName, ObservableList\u003cTask\u003e tasks, IntegerBinding startIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.groupName \u003d groupName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.size \u003d Bindings.size(tasks);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public ObservableList\u003cTask\u003e getList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public String getGroupName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return groupName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public Task get(int index) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return size.intValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        tasks.clear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return tasks.isEmpty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public IntegerBinding sizeBinding() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public IntegerBinding startIndexBinding() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return startIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 57
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/task/tasklist/ViewTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Represents a wrapper class for a list of tasks that are displayed in Ui."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public interface ViewTaskList extends Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Task get(int id);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    Task get(Index index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    boolean contains(Task task);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.FIVE_DAYS_LATER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.LAST_NIGHT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.LAST_WEEK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.NEXT_MONTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.NEXT_WEEK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.TODAY_MORNING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.model.util.SampleDateUtil.TONIGHT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code JelphaBot} with sample data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Task[]{"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Individual Assignment 1\"), Status.INCOMPLETE, new DateTime(LAST_NIGHT),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"CS3230\"), Priority.HIGH, getTagSet(\"graded\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(7))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Tutorial 3\"), Status.INCOMPLETE, new DateTime(LAST_WEEK),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ACC1101\"), Priority.LOW, getTagSet(\"classpart\", \"SU-able\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(3))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"MidTerm Revision Papers\"), Status.INCOMPLETE, new DateTime(NEXT_MONTH),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ST2334\"), Priority.MEDIUM, getTagSet(\"exam\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(4))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            new Task(new Description(\"Consultation\"), Status.INCOMPLETE, new DateTime(NEXT_WEEK),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"PF1103\"), Priority.MEDIUM, getTagSet(\"consult\", \"prepare\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            new Task(new Description(\"Revision\"), Status.INCOMPLETE, new DateTime(NEXT_WEEK),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new ModuleCode(\"ST2334\"), Priority.MEDIUM, getTagSet(\"midterm\", \"prepare\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            new Task(new Description(\"Team Project\"), Status.INCOMPLETE, new DateTime(NEXT_WEEK),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new ModuleCode(\"CS2103T\"), Priority.HIGH, getTagSet(\"final-submission\", \"team\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            new Task(new Description(\"Individual Assignment 2\"), Status.INCOMPLETE, new DateTime(NEXT_WEEK),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new ModuleCode(\"CS3230\"), Priority.HIGH, getTagSet(\"graded\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(1))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Tutorial 4\"), Status.INCOMPLETE, new DateTime(TODAY_MORNING),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ACC1101\"), Priority.LOW, getTagSet(\"classpart\", \"Su-able\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(9))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Graded Homework 3\"), Status.INCOMPLETE, new DateTime(FIVE_DAYS_LATER),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"MA1101R\"), Priority.HIGH, getTagSet(\"graded\", \"SU-able\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(4))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Lab 1\"), Status.INCOMPLETE, new DateTime(FIVE_DAYS_LATER),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"MA1101R\"), Priority.LOW, getTagSet(\"ungraded\", \"SU-able\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(6))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Assignment 3\"), Status.INCOMPLETE, new DateTime(TONIGHT),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"ST2334\"), Priority.MEDIUM, getTagSet(\"schoolwork\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofMinutes(7))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            ),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new Task(new Description(\"Readings\"), Status.INCOMPLETE, new DateTime(NEXT_MONTH),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new ModuleCode(\"EC1103\"), Priority.MEDIUM, getTagSet(\"readings\", \"SU-able\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                new TimeSpent(Duration.ofSeconds(7))"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            )"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyJelphaBot getSampleJelphaBot() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot sampleAb \u003d new JelphaBot();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            sampleAb.addTask(sampleTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                   .map(Tag::new)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                   .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 20,
      "Clouddoggo": 23,
      "-": 46,
      "alam8064": 13
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/model/util/SampleDateUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Class to generate updated dates for SampleDataUtil."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SampleDateUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM-d-yyyy HH mm\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String LAST_NIGHT \u003d LocalDate.now().atStartOfDay().minusMinutes(1).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String LAST_WEEK \u003d LocalDate.now().atStartOfDay().minusDays(7).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String TODAY_MORNING \u003d LocalDate.now().atStartOfDay().plusHours(10).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String TONIGHT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusHours(23).plusMinutes(59).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String FIVE_DAYS_LATER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusDays(5).plusHours(14).plusMinutes(30).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String NEXT_WEEK \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusDays(7).plusHours(9).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String NEXT_MONTH \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        LocalDate.now().atStartOfDay().plusMonths(1).minusMinutes(1).format(dateTimeFormatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 24
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JelphaBotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.jelphabot.model.JelphaBot}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface JelphaBotStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotReminderPath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns JelphaBot data as a {@link ReadOnlyJelphaBot}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns JelphaBot reminders as a {@link ReadOnlyJelphaBot}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getJelphaBotFilePath()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyJelphaBot} to the storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jelphaBot cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyJelphaBot} which contains only reminders to the storage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jelphaBot cannot be null."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveJelphaBot(ReadOnlyJelphaBot)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final String doneTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final TimeSpent timeSpent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Constructs a {@code JsonAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonAdaptedTask("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"desc\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"status\") Status status,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @JsonProperty(\"doneTime\") String doneTime,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @JsonProperty(\"module\") String moduleCode,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @JsonProperty(\"priority\") Priority priority,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @JsonProperty(\"timeSpent\") TimeSpent timeSpent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d doneTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d timeSpent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Converts a given {@code Task} into this class for Jackson use."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.status \u003d source.getStatus();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.doneTime \u003d source.getDoneTime().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d source.getModuleCode().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.priority \u003d source.getPriority();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tagged.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.timeSpent \u003d source.getTimeSpent();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code Task} object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *                               the adapted task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!DateTime.isValidDateTime(dateTime)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final DateTime modelDateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (doneTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        final LocalDateTime modelDoneTime \u003d LocalDateTime.parse(doneTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Priority modelPriority \u003d priority;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (status \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return new Task("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelDescription,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                status,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelDateTime,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                modelDoneTime,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                modelModuleCode,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                modelPriority,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                modelTags,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                timeSpent"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            modelDescription,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            status,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            modelDateTime,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            modelModuleCode,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            modelPriority,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            modelTags,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            timeSpent"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 39,
      "Clouddoggo": 38,
      "eedenong": 31,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonJelphaBotStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access JelphaBot data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonJelphaBotStorage implements JelphaBotStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonJelphaBotStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path reminderPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonJelphaBotStorage(Path filePath, Path reminderPath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.reminderPath \u003d reminderPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotReminderPath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return reminderPath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return readJelphaBot(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(reminderPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableReminderJelphaBot\u003e jsonReminderJelphaBot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderPath, JsonSerializableReminderJelphaBot.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonReminderJelphaBot.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonReminderJelphaBot.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + reminderPath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readJelphaBot()}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableJelphaBot\u003e jsonJelphaBot \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableJelphaBot.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonJelphaBot.isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonJelphaBot.get().toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        saveJelphaBot(jelphaBot, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveJelphaBot(ReadOnlyJelphaBot)}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        requireNonNull(jelphaBot);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableJelphaBot(jelphaBot), filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(reminderPath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableReminderJelphaBot(jelphaBot), reminderPath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/JsonSerializableJelphaBot.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable JelphaBot that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"jelphabot\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableJelphaBot {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Constructs a {@code JsonSerializableJelphaBot} with the given tasks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public JsonSerializableJelphaBot(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyJelphaBot} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableJelphaBot}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableJelphaBot(ReadOnlyJelphaBot source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.addAll(source.getTaskList().stream().map(JsonAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Converts this task list into the model\u0027s {@code JelphaBot} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBot toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JelphaBot jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (jelphaBot.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            jelphaBot.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return jelphaBot;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 7,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends JelphaBotStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getJelphaBotFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of JelphaBot data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private JelphaBotStorage jelphaBotStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(JelphaBotStorage jelphaBotStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.jelphaBotStorage \u003d jelphaBotStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JelphaBot methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return jelphaBotStorage.getJelphaBotFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getJelphaBotReminderPath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return jelphaBotStorage.getJelphaBotReminderPath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return readJelphaBot(jelphaBotStorage.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(boolean isReminder) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return jelphaBotStorage.readJelphaBot(isReminder);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return jelphaBotStorage.readJelphaBot(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveJelphaBot(jelphaBot, jelphaBotStorage.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //@Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, boolean isReminder) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    // jelphaBotStorage.saveJelphaBot(jelphaBot, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBotStorage.saveJelphaBot(jelphaBot, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.jelphabot.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.jelphabot.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarDayCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * UI component that displays the day on the calendar."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarDayCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarDayCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDate calendarDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private ObservableList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label calendarDay;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Circle circleDay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Circle dotTasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDayCard(CalendarDate calendarDate) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        updateTasks();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setText(String.valueOf(calendarDate.getDay()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarDate getDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void setDotVisible() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        dotTasks.setFill(Paint.valueOf(\"#20B2AA\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void setDotVisibleUrgent() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        dotTasks.setFill(Paint.valueOf(\"#FF0000\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void setDotInVisible() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        dotTasks.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the tasks due on the calendar date belonging to a calendar day card."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateTasks() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        ObservableList\u003cTask\u003e allTasks \u003d MainWindow.getLogic().getFilteredTaskList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(calendarDate.getDate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        tasks \u003d allTasks.filtered(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (tasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            setDotInVisible();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (tasks.size() \u003e 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            setDotVisibleUrgent();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            setDotVisible();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights today\u0027s date on the calendar."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightToday() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"#ffffff\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setStyle(\"-fx-font-weight:bold\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Paint.valueOf(\"#4169E1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Remove highlight for today\u0027s date on the calendar."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void removeHighlightedToday() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"#4169E1\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Remove highlight for a date on the calendar."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void removeHighlightedDay() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Color.TRANSPARENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights the day card on the calendar when calendar command is run."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightDay() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        circleDay.setFill(Paint.valueOf(\"#B0C4DE\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Sets the colour of labels for dates this month."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void setSameMonthDay() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"000000\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Sets the colour of labels for trailing dates from the previous and next months."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void setDiffMonthDay() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setTextFill(Paint.valueOf(\"808080\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDay.setOpacity(0.75);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 118
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarMainPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * The Calendar Main Panel. Provides the basic application layout containing the calendar task list and the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * calendar panel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarMainPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarMainPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarMainPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarTaskListPanel calendarTaskListPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private StackPane calendarTaskListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private StackPane calendarPanelPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarMainPanel(TabPane mainWindowTabPane, Logic logic) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.info(\"Initialising calendar main panel stage\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.mainWindowTabPane \u003d mainWindowTabPane;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        initialiseCalendarMainPanel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarPanel getCalendarPanel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Switches to display the calendar panel tab."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.fine(\"Showing calendar panel of application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Returns true if the calendar panel is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Initialises and sets up the calendar main panel with the calendar task list, as well as the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * calendar panel."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void initialiseCalendarMainPanel() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarTaskListPanel \u003d new CalendarTaskListPanel(logic.getFilteredCalendarTaskList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logic.updateFilteredCalendarTaskList(new TaskDueWithinDayPredicate(DateUtil.getDateToday()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarTaskListPanelPlaceholder.getChildren().add(calendarTaskListPanel.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(CalendarDate.getCurrentDate(), mainWindowTabPane);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarPanelPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the view of the calendar panel."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param commandResult Represents the results of the calendar command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateCalendarPanel(CommandResult commandResult) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d commandResult.getDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth yearMonth \u003d commandResult.getYearMonth();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarPanel.removeHighlightedDay();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (date !\u003d null \u0026\u0026 yearMonth \u003d\u003d null) { //change date"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (date.getMonthValue() \u003d\u003d calendarPanel.getCalendarMonth()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                int dayIndex \u003d date.getDayOfMonth();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (date.equals(DateUtil.getDateToday())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarPanel.highlightToday();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarPanel.highlightDay(dayIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (date \u003d\u003d null \u0026\u0026 yearMonth !\u003d null) { //change month view"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate firstDayOfMonth \u003d yearMonth.atDay(1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            CalendarDate newDate \u003d new CalendarDate(firstDayOfMonth);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.changeMonthYearLabel(yearMonth);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.fillGridPane(newDate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.highlightDay(1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else { //change today"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate today \u003d DateUtil.getDateToday();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            LocalDate firstDay \u003d today.withDayOfMonth(1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            CalendarDate firstDayDate \u003d new CalendarDate(firstDay);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            YearMonth todayYearMonth \u003d YearMonth.now();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.changeMonthYearLabel(todayYearMonth);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.fillGridPane(firstDayDate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarPanel.highlightToday();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 120
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.calendar.CalendarDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Panel containing the calendar view to be displayed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static ArrayList\u003cCalendarDayCard\u003e dayCardsInMonth;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static ArrayList\u003cCalendarDayCard\u003e allDayCards;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDate calendarDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDayCard highlightedDay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label monthYear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarPanel(CalendarDate calendarDate, TabPane mainWindowTabPane) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        logger.info(\"Initialising calendar panel stage\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.mainWindowTabPane \u003d mainWindowTabPane;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        monthYear.setText(calendarDate.getMonthName() + \", \" + calendarDate.getYear());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate firstDay \u003d calendarDate.getFirstDay();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        fillGridPane(firstDay);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        highlightToday();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Fills the grid pane of the calendar."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param firstDay The date representing the first day of the month."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void fillGridPane(CalendarDate firstDay) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarGrid.getChildren().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        int weekIndex \u003d firstDay.getDayOfWeek() - 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate currDate \u003d null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (weekIndex !\u003d 0) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            int lengthPrevMonth \u003d firstDay.getLengthPrevMonth();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            int day \u003d lengthPrevMonth - weekIndex + 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            currDate \u003d firstDay.createPrevMonthDate(day);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            currDate \u003d firstDay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        dayCardsInMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        allDayCards \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        for (int row \u003d 0; row \u003c 6; row++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                CalendarDayCard calendarDayCard \u003d new CalendarDayCard(currDate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                allDayCards.add(calendarDayCard);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                if (currDate.isSameMonth(firstDay.getMonth())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarDayCard.setSameMonthDay();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    dayCardsInMonth.add(calendarDayCard);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    calendarDayCard.setDiffMonthDay();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                calendarGrid.add(calendarDayCard.getRoot(), col, row);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                currDate \u003d currDate.dateNextDay();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updates the tasks in all the calendar day cards in the calendar panel."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void updateDayCards() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        for (CalendarDayCard day: allDayCards) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            day.updateTasks();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Updatest the MonthYear Label of the Calendar Panel with the inputted parameter."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param yearMonth Specifies the year and month of the calendar to be set to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void changeMonthYearLabel(YearMonth yearMonth) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarDate \u003d new CalendarDate(yearMonth.atEndOfMonth());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        monthYear.setText(calendarDate.getMonthName() + \", \" + calendarDate.getYear());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public int getCalendarMonth() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return calendarDate.getMonth();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static CalendarDayCard getDayCard(int dayIndex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return CalendarPanel.dayCardsInMonth.get(dayIndex - 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarDayCard getHighlightedDay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return highlightedDay;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void setHighlightedDay(int dayIndex) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        highlightedDay \u003d dayCardsInMonth.get(dayIndex - 1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private boolean isTodayHighlighted() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return highlightedDay.getDate().isToday();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights today\u0027s date on the calendar."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightToday() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        int dayIndexOfToday \u003d DateUtil.getDateToday().getDayOfMonth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        getDayCard(dayIndexOfToday).highlightToday();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        setHighlightedDay(dayIndexOfToday);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Removes the highlight for the current highlighted day on the calendar."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void removeHighlightedDay() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (isTodayHighlighted()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            getHighlightedDay().removeHighlightedToday();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            getHighlightedDay().removeHighlightedDay();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Highlights the selected day card on the calendar when calendar command is run."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param index The index of the specified day card from the dayCardsInMonth array list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void highlightDay(int index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        getDayCard(index).highlightDay();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        setHighlightedDay(index);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 152
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarTaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * An UI component that displays information of a {@code Task} in Calendar."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarTaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"CalendarTaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on JelphaBot level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarTaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        populateChildElements(task, displayedIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Populates the child elements in the CalendarTaskCard"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param task           the task to populate."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param displayedIndex the indicated index."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void populateChildElements(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        description.setText(task.getDescription().fullDescription);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        moduleCode.setText(task.getModuleCode().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        applyPriorityMarkdown(task);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        status.setText(task.getStatus().name());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        timeSpent.setText(\"(time spent: \" + task.getTimeSpent().toString() + \")\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // dateTime.setText(task.getDateTime().getDisplayValue());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Applies markdown to TaskCard based on Task priority"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * @param task the task containing model data for this TaskCard."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void applyPriorityMarkdown(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        description.getStyleClass().add(\"description\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        moduleCode.getStyleClass().add(\"description\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (task.getPriority().equals(Priority.HIGH)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            description.setId(\"highPriority\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            moduleCode.setId(\"highPriority\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        } else if (task.getPriority() \u003d\u003d Priority.LOW) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            description.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            moduleCode.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarTaskCard card \u003d (CalendarTaskCard) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 107
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CalendarTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public CalendarTaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    static class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                setGraphic(new CalendarTaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alam8064": 49
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.concurrent.CopyOnWriteArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static List\u003cString\u003e commandsHistory \u003d new CopyOnWriteArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ListIterator\u003cString\u003e command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // Replicates behaviour of CLI when UP or DOWN key is pressed"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        commandTextField.setOnKeyPressed(event -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.UP) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                commandTextField.setText(getPrevCommand());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.DOWN) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                commandTextField.setText(getNextCommand());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            commandsHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            command \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the user\u0027s previous command in String form."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getPrevCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            command \u003d commandsHistory.listIterator(commandsHistory.size());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (command.hasPrevious()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return command.previous();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the user\u0027s next command in String form."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private String getNextCommand() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (command \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            command \u003d commandsHistory.listIterator(commandsHistory.size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (command.hasNext()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return command.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.jelphabot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 46,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/GroupedTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.SubgroupTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tasks are further sorted into subgroups"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"GroupedTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final ObservableList\u003cSubgroupTaskList\u003e subLists;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final GroupedTaskList groupedTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ListView\u003cSubgroupTaskList\u003e taskListGroups;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskListPanel(GroupedTaskList groupedTaskList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.groupedTaskList \u003d groupedTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subLists \u003d groupedTaskList.getSublists();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListGroups.setCellFactory(viewCell -\u003e new GroupedTaskListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListGroups.setItems(subLists);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        logger.log(Level.INFO,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(\"Initialized %s panel with %d categories and %d tasks.\", groupedTaskList.getCategory(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                groupedTaskList.getSublists().size(), groupedTaskList.size()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            )"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public GroupedTaskList.Category getCategory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return groupedTaskList.getCategory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code GroupedTaskCard}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    static class GroupedTaskListViewCell extends ListCell\u003cSubgroupTaskList\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected void updateItem(SubgroupTaskList task, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new SubgroupTaskListPanel(task, task.startIndexBinding()).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 64
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f09-2.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static boolean firstStart \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String WELCOME_STRING \u003d \"Welcome to JelphaBot!\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                     + \"To go back to the list of your tasks, type list!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private GroupedTaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarMainPanel calendarMainPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProductivityPanel productivityPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReminderListPanel reminderListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private SummaryPanel summaryPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Productivity productivity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private StackPane calendarMainPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StackPane productivityPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private StackPane summaryPanelPlaceholder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane reminderListPanelPlaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public static Logic getLogic() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        return logic;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanel \u003d new GroupedTaskListPanel(logic.getGroupedTaskList(Category.DATE));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarMainPanel \u003d new CalendarMainPanel(mainWindowTabPane, logic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarMainPanelPlaceholder.getChildren().add(calendarMainPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        SummaryList summaryList \u003d logic.getSummaryList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryList.addSummary(new Summary(logic.getFilteredTaskList()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanel \u003d new SummaryPanel(summaryList.asUnmodifiableObservableList(), mainWindowTabPane);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelPlaceholder.getChildren().add(summaryPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ProductivityList productivityList \u003d logic.getProductivityList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityList.addProductivity(new Productivity(logic.getFilteredTaskList(), true, true, true));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityPanel \u003d new ProductivityPanel(productivityList.asUnmodifiableObservableList(), mainWindowTabPane);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityPanelPlaceholder.getChildren().add(productivityPanel.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderListPanel \u003d new ReminderListPanel(logic.getReminderShowsTaskList(), mainWindowTabPane);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        reminderListPanelPlaceholder.getChildren().add(reminderListPanel.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // StatusBarFooter statusBarFooter \u003d new"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // StatusBarFooter(logic.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Switches view to productivity panel."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void handleProductivity() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!productivityPanel.isShowing()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            productivityPanel.show();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleReminder() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!reminderListPanel.isShowing()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderListPanel.show();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     * Switches view to calendar panel."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void handleCalendar() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        if (!calendarMainPanel.isShowing()) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            calendarMainPanel.show();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Switches view to summary panel."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void handleSummary() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!summaryPanel.isShowing()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            summaryPanel.show();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (firstStart) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            resultDisplay.setFeedbackToUser(WELCOME_STRING);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            firstStart \u003d false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Switches view to Task List panel."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void handleTaskList(GroupedTaskList.Category sublistCategory) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList groupedTasks \u003d logic.getGroupedTaskList(sublistCategory);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanel \u003d new GroupedTaskListPanel(groupedTasks);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public GroupedTaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityPanel getProductivityPanel() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return productivityPanel;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.jelphabot.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            updateTasksInCalendarDayCards(); //for the dots showing overarching tasks"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            } else if (commandResult.isCalendarCommand()) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                updateCalendarMainPanel(commandResult);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            switch (commandResult.getTabSwitch()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case CALENDAR:"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                handleCalendar();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case PRODUCTIVITY:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleProductivity();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            case REMINDER:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "                handleReminder();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case SUMMARY:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                handleSummary();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case TASK_LIST_DATE:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleTaskList(GroupedTaskList.Category.DATE);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case TASK_LIST_MODULE:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                handleTaskList(Category.MODULE);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            case STAY_ON_CURRENT:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                // do nothing"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void updateCalendarMainPanel(CommandResult commandResult) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarMainPanel.updateCalendarPanel(commandResult);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private void updateTasksInCalendarDayCards() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        calendarMainPanel.getCalendarPanel().updateDayCards();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 35,
      "Clouddoggo": 42,
      "eedenong": 34,
      "-": 189,
      "alam8064": 40
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ProductivityCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * An UI component that displays information of a {@code Productivity}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String FXML \u003d \"ProductivityCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final Productivity productivity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label tasksCompleted;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label overdueStatus;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label runningTimers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label timeSpentToday;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProgressBar tasksCompletionProgress;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityCard(Productivity productivity) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.productivity \u003d productivity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String[] completionProductivity \u003d productivity.getTasksCompleted().toStringArray();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasksCompleted.setText(\"   \" + completionProductivity[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        remark.setText(completionProductivity[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        overdueStatus.setText(completionProductivity[2]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        runningTimers.setText(productivity.getRunningTimers().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpentToday.setText(productivity.getTimeSpentToday().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        tasksCompletionProgress.setProgress(productivity.getTasksCompleted().getPercentage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        if (!(other instanceof ProductivityCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ProductivityCard card \u003d (ProductivityCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return tasksCompleted.getText().equals(card.tasksCompleted.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 runningTimers.getText().equals(card.runningTimers.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 remark.getText().equals(card.remark.getText())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 overdueStatus.getText().equals(card.overdueStatus.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 timeSpentToday.getText().equals(card.timeSpentToday.getText())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                   \u0026\u0026 productivity.equals(card.productivity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 70
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/ProductivityPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The Productivity Panel. Provides the basic application layout of productivity of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String FXML \u003d \"ProductivityPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductivityPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ListView\u003cProductivity\u003e productivityListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public ProductivityPanel(ObservableList\u003cProductivity\u003e productivityList, TabPane tabPane) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        logger.info(\"Initialising productivity panel stage\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        this.mainWindowTabPane \u003d tabPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityListView.setItems(productivityList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        productivityListView.setCellFactory(listView -\u003e new ProductivityListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Swtiches to the productivity panel."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        logger.fine(\"Showing productivity panel of application.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns true if the productivity panel is currently being shown."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Productivity} using a {@code ProductivityCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    static class ProductivityListViewCell extends ListCell\u003cProductivity\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        protected void updateItem(Productivity productivity, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            super.updateItem(productivity, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            if (empty || productivity \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                setGraphic(new ProductivityCard(productivity).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 83
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SubgroupTaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.IntegerBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.control.TitledPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.SubgroupTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Panel containing one grouped list of tasks."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * Tasks are further sorted into pinned, dueToday, dueThisWeek, dueSomeday"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * @@author yaojiethng"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class SubgroupTaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final int PREF_CELL_HEIGHT \u003d 100;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"SubgroupTaskListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final SubgroupTaskList subGroupTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final NumberBinding startIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private TitledPane category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ListView\u003cTask\u003e groupingList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public SubgroupTaskListPanel(SubgroupTaskList subGroupTaskList, NumberBinding startIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.subGroupTaskList \u003d subGroupTaskList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setCategoryTitle(subGroupTaskList.getGroupName(), subGroupTaskList.sizeBinding());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.setCellFactory(viewCell -\u003e new SubgroupTaskListViewCell(startIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.prefHeightProperty().bind(subGroupTaskList.sizeBinding().multiply(PREF_CELL_HEIGHT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupingList.setItems(subGroupTaskList.getList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public NumberBinding getLastElementIndex() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return startIndex.add(subGroupTaskList.sizeBinding());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setCategoryTitle(String groupName, IntegerBinding totalSize) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        category.textProperty().bind(totalSize.asString(groupName + \" [%d]\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code GroupedTaskCard}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    static class SubgroupTaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        private NumberBinding startIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        SubgroupTaskListViewCell(NumberBinding startIndex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.startIndex \u003d startIndex;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new TaskCard("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    task,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    startIndex.add(getIndex() + 1)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                ).getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 81
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SummaryCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * A UI Component that displays information of a {@code Summary}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String FXML \u003d \"SummaryCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String BREAKLINE_STRING \u003d \"--------------------------------------------------\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Summary summary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label breakline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label tasksDueToday;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label tasksCompletedToday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryCard(Summary summary) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.summary \u003d summary;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        breakline.setText(BREAKLINE_STRING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        tasksDueToday.setText(summary.getTasksIncompleteDueToday().getTasksDueTodayString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        tasksCompletedToday.setText(summary.getTasksCompletedToday().getTasksCompletedTodayString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (!(other instanceof SummaryCard)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        SummaryCard summaryCard \u003d (SummaryCard) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return breakline.getText().equals(summaryCard.breakline.getText())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u0026\u0026 tasksDueToday.getText().equals(summaryCard.tasksDueToday.getText())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u0026\u0026 tasksCompletedToday.getText().equals(summaryCard.tasksCompletedToday.getText());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 55
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/SummaryPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * The Summary Panel. Provides the basic application layout of the summary of tasks due today."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String FXML \u003d \"SummaryPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final int PREF_CELL_HEIGHT \u003d 210;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(SummaryPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private TabPane mainWindowTabPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private ListView\u003cSummary\u003e summaryPanelListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public SummaryPanel(ObservableList\u003cSummary\u003e summaryList, TabPane tabPane) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        logger.info(\"Initialising summary panel stage\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        this.mainWindowTabPane \u003d tabPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelListView.setItems(summaryList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        summaryPanelListView.setCellFactory(listView -\u003e new SummaryTaskListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Switches to the summary panel."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        logger.info(\"Showing summary panel of application\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        mainWindowTabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Returns true if the summary panel is currently being shown."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        return mainWindowTabPane.isPressed();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Custom {@code ListCell} that displays the graphics of a {@code Summary} using a {@code SummaryCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "class SummaryTaskListViewCell extends ListCell\u003cSummary\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    protected void updateItem(Summary summary, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        super.updateItem(summary, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (empty || summary \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            setGraphic(new SummaryCard(summary).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 71
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/TaskCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.NumberBinding;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * An UI component that displays information of a {@code Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private static final String FXML \u003d \"GroupedTaskListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on JelphaBot level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Label moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Label timeSpent;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskCard(Task task, NumberBinding displayedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        populateTaskElements(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        setId(displayedIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        populateTaskElements(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void setId(NumberBinding displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        id.textProperty().bind(displayedIndex.asString(\"%d. \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void setId(int displayedIndex) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        id.setText(String.format(\"%d. \", displayedIndex));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Populates TaskCard with data from a model."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param task the task containing model data for this TaskCard"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void populateTaskElements(Task task) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        description.setText(task.getDescription().fullDescription);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode.setText(task.getModuleCode().value);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        applyPriorityMarkdown(task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status.setText(task.getStatus().name());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        timeSpent.setText(\"(SPENT: \" + task.getTimeSpent().toString() + \")\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime.setText(task.getDateTime().getDisplayValue());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        task.getTags().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Applies markdown to TaskCard based on Task priority"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * @param task the task containing model data for this TaskCard."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private void applyPriorityMarkdown(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        description.getStyleClass().add(\"description\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode.getStyleClass().add(\"description\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (task.getPriority().equals(Priority.HIGH)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            description.setId(\"highPriority\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCode.setId(\"highPriority\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        } else if (task.getPriority() \u003d\u003d Priority.LOW) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            description.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            moduleCode.setId(\"lowPriority\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 55,
      "Clouddoggo": 2,
      "eedenong": 2,
      "-": 57,
      "alam8064": 4
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Panel containing the list of tasks."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // public void show() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //     logger.fine()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    static class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                setGraphic(new TaskCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 8,
      "Clouddoggo": 6,
      "eedenong": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private ProductivityPanel productivityPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReminderPopup reminderPopup;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // create second stage for MorningCallWindow"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Stage reminderStage \u003d new Stage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderPopup \u003d new ReminderPopup(reminderStage, logic);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderPopup.fillWindow();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            reminderPopup.show();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            // show summary tab first as \"Morning call\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            mainWindow.handleSummary();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/JelphaBotTheme.css\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2,
      "eedenong": 5,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/jelphabot/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 87
    }
  },
  {
    "path": "src/main/main.iml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cmodule version\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003ccomponent name\u003d\"CheckStyle-IDEA-Module\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003coption name\u003d\"configuration\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cmap /\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/option\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \u003c/component\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarDayCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!-- @@author alam8064 --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"calendarGridDay\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "           minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cCircle fx:id\u003d\"circleDay\" fill\u003d\"#ffffff00\" radius\u003d\"20.0\" stroke\u003d\"#ffffff00\" strokeType\u003d\"INSIDE\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"calendarDay\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$day\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                       textAlignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cCircle fx:id\u003d\"dotTasks\" fill\u003d\"#ffffff00\" radius\u003d\"2.5\" stroke\u003d\"#ffffff00\" strokeType\u003d\"INSIDE\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 21
    }
  },
  {
    "path": "src/main/resources/view/CalendarMainPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!-- @@author alam8064 --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"calendarMainPanel\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"calendarMainPanel\" dividerPositions\u003d\"0.47\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   prefWidth\u003d\"600.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                   AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003citems\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cVBox fx:id\u003d\"calendarTaskList\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                              AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"calendarTaskListPanelPlaceholder\" prefHeight\u003d\"372.0\" prefWidth\u003d\"172.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                       VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cVBox fx:id\u003d\"calendarView\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                              AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"calendarPanelPlaceholder\" prefHeight\u003d\"374.0\" prefWidth\u003d\"415.0\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                           VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/items\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "alam8064": 39
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!-- @@author alam8064 --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"374.0\" prefWidth\u003d\"415.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"40.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cLabel fx:id\u003d\"monthYear\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"\\$month\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cFont name\u003d\"Franklin Gothic Medium\" size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"74.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cGridPane alignment\u003d\"CENTER\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Mon\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Tue\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" text\u003d\"Sun\" GridPane.columnIndex\u003d\"6\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calendarGrid\" alignment\u003d\"CENTER\" prefHeight\u003d\"134.0\" prefWidth\u003d\"375.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"50.0\" minWidth\u003d\"50.0\" prefWidth\u003d\"50.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                  \u003cRowConstraints maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" prefHeight\u003d\"50.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 69
    }
  },
  {
    "path": "src/main/resources/view/CalendarTaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!-- @@author alam8064 --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "      spacing\u003d\"16.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleCode\" alignment\u003d\"CENTER\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"70.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "           text\u003d\"\\$moduleCode\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"105.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" spacing\u003d\"4.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cInsets left\u003d\"16.0\" right\u003d\"8.0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"16.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c!--    \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\"/\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "alam8064": 41
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#86C1B9, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*.label {*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*    -fx-font-size: 11pt;*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Semibold\";*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*    -fx-text-fill: #555555;*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*    -fx-opacity: 0.9;*/"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-size: 35px;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /*-fx-background-color: #86C1B9;*/"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Historic\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#calendarPane {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(cornsilk, 20%);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 336,
      "alam8064": 22
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background: #FEE9DC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".bold-letter {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/GroupedTaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" alignment\u003d\"CENTER_LEFT\" fillHeight\u003d\"false\" maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"100.0\" prefWidth\u003d\"400.0\" spacing\u003d\"16.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cLabel fx:id\u003d\"moduleCode\" alignment\u003d\"CENTER\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"100.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" prefHeight\u003d\"105.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" spacing\u003d\"4.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets left\u003d\"16.0\" right\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"16.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRowConstraints vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets left\u003d\"16.0\" right\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/GroupedTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cScrollPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"groupedTaskListPanel\" fx:id\u003d\"groupedTaskListPanel\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minViewportHeight\u003d\"400.0\" minViewportWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      \u003cListView id\u003d\"taskListGroups\" fx:id\u003d\"taskListGroups\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"400.0\" minWidth\u003d\"600.0\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/ScrollPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 9
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/JelphaBotTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#86C1B9, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #FEE9DC; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"S\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-base: #fee9dc;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-control-inner-background: #fee9dc;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-size: 35px;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #ffcd6d;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #f3a3a7;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    -fx-background-color: #ffe1de;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #ffe1de;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /*-fx-background-color: #86C1B9;*/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Historic\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#fee9dc, 20%);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #fee9dc;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #fff6b0 !important;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#fee9dc, 30%);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#383838, 25%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-color: #fee9dc;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(#fee9dc, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #D8BFD8;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #2e3034;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #FEE9DC;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #383838;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #FEE9DC;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: #3a3a3a;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #fee9dc;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #313136;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "eedenong"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #FEE9DC, transparent, #FEE9DC;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "#tagsImportant {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-background-color: darkred;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "#tagsOptional {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-background-color: #545454;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#calendarView {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-background-color: derive(cornsilk, 20%);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ".description {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "#highPriority {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "#lowPriority {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-text-fill: #313136;;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 33,
      "Clouddoggo": 44,
      "eedenong": 8,
      "-": 289,
      "alam8064": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cfx:root minHeight\u003d\"600.0\" minWidth\u003d\"600.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"JelphaBot\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003cImage url\u003d\"@/images/newlogo.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" maxHeight\u003d\"-Infinity\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cTabPane fx:id\u003d\"mainWindowTabPane\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003cTab fx:id\u003d\"summaryTab\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cVBox fx:id\u003d\"summaryPanel\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"340\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"summaryPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"ummary\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"S\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003cTab fx:id\u003d\"taskListTab\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: MAROON;\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"ask List\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"T\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cTab\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"calendarMainPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"alendar\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"C\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cTab\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003ccontent\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                                \u003cVBox fx:id\u003d\"productivityPanel\" maxHeight\u003d\"1.7976931348623157E308\" minWidth\u003d\"340\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                    \u003cStackPane fx:id\u003d\"productivityPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                            \u003c/content\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cgraphic\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003cLabel graphicTextGap\u003d\"0.0\" text\u003d\"roductivity\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003cgraphic\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"P\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                    \u003c/graphic\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c/graphic\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cTab fx:id\u003d\"reminderListPanel\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"reminderListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cgraphic\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cLabel graphicTextGap\u003d\"0.0\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"eminder\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cgraphic\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cLabel styleClass\u003d\"bold-letter\" text\u003d\"R\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003c/graphic\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003c/graphic\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"300.0\" minHeight\u003d\"100\" prefHeight\u003d\"135\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                           prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" alignment\u003d\"BOTTOM_LEFT\" styleClass\u003d\"stack-pane\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 36,
      "eedenong": 13,
      "-": 47,
      "alam8064": 18
    }
  },
  {
    "path": "src/main/resources/view/MorningCallWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ButtonBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"540\" minWidth\u003d\"400\" title\u003d\"Morning Call\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"140\" prefWidth\u003d\"140.0\" styleClass\u003d\"pane-with-border\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cInsets left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                 \u003cScrollBar layoutX\u003d\"364.0\" layoutY\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"395.0\" prefWidth\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                              \u003c/children\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/children\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"50\" minHeight\u003d\"50\" prefHeight\u003d\"50\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cButtonBar maxHeight\u003d\"40.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003cbuttons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                 \u003cButton fx:id\u003d\"closeButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"0.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeButtonAction\" prefHeight\u003d\"31.0\" text\u003d\"OK\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/buttons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "Clouddoggo": 1,
      "eedenong": 32,
      "-": 16
    }
  },
  {
    "path": "src/main/resources/view/NewTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#86C1B9, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    -fx-size: 35px;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    /*-fx-background-color: #86C1B9;*/"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 17px;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".cell_medium_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Historic\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alam8064"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alam8064"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alam8064"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "alam8064"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "alam8064"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "alam8064": 358
    }
  },
  {
    "path": "src/main/resources/view/NightDebriefWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import java.net.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.image.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.stage.*?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cfx:root minHeight\u003d\"540\" minWidth\u003d\"400\" title\u003d\"Night Debrief\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cURL value\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cAnchorPane prefHeight\u003d\"500.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"140\" prefWidth\u003d\"140.0\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                              AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cInsets left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                       prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003cButtonBar maxHeight\u003d\"40.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"40.0\" prefWidth\u003d\"80.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003cbuttons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                    \u003cButton fx:id\u003d\"closeButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"0.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#closeButtonAction\" prefHeight\u003d\"31.0\" text\u003d\"OK\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                \u003c/buttons\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                            \u003c/ButtonBar\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 47
    }
  },
  {
    "path": "src/main/resources/view/ProductivityCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c!-- @@author Clouddoggo --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.geometry.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox maxHeight\u003d\"-Infinity\" prefHeight\u003d\"118.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel graphicTextGap\u003d\"0.0\" prefHeight\u003d\"24.0\" prefWidth\u003d\"155.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Productivity Report\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cHBox prefHeight\u003d\"26.0\" prefWidth\u003d\"176.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cProgressBar fx:id\u003d\"tasksCompletionProgress\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"200.0\" progress\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cLabel fx:id\u003d\"tasksCompleted\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$tasksCompleted\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel fx:id\u003d\"overdueStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$overdueStatus\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox maxHeight\u003d\"-Infinity\" prefHeight\u003d\"118.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_medium_label\" text\u003d\"Time Spent\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel fx:id\u003d\"timeSpentToday\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpentToday\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cVBox maxHeight\u003d\"-Infinity\" prefHeight\u003d\"200.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cInsets bottom\u003d\"4\" left\u003d\"15\" right\u003d\"4\" top\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel styleClass\u003d\"cell_medium_label\" text\u003d\"Running Timer(s)\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003cLabel fx:id\u003d\"runningTimers\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$runningTimers\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 86
    }
  },
  {
    "path": "src/main/resources/view/ProductivityPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c!-- @@author Clouddoggo --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cVBox stylesheets\u003d\"@JelphaBotTheme.css\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        \u003cListView fx:id\u003d\"productivityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 9
    }
  },
  {
    "path": "src/main/resources/view/SortedTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"SortedTaskList\" stylesheets\u003d\"@JelphaBotTheme.css\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003cScrollPane fitToWidth\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"587.0\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                text\u003d\"Pinned Tasks\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"pinnedTaskListView\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"585.0\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Overdue Tasks\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"overdueTaskListView\" maxHeight\u003d\"1.7976931348623157E308\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Due Today\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueTodayTaskListView\" maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"0.0\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                      prefWidth\u003d\"585.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" maxHeight\u003d\"1.7976931348623157E308\" text\u003d\"Due This Week\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueThisWeekTaskListView\" maxHeight\u003d\"1.7976931348623157E308\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003cTitledPane animated\u003d\"false\" contentDisplay\u003d\"BOTTOM\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                text\u003d\"Due Someday\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                            \u003cListView fx:id\u003d\"dueSomedayTaskListView\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                    \u003c/TitledPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 41,
      "Clouddoggo": 2
    }
  },
  {
    "path": "src/main/resources/view/SubgroupTaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.TitledPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cTitledPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"category\" maxWidth\u003d\"1.7976931348623157E308\" text\u003d\"Group Title\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003ccontent\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \u003cListView fx:id\u003d\"groupingList\" maxWidth\u003d\"1.7976931348623157E308\" stylesheets\u003d\"@JelphaBotTheme.css\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/content\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "      \u003cFont size\u003d\"16.0\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "   \u003c/font\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c/TitledPane\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12,
      "Clouddoggo": 1
    }
  },
  {
    "path": "src/main/resources/view/SummaryCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c!-- @@author eedenong --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox maxHeight\u003d\"-Infinity\" prefHeight\u003d\"50.0\" prefWidth\u003d\"195.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel prefHeight\u003d\"24.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"cell_big_label\" text\u003d\"Welcome to JelphaBot!\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel fx:id\u003d\"breakline\" text\u003d\"\\$breakline\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"200.0\" prefWidth\u003d\"363.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_medium_label\" text\u003d\"Here are your tasks that are due today!\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel fx:id\u003d\"tasksDueToday\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" text\u003d\"\\$tasksDueToday\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                    \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"200.0\" prefWidth\u003d\"363.0\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_medium_label\" text\u003d\"Here are your tasks that you have completed today!\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                   VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "             \u003cLabel fx:id\u003d\"tasksCompletedToday\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" text\u003d\"\\$tasksCompletedToday\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                 \u003cminWidth\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                     \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                 \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "             \u003c/Label\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "         \u003c/children\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 41
    }
  },
  {
    "path": "src/main/resources/view/SummaryPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c!-- @@author eedenong --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003cVBox stylesheets\u003d\"@JelphaBotTheme.css\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "      \u003cListView fx:id\u003d\"summaryPanelListView\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "eedenong": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "\u003cHBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" id\u003d\"cardPane\" fx:id\u003d\"cardPane\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500.0\" xmlns\u003d\"http://javafx.com/javafx/11\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" prefHeight\u003d\"105.0\" prefWidth\u003d\"195.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"1.7976931348623157E308\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"moduleCode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$moduleCode\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                \u003cLabel fx:id\u003d\"timeSpent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeSpent\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" styleClass\u003d\"cell_medium_label\" text\u003d\"\\$dateTime\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "-": 20,
      "alam8064": 9
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 6
    }
  },
  {
    "path": "src/test/data/JsonJelphaBotStorageTest/invalidAndValidTaskJelphaBot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Jan-1-2020 22 00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"LOW\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT0S\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Valid Task\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Jan-1-2020 22 00\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"LOW\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT0S\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Task with Invalid Module Code\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"3230T\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17,
      "Clouddoggo": 6
    }
  },
  {
    "path": "src/test/data/JsonJelphaBotStorageTest/invalidTaskJelphaBot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Jan-1-2020 22 00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"LOW\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT0S\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Task with !nvalid N@me Field\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 10,
      "Clouddoggo": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableJelphaBotTest/duplicateTaskJelphaBot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"tasks\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"dateTime\" : \"Mar-26-2020 23 59\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2020-03-27T22:00:00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"HIGH\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"tagged\" : [ \"graded\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"description\" : \"Individual Assignment 1\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"dateTime\" : \"Mar-26-2020 23 59\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2020-03-27T22:00:00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"HIGH\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"tagged\" : [ \"graded\" ],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"description\" : \"Individual Assignment 1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 9,
      "Clouddoggo": 14,
      "eedenong": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableJelphaBotTest/invalidTaskJelphaBot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Not a DateTime\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"Not a valid DoneTime\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"LOW\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"friends\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT0S\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Assignment 1\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 10,
      "Clouddoggo": 3,
      "eedenong": 1
    }
  },
  {
    "path": "src/test/data/JsonSerializableJelphaBotTest/typicalTasksJelphaBot.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"_comment\": \"JelphaBot save file which contains the same Task values as in TypicalTasks#getTypicalJelphaBot()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  \"tasks\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"HIGH\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"school\" ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Online Midterm Assessment\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"MA1101R\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"COMPLETE\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"project\", \"school\" ],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Book Report 1\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"GES1028\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Yoga class\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"YG1011\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Daniel Meier\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"DT1101\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Milk errand\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"MYB1101\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"school\" ],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Open book finals\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"CS3230\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"status\" : \"INCOMPLETE\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"dateTime\" : \"Feb-1-2020 11 00\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    \"doneTime\" : \"2000-01-01T00:00:00\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"priority\" : \"MEDIUM\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"tagged\" : [ \"project\", \"school\" ],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    \"timeSpent\" : {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "      \"duration\" : \"PT7M\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    },"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"description\" : \"Group project meeting\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    \"moduleCode\" : \"CS2103T\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 53,
      "Clouddoggo": 21,
      "eedenong": 7
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \"jelphaBotFilePath\": \"jelphabot.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "  \"jelphaBotFilePath\": \"jelphabot.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        //assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 7,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.JsonJelphaBotStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonJelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryFolder.resolve(\"jelphaBot.json\"), temporaryFolder.resolve(\"reminder.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonJelphaBotIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonJelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotIoExceptionThrowingStub("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionJelphaBot.json\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionReminder.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StorageManager storage \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            AddCommand.COMMAND_WORD + DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TUTORIAL).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredReminderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getReminderList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredByReminder_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredByReminder().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByCompleteTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredByCompleteTaskList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByIncompleteTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredByIncompleteTaskList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredByIncompleteDueTodayTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                    .getFilteredByIncompleteDueTodayTaskList()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                                                                    .remove(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        throws CommandException, ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * result message is correct."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * - the internal model manager state is the same as that in"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static class JsonJelphaBotIoExceptionThrowingStub extends JsonJelphaBotStorage {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        private JsonJelphaBotIoExceptionThrowingStub(Path filePath, Path reminderPath) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            super(filePath, reminderPath);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "Clouddoggo": 10,
      "eedenong": 96,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validTask), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Task taskInList \u003d model.getJelphaBot().getTaskList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 5,
      "Clouddoggo": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.Productivity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.productivity.ProductivityList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.Summary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.summary.SummaryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.PinnedTaskList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validTask), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_TASK, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task alice \u003d new TaskBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task bob \u003d new TaskBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(addAliceCommand, addAliceCommandCopy);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(1, addAliceCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, addAliceCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(addAliceCommand, addBobCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public GuiSettings getPopUpWindowGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getRemindersFilePath() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setJelphaBotFilePath(Path jelphaBotFilePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateReminderShowsTask() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public List\u003cTask\u003e getTaskListFromJelphaBot() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public List\u003cReminder\u003e getReminderListFromJelphaBot() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setJelphaBot(ReadOnlyJelphaBot newData) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ProductivityList getProductivityList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public GroupedTaskList getGroupedTaskList(GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public PinnedTaskList getPinnedTaskList() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ViewTaskList getLastShownList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReminder\u003e getFilteredReminderList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredCalendarTaskList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        public void updateFilteredCalendarTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public SummaryList getSummaryList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A Model stub that contains a single task."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A Model stub that always accept the task being added."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        final ArrayList\u003cProductivity\u003e productivityAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        final ArrayList\u003cSummary\u003e summaryAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public void setProductivity(Productivity productivity) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            requireNonNull(productivity);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            productivityAdded.add(productivity);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        public void setSummary(Summary summary) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            requireNonNull(summary);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            summaryAdded.add(summary);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            return new FilteredList\u003cTask\u003e(getJelphaBot().getTaskList());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyJelphaBot getJelphaBot() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            return new JelphaBot();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 45,
      "Clouddoggo": 44,
      "eedenong": 53,
      "-": 174,
      "alam8064": 3
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.BOOK_REPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.CLASS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ERRAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.FINALS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.GROUP_WORK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": " * {@code CalendarCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void execute_calendar_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            new CommandResult(CalendarCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowCalendar();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertCommandSuccess(new CalendarCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_predicateConstructor() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate firstPredicate \u003d new TaskDueWithinDayPredicate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate secondPredicate \u003d new TaskDueWithinDayPredicate(date);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(secondPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(firstPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_yearMonthConstructor() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth first \u003d YearMonth.now();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth second \u003d YearMonth.parse(\"Mar-2020\", DateTimeFormatter.ofPattern(\"MMM-uuuu\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(first);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(second);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(first);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void equals_for_todayConstructors() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate firstPredicate \u003d new TaskDueWithinDayPredicate();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.now().plusMonths(1).plusDays(1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate secondPredicate \u003d new TaskDueWithinDayPredicate(date);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommand \u003d new CalendarCommand(firstPredicate, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarSecondCommand \u003d new CalendarCommand(secondPredicate, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand calendarFirstCommandCopy \u003d new CalendarCommand(firstPredicate, true);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarFirstCommand.equals(calendarFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(calendarFirstCommand.equals(calendarSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void execute_calendarDate_todayTasksFound() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.getFilteredCalendarTaskList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(CLASS.getDateTime().getDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand command \u003d new CalendarCommand(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        expectedModel.updateFilteredCalendarTaskList(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertEquals(Arrays.asList(ASSESSMENT, BOOK_REPORT, CLASS, DATE, ERRAND, FINALS, GROUP_WORK),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alam8064"
        },
        "content": "            model.getFilteredCalendarTaskList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 136
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyJelphaBot_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyJelphaBot_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setJelphaBot(new JelphaBot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 1,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different productivity value -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowProductivity()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different calendar value -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowCalendar()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowDateTaskList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowModuleTaskList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different summary value -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\").isShowSummary()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different productivity value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowProductivity().hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // different calendar value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowCalendar().hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different summary value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowSummary().hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different task list value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\").isShowDateTaskList().hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 16,
      "Clouddoggo": 4,
      "eedenong": 4,
      "-": 53,
      "alam8064": 4
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsCompletedPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskIsIncompletePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.ViewTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DESCRIPTION_ASSIGNMENT \u003d \"Individual Assignment 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DESCRIPTION_TUTORIAL \u003d \"Tutorial 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_STATUS_ASSIGNMENT \u003d \"INCOMPLETE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_STATUS_TUTORIAL \u003d \"COMPLETE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATETIME_ASSIGNMENT \u003d \"Jan-12-2020 22 00\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_DATETIME_TUTORIAL \u003d \"Mar-2-2019 23 59\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MODULE_CODE_ASSIGNMENT \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_MODULE_CODE_TUTORIAL \u003d \"CS2101\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_PRIORITY_ASSIGNMENT \u003d \"1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String VALID_PRIORITY_TUTORIAL \u003d \"-1\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_GRADED \u003d \"graded\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_PROJECT \u003d \"project\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_INDEX \u003d \"1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_HOUR \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ASSESSMENT_REMINDER_DAY \u003d \"1\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_INDEX \u003d \"2\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_HOUR \u003d \"2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_BOOK_REPORT_REMINDER_DAY \u003d \"2\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ASSIGNMENT_REMINDER_INDEX \u003d \"3\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DESCRIPTION_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DESCRIPTION_DESC_TUTORIAL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATETIME_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DATETIME_DESC_TUTORIAL \u003d \" \" + PREFIX_DATETIME + VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MODULE_CODE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MODULE_CODE_DESC_TUTORIAL \u003d \" \" + PREFIX_MODULE_CODE + VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PRIORITY_DESC_ASSIGNMENT \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PRIORITY_DESC_TUTORIAL \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_GRADED \u003d \" \" + PREFIX_TAG + VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String TAG_DESC_PROJECT \u003d \" \" + PREFIX_TAG + VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // \u0027!\u0026\u0027 not allowed in description"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"!Indivual \u0026ssignment 1\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // Inconsistent format + out of range"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_DATETIME_DESC \u003d \" \" + PREFIX_DATETIME + \"22-10/2020 33 59\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // prefix requires at least 2 characters"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String INVALID_MODULE_CODE_DESC \u003d \" \" + PREFIX_MODULE_CODE + \"C2103T\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    // priority only allows 1, 0, -1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"-2\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // empty tag not allowed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"*\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    // reminder day negative"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_REMINDER_DAY \u003d \"-1\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //reminder hour \u003e 24"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_REMINDER_HOUR \u003d \"30\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NEGATIVE_INDEX \u003d \"-1\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TUTORIAL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_ASSIGNMENT \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_ASSIGNMENT)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDateTime(VALID_DATETIME_ASSIGNMENT)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPriority(VALID_PRIORITY_ASSIGNMENT)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_TUTORIAL \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .withDateTime(VALID_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Convenience wrapper to"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)} that"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * - the task list, filtered task list and selected task in"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot expectedJelphaBot \u003d new JelphaBot(actualModel.getJelphaBot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedJelphaBot, actualModel.getJelphaBot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d model.getLastShownList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final String[] splitName \u003d task.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        model.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * {@code targetIndex} in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex, GroupedTaskList.Category category) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d model.getGroupedTaskList(category).get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d task.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(1, model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only tasks that are"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * of the specified {@code status}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public static void showTasksWithSpecifiedStatus(Model model, Status status) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ViewTaskList taskList \u003d model.getLastShownList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //List\u003cTask\u003e taskList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        List\u003cTask\u003e tasksWithPredicate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            Task t \u003d taskList.get(i);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            if (t.getStatus() \u003d\u003d status) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                tasksWithPredicate.add(t);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // for (Task t: taskList) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //     if (t.getStatus() \u003d\u003d status) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //         tasksWithPredicate.add(t);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //     }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Predicate\u003cTask\u003e predicate;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        if (status \u003d\u003d Status.COMPLETE) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(tasksWithPredicate.size(), model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 32,
      "Clouddoggo": 22,
      "eedenong": 36,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToDelete \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskToDelete \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS, taskToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no task."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 24,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.DoneCommand.createDoneTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.tasklist.GroupedTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task taskToMarkDone \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task taskToMarkDone \u003d model.getLastShownList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskToMarkDone);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String expectedMessage \u003d String.format(DoneCommand.MESSAGE_MARK_TASK_COMPLETE_SUCCESS, doneTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel.setTask(taskToMarkDone, doneTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the task list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test // Test against Category.MODULE as tasks that are overdue and completed are not shown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_taskAlreadyCompletedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task firstTask \u003d model.getGroupedTaskList(GroupedTaskList.Category.MODULE).get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(firstTask);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.getGroupedTaskList(GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.setTask(firstTask, doneTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, newModel, DoneCommand.MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test // Test against Category.MODULE as tasks that are overdue and completed are not shown."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_taskAlreadyCompletedFilteredList_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK, GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task taskInList \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            model.getGroupedTaskList(GroupedTaskList.Category.MODULE).get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task doneTask \u003d createDoneTask(taskInList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Model newModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.getGroupedTaskList(GroupedTaskList.Category.MODULE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        newModel.setTask(taskInList, doneTask);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandFailure(doneCommand, newModel, DoneCommand.MESSAGE_TASK_ALREADY_MARKED_COMPLETE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand firstDoneCommand \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand secondDoneCommand \u003d new DoneCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(firstDoneCommand.equals(firstDoneCommand));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same values returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DoneCommand firstDoneCommandCopy \u003d new DoneCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(firstDoneCommand.equals(firstDoneCommandCopy));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different commands returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(firstDoneCommand.equals(secondDoneCommand));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no task."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "eedenong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 137
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getLastShownList().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task lastTask \u003d model.getLastShownList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d taskInList.withDescription(VALID_DESCRIPTION_TUTORIAL).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(taskInFilteredList).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new JelphaBot(model.getJelphaBot()), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // edit task in filtered list into a duplicate in task list"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Task taskInList \u003d model.getJelphaBot().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder(taskInList).build()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * smaller than size of task list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL).build()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(standardCommand, commandWithSameValues);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(standardCommand, new ClearCommand());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* different index -\u003e returns false */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_SECOND_TASK, DESC_ASSIGNMENT));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(standardCommand, new EditCommand(INDEX_FIRST_TASK, DESC_TUTORIAL));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 9,
      "Clouddoggo": 36,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESC_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptorWithSameValues \u003d new EditCommand.EditTaskDescriptor(DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(DESC_ASSIGNMENT, descriptorWithSameValues);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(DESC_ASSIGNMENT, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(null, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(5, DESC_ASSIGNMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, DESC_TUTORIAL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor editedAssignment \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // does not check different status -\u003e (edittaskdescriptor should not be able to change the status of a task)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different dateTime -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAssignment \u003d new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAssignment \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAssignment \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAssignment \u003d new EditTaskDescriptorBuilder(DESC_ASSIGNMENT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(DESC_ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.CLASS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ERRAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.FINALS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model) for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_multipleKeywords_multipleTasksFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Yoga Milk Open\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(Arrays.asList(CLASS, ERRAND, FINALS), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses {@code userInput} into a {@code DescriptionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 15,
      "Clouddoggo": 21,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 1,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedModel"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(ListCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowDateTaskList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedModel"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 15,
      "Clouddoggo": 4,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ProductivityCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.ProductivityCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class ProductivityCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_productivity_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new CommandResult(MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowProductivity();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandSuccess(new ProductivityCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 19
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ShowCompletedCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTasksWithSpecifiedStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.ShowCompletedCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ShowCompletedCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowCompletedCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(expectedModel, Status.COMPLETE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_listIsFilteredByPredicate_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(model, Status.COMPLETE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS).isShowDateTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(new ShowCompletedCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 39
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/ShowIncompleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTasksWithSpecifiedStatus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.ShowIncompleteCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * Contains integration tests (interaction with Model) and unit tests for ShowIncompleteCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class ShowIncompleteCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(expectedModel, Status.INCOMPLETE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_listIsFilteredByPredicate_showsIncompleteTasks() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        showTasksWithSpecifiedStatus(model, Status.INCOMPLETE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_SUCCESS).isShowDateTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(new ShowIncompleteCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 39
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/StartTimerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for {@code StartTimerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class StartTimerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand startTimerCommand \u003d new StartTimerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(startTimerCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand startTimerCommand \u003d new StartTimerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(startTimerCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand startFirstTimerCommand \u003d new StartTimerCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand startSecondTimerCommand \u003d new StartTimerCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(startFirstTimerCommand.equals(startFirstTimerCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StartTimerCommand startFirstCommandCopy \u003d new StartTimerCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(startFirstTimerCommand.equals(startFirstCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(startFirstTimerCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(startFirstTimerCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(startFirstTimerCommand.equals(startSecondTimerCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 81
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/StopTimerCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * RedoCommand) and unit tests for {@code StopTimerCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class StopTimerCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // unable to automate test for success as we require a model that has a running timer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalJelphaBot(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getLastShownList().size() + 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand stopTimerCommand \u003d new StopTimerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(stopTimerCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJelphaBot().getTaskList().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand stopTimerCommand \u003d new StopTimerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertCommandFailure(stopTimerCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand stopFirstTimerCommand \u003d new StopTimerCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand stopSecondTimerCommand \u003d new StopTimerCommand(INDEX_SECOND_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(stopFirstTimerCommand.equals(stopFirstTimerCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        StopTimerCommand stopFirstCommandCopy \u003d new StopTimerCommand(INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(stopFirstTimerCommand.equals(stopFirstCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(stopFirstTimerCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(stopFirstTimerCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different commands -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(stopFirstTimerCommand.equals(stopSecondTimerCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 82
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/commands/SummaryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void execute_summary_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            new CommandResult(SummaryCommand.MESSAGE_SWITCH_PANEL_ACKNOWLEDGEMENT).isShowSummary();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertCommandSuccess(new SummaryCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 22
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PRIORITY_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.PRIORITY_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            PREAMBLE_WHITESPACE + DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DESCRIPTION_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + DATETIME_DESC_ASSIGNMENT + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple datetime - last datetime accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + DATETIME_DESC_ASSIGNMENT + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple module codes - last module code accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + MODULE_CODE_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // multiple priorities - last priority accepted"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_TUTORIAL"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTaskMultipleTags \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_PROJECT, VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTaskMultipleTags)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // no priority - defaults to medium priority"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TUTORIAL).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedTask \u003d new TaskBuilder(TUTORIAL)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           .withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                           .withTags().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_TUTORIAL + DATETIME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_TUTORIAL + PRIORITY_DESC_TUTORIAL,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new AddCommand(expectedTask)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing datetime prefix"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + VALID_DATETIME_ASSIGNMENT"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + VALID_MODULE_CODE_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_ASSIGNMENT + VALID_DATETIME_ASSIGNMENT"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + VALID_MODULE_CODE_ASSIGNMENT,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            expectedMessage"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + INVALID_DATETIME_DESC"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            DateTime.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + INVALID_MODULE_CODE_DESC + PRIORITY_DESC_ASSIGNMENT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ModuleCode.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + INVALID_PRIORITY_DESC + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Priority.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            INVALID_DESCRIPTION_DESC + DATETIME_DESC_ASSIGNMENT + INVALID_MODULE_CODE_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + PRIORITY_DESC_ASSIGNMENT + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_ASSIGNMENT + DATETIME_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + MODULE_CODE_DESC_ASSIGNMENT + PRIORITY_DESC_ASSIGNMENT"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                       + TAG_DESC_PROJECT + TAG_DESC_GRADED,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 122,
      "Clouddoggo": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/CalendarCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.commons.util.DateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import seedu.jelphabot.model.task.predicates.TaskDueWithinDayPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@author alam8064"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    private CalendarCommandParser parser \u003d new CalendarCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void parse_date_returnsCalendarCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"1-Mar-2020\", DateTimeFormatter.ofPattern(\"d-MMM-uuuu\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand expectedCalendarCommand \u003d new CalendarCommand(new TaskDueWithinDayPredicate(date));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertParseSuccess(parser, \"1-Mar-2020\", expectedCalendarCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void parse_yearMonth_returnsCalendarCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth yearMonth \u003d YearMonth.parse(\"Mar-2020\", DateTimeFormatter.ofPattern(\"MMM-uuuu\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand expectedCalendarCommand \u003d new CalendarCommand(yearMonth);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertParseSuccess(parser, \"Mar-2020\", expectedCalendarCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void parse_today_returnsCalendarCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d DateUtil.getDateToday();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarCommand expectedCalendarCommand \u003d new CalendarCommand(new TaskDueWithinDayPredicate(date), true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertParseSuccess(parser, \"today\", expectedCalendarCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidDate_invalidDate_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid Date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM-d-uuuu / d-MMM-uuuu"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"2020-1-May\")); // wrong format: yyyy-d-MMM"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"05-1-2020\")); // wrong format: MM-d-yyyy"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM/d/uuuu / d/MMM/uuuu"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May1/2020\")); // Missing / between month and day"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1May/2020\")); // Missing / between month and day"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May/12020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1/May2020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"May12020\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidDate(\"1May2020\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void constructDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM-d-uuuu\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String stringRep \u003d formatter.format(LocalDate.now());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate fromFormat \u003d LocalDate.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidDate_validDate_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"May-1-2020\")); // MMM-d-yyyy"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"1-May-2020\")); // d-MMM-yyyy"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidDate(\"May/1/2020\")); // MMM/d/yyyy"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidYearMonth_invalidYearMonth_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid YearMonth"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"\")); // empty string"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\" \")); // spaces only"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"2020\")); // year with no month"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM-yyyy / yyyy-MMM / yyyy-MM / yy-MM"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05-2020\")); // wrong format: MM-yyyy"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05-20\")); // wrong format: MM-yy"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // invalid variations of MMM/yyyy / yyyy/MMM / yyyy/MM / yy/MM"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05/2020\")); // wrong format: MM/yyyy"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"05/20\")); // wrong format: MM/yy"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"May2020\")); // Missing / between month and year"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(CalendarCommandParser.isValidYearMonth(\"202005\")); // Missing / between year and month"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void constructYearMonth() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM-uuuu\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String stringRep \u003d formatter.format(YearMonth.now());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        YearMonth fromFormat \u003d YearMonth.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void isValidYearMonth_validYearMonth_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"May-2020\")); // MMM-yyyy"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"2020/May\")); // yyyy/MMM"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"May/2020\")); // MMM/yyyy"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"2020/05\")); // yyyy/MM"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(CalendarCommandParser.isValidYearMonth(\"20-05\")); // yy/MM"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 115
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            parser, \"   \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 2,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * outside of the DoneCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * same path through the DoneCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private DoneCommandParser parser \u003d new DoneCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void parse_validArgs_returnsDoneCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DoneCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 1,
      "eedenong": 31
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DATETIME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_MODULE_CODE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.EditCommand.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"!\" + DESCRIPTION_DESC_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"?\" + DESCRIPTION_DESC_TUTORIAL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid desc"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid datetime"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure(parser, 1 + INVALID_DATETIME_DESC, DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_CODE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Task} being edited,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            \"1\" + TAG_DESC_GRADED + TAG_DESC_PROJECT + TAG_EMPTY,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            \"1\" + TAG_DESC_GRADED + TAG_EMPTY + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \"1\" + TAG_EMPTY + TAG_DESC_GRADED + TAG_DESC_PROJECT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Tag.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"1\" + INVALID_DESCRIPTION_DESC + INVALID_MODULE_CODE_DESC + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            Description.MESSAGE_CONSTRAINTS"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            targetIndex.getOneBased() + TAG_DESC_PROJECT + MODULE_CODE_DESC_TUTORIAL + DESCRIPTION_DESC_TUTORIAL"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + TAG_DESC_GRADED;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .withTags(VALID_TAG_GRADED, VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // method should only test fields corresponding to isSameTask"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // module code"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // datetime"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATETIME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            targetIndex.getOneBased() + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_TUTORIAL + TAG_DESC_GRADED"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + MODULE_CODE_DESC_ASSIGNMENT + TAG_DESC_PROJECT;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .withTags(VALID_TAG_PROJECT, VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \"\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure(parser, userInput, MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_ASSIGNMENT;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand.EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 55,
      "Clouddoggo": 15,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            parser,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            \"     \","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void parse_predicate_returnsFindCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new FindCommand(new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 13,
      "-": 24,
      "alam8064": 1
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/JelphaBotParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_YEARMONTH_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.CalendarCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.ProductivityCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.SummaryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class JelphaBotParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JelphaBotParser parser \u003d new JelphaBotParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test // test against a task with Status \u003d INCOMPLETE as that is the default value upon task creation."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            -\u003e parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased() + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExitCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            -\u003e parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + String.join(\" \", keywords));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new FindCommand(new DescriptionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" date\") instanceof ListCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" module\") instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            -\u003e parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // @@author Clouddoggo"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseCommand_done() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DoneCommand command \u003d (DoneCommand) parser.parseCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            DoneCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(new DoneCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseCommand_summary() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_WORD) instanceof SummaryCommand);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_SHORTCUT_LOWER) instanceof SummaryCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(SummaryCommand.COMMAND_SHORTCUT_UPPER) instanceof SummaryCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            SummaryCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(SummaryCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseCommand_calendar() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_WORD) instanceof CalendarCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_SHORTCUT_LOWER) instanceof CalendarCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_SHORTCUT_UPPER) instanceof CalendarCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_WORD + \" May-2020\") instanceof CalendarCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(CalendarCommand.COMMAND_WORD + \" Apr-1-2020\") instanceof CalendarCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_YEARMONTH_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            CalendarCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                -\u003e parser.parseCommand(CalendarCommand.COMMAND_WORD + \" apr\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseCommand_productivity() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(ProductivityCommand.COMMAND_WORD) instanceof ProductivityCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(ProductivityCommand.COMMAND_SHORTCUT_LOWER) instanceof ProductivityCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(parser.parseCommand(ProductivityCommand.COMMAND_SHORTCUT_UPPER) instanceof ProductivityCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            ProductivityCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(ProductivityCommand.COMMAND_WORD + \" 3\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // @@author"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                -\u003e parser.parseCommand(\"\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            ParseException.class, MESSAGE_UNKNOWN_COMMAND, ()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                -\u003e parser.parseCommand(\"unknownCommand\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        );"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 22,
      "Clouddoggo": 54,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"@ssignment !\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"ASFE1000R\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_DATETIME \u003d \"03/10/-2020 33 79\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#graded\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Assignment 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d \"AS1000\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"Mar-20-2020 11 50\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"graded\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"project\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(\"!\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // description tests"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // module code tests"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleCode(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleCode(INVALID_MODULE_CODE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_validValueWithoutWhitespace_returnsModuleCode() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModuleCode expectedAddress \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseModuleCode(VALID_MODULE_CODE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseModuleCode_validValueWithWhitespace_returnsTrimmedModuleCode() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String moduleCodeWithWhiteSpace \u003d WHITESPACE + VALID_MODULE_CODE + WHITESPACE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModuleCode expectedAddress \u003d new ModuleCode(VALID_MODULE_CODE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseModuleCode(moduleCodeWithWhiteSpace));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // datetime tests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATETIME));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime expectedAddress \u003d new DateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseDateTime(VALID_DATETIME));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parseDateTime_validValueWithWhitespace_returnsTrimmedDateTime() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String dateTimeWithWhiteSpace \u003d WHITESPACE + VALID_DATETIME + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        DateTime expectedAddress \u003d new DateTime(VALID_DATETIME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseDateTime(dateTimeWithWhiteSpace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // tag tests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 17,
      "Clouddoggo": 67,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/StartTimerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StartTimerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * outside of the StartTimerCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * same path through the StartTimerCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class StartTimerCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StartTimerCommandParser parser \u003d new StartTimerCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            parser, \"   \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartTimerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_validArgs_returnsStartTimerCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StartTimerCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StartTimerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 41
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/logic/parser/StopTimerCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.logic.commands.StopTimerCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * outside of the StopTimerCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * same path through the StopTimerCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class StopTimerCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private StopTimerCommandParser parser \u003d new StopTimerCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            parser, \"   \","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopTimerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_validArgs_returnsStopTimerCommand() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseSuccess(parser, \"1\", new StopTimerCommand(INDEX_FIRST_TASK));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, StopTimerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 40
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/JelphaBotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_BOOK_REPORT_REMINDER_DAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalReminders.ASSESSMENT_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.ReminderShowsTask;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.ReminderBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JelphaBotTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final JelphaBot jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), jelphaBot.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jelphaBot.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyJelphaBot_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot newData \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, jelphaBot);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ASSESSMENT, editedAlice);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBotStub newData \u003d new JelphaBotStub(newTasks);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e jelphaBot.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e jelphaBot.hasTask(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(jelphaBot.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_reminderNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(jelphaBot.hasReminder(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasTask_taskInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(jelphaBot.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_reminderInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot.addReminder(ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(jelphaBot.hasReminder(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(jelphaBot.hasTask(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_reminderWithSameIdentityFieldsInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot.addReminder(ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Reminder editedReminder \u003d new ReminderBuilder(ASSESSMENT_REMINDER)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                      .withReminderDay(VALID_BOOK_REPORT_REMINDER_DAY).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(jelphaBot.hasReminder(editedReminder));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e jelphaBot.getTaskList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getReminderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e jelphaBot.getReminderList().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author yapdianhao"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getReminderShowsTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e jelphaBot"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    .getReminderShowsTaskList().remove(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * A stub ReadOnlyJelphaBot whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JelphaBotStub implements ReadOnlyJelphaBot {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cReminder\u003e reminders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cReminderShowsTask\u003e reminderShowsTasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBotStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReminder\u003e getReminderList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return reminders;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReminderShowsTask\u003e getReminderShowsTaskList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return reminderShowsTasks;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setReminders(List\u003cReminder\u003e reminders) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.reminders.setAll(reminders);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 1,
      "Clouddoggo": 6,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalReminders.ASSESSMENT_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.BOOK_REPORT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.predicates.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.JelphaBotBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new JelphaBot(), new JelphaBot(modelManager.getJelphaBot()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBotFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setJelphaBotFilePath(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setJelphaBotFilePath_validPath_setsJelphaBotFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setJelphaBotFilePath(path);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_nullReminder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasReminder(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_reminderNotInJelphaBot_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasReminder(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void hasTask_taskInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasTask(ASSESSMENT));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasReminder_reminderInJelphaBot_returnsTrue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addReminder(ASSESSMENT_REMINDER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasReminder(ASSESSMENT_REMINDER));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFiltererdReminderTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredReminderList().remove(0));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredReminderShowsTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getReminderShowsTaskList().remove(0));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void getFilteredCalendarTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCalendarTaskList().remove(0));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JelphaBot jelphaBot \u003d new JelphaBotBuilder().withTask(ASSESSMENT).withTask(BOOK_REPORT).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot differentJelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        modelManager \u003d new ModelManager(jelphaBot, userPrefs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(jelphaBot, userPrefs);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(modelManager, modelManagerCopy);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(modelManager, modelManager);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, modelManager);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(5, modelManager);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different jelphaBot -\u003e returns false"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(differentJelphaBot, userPrefs));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ASSESSMENT.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        modelManager.updateFilteredTaskList(new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(jelphaBot, userPrefs));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setJelphaBotFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertNotEquals(modelManager, new ModelManager(jelphaBot, differentUserPrefs));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 13,
      "eedenong": 5,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/calendar/CalendarDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alam8064"
        },
        "content": "package seedu.jelphabot.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alam8064"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alam8064"
        },
        "content": "//@@ author alam8064"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alam8064"
        },
        "content": "public class CalendarDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void getMonthNameOf_returnsTrue() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(\"Mar-1-2020\", DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate first \u003d new CalendarDate(localDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String month \u003d CalendarDate.getMonthNameOf(first.getMonth());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(month.equals(\"March\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void getMonthNameOf_returnsFalse() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(\"Mar-1-2020\", DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate first \u003d new CalendarDate(localDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        String month \u003d CalendarDate.getMonthNameOf(first.getMonth());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertFalse(month.equals(\"April\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alam8064"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    public void getFirstDay_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate date \u003d LocalDate.parse(\"Mar-31-2020\", DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        LocalDate firstDate \u003d LocalDate.parse(\"Mar-1-2020\", DateTimeFormatter.ofPattern(\"MMM-d-uuuu\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate calendarDay \u003d new CalendarDate(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        CalendarDate firstCalendarDay \u003d new CalendarDate(firstDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alam8064"
        },
        "content": "        assertTrue(calendarDay.getFirstDay().equals(firstCalendarDay));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alam8064"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alam8064"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alam8064": 38
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/productivity/ProductivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "//@@author Clouddoggo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.productivity;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class ProductivityListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void addProductivity_nullProductivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProductivityList().addProductivity(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    void setProductivity_nullProductivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ProductivityList().setProductivity(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 19
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/summary/SummaryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.summary;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class SummaryListTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void addSummary_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryList().addSummary(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void setSummary_nullArgument_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SummaryList().setSummary(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 19
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/DateTimeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "class DateTimeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DateTime((LocalDateTime) null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        String invalidDateTime \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isValidDateTime_invalidDateTime_returnsFalse() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null datetime"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid DateTime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"Jan-1-2020\")); // date with no time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"11 11\")); // time with no date"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid variations of MMM-d-yyyy HH mm / d-MMM-yyyy"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020-1-May 22 00\")); // wrong format: yyyy-d-MM HH mm"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"05-1-2020 22 00\")); // wrong format: MM-d-yyyy HH mm"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid variations of MMM/d/yyyy HH mm / d/M/y"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May1/2020 22 00\")); // Missing / between month and day"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1May/2020 22 00\")); // Missing / between month and day"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May/12020 22 00\")); // Missing / between month and year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1/May2020 22 00\")); // Missing / between month and year"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May12020 22 00\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"1May2020 22 00\")); // Missing / between month, day and year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        //invalid variations of d MMM yyyy HH mm"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"May 2 2020 22 00\")); // wrong format: MMM d yyyy HH mm"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2020 2 May 22 00\")); // wrong format: yyy d MMM"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(DateTime.isValidDateTime(\"2 05 2020 22 00\")); // wrong format: d MM yyyy"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void construct() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTime.STANDARD_FORMATTER;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String stringRep \u003d formatter.format(LocalDateTime.now());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime fromFormat \u003d LocalDateTime.parse(stringRep, formatter);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isValidDateTime_validDateTime_returnsTrue() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // valid DateTime formats"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"May-1-2020 11 11\")); // MMM-d-yyyy HH mm"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"1-May-2020 11 11\")); // d-MMM-yyyy HH mm"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"May/1/2020 22 00\")); // MMM/d/yyyy HH mm"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"1/1/2020 12 00\")); // d/M/y HH mm"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(DateTime.isValidDateTime(\"2 May 2020 20 20\")); // d MMM yyyy HH mm"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_validDateTime_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May-1-2020 11 11\"), new DateTime(\"May-1-2020 11 11\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1-May-2020 00 00\"), new DateTime(\"May-1-2020 00 00\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May/1/2020 22 00\"), new DateTime(\"May-1-2020 22 00\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1/5/2020 12 00\"), new DateTime(\"May-1-2020 12 00\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1 May 2020 23 59\"), new DateTime(\"May-1-2020 23 59\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void getValue_returnsCorrectDisplayString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May-1-2020 11 11\").getDisplayValue(), \"1-May-2020 11 11\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1-May-2020 00 00\").getDisplayValue(), \"1-May-2020 00 00\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"May/1/2020 22 00\").getDisplayValue(), \"1-May-2020 22 00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1/5/2020 12 00\").getDisplayValue(), \"1-May-2020 12 00\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(new DateTime(\"1 May 2020 23 59\").getDisplayValue(), \"1-May-2020 23 59\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 29,
      "Clouddoggo": 27,
      "eedenong": 26,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertFalse(Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 2,
      "Clouddoggo": 16,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // invalid module codes"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"CS\")); // No numbers only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"2101S\")); // No Faculty code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"A2101\")); // Invalid Faculty code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // valid module codes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2101\")); // No ending tag"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // yes module tag"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"ACC1301\")); // module code has max 3 chars"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 22,
      "Clouddoggo": 3,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "class PriorityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void isValidPriority() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"^\")); // non-alphanumeric characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"high*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"0\")); // number between -1 and 1 inclusive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"-1\")); // number between -1 and 1 inclusive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"HIGH\")); // priority in string representation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"LOW\")); // priority in string representation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 30
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_ASSIGNMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_TUTORIAL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_PROJECT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(ASSIGNMENT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different dateTime  -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder().withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same description, same datetime, same module code, different tag -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                               .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // same description, same datetime, same module code, different tag -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withStatus(VALID_STATUS_ASSIGNMENT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                               .withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(ASSIGNMENT.isSameTask(editedAssignment));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task assignmentCopy \u003d new TaskBuilder(ASSIGNMENT).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(ASSIGNMENT, assignmentCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(ASSIGNMENT, ASSIGNMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, ASSIGNMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(5, ASSIGNMENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, TUTORIAL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDescription(VALID_DESCRIPTION_TUTORIAL).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different dateTime  -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withDateTime(VALID_DATETIME_TUTORIAL).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withModuleCode(VALID_MODULE_CODE_TUTORIAL).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withPriority(VALID_PRIORITY_TUTORIAL).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different status -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withStatus(VALID_STATUS_TUTORIAL).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        editedAssignment \u003d new TaskBuilder(ASSIGNMENT).withTags(VALID_TAG_PROJECT).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(ASSIGNMENT, editedAssignment);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 39,
      "Clouddoggo": 10,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniqueTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniqueTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                               .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(ASSESSMENT));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, ASSESSMENT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, ASSESSMENT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, ASSESSMENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                               .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.setTask(ASSESSMENT, TUTORIAL);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(ASSESSMENT, TUTORIAL));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(ASSESSMENT));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.remove(ASSESSMENT);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Arrays.asList(TUTORIAL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniqueTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(ASSESSMENT, ASSESSMENT);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTasks));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()-\u003e uniqueTaskList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 49,
      "Clouddoggo": 5,
      "-": 116
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        // Keywords match datetime and module code, but does not match description"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"ALI1234\", \"1-May-2020\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withDescription(\"Alice\").withModuleCode(\"ALI1234\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                       .build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 39,
      "Clouddoggo": 2,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskCompletedWithinDayPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskCompletedWithinDayPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private final TaskCompletedWithinDayPredicate testPred \u003d new TaskCompletedWithinDayPredicate("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        new DateTime(\"Apr-30-2020 23 59\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDoneSameDayDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 01\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        task.setDoneTime(new DateTime(\"Apr-30-2020 12 00\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(testPred.test(task));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDoneDifferentDay_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 01\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        task.setDoneTime(new DateTime(\"May-10-2020 00 01\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(testPred.test(task));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 30
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueAfterDatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// @@author yaojiethng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueAfterDatePredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void and() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate condition1 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate condition2 \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d condition1.and(condition2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateAfterDate_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateBeforeDate_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskAfterDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskAfterDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate1 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate2 \u003d new TaskDueAfterDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueAfterDatePredicate predicate3 \u003d new TaskDueAfterDatePredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 54
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueBeforeDatePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// @@author yaojiethng"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueBeforeDatePredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void and() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate condition1 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-30-2020 00 01\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate condition2 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Predicate\u003cTask\u003e predicate \u003d condition1.and(condition2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateAfterDate_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateBeforeDate_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task taskBeforeDate \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(taskBeforeDate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate1 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate2 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueBeforeDatePredicate predicate3 \u003d new TaskDueBeforeDatePredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 54
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayAndIncompletePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "class TaskDueWithinDayAndIncompletePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskSameDateDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"Jun-01-2020 00 01\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate predicate \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Jun-01-2020 22 02\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDateDifferent_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"May-2-2020 00 01\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate pred \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(pred.test(task));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    void test_taskDateSameStatusComplete_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        DateTime dt \u003d new DateTime(\"Jan-01-2020 00 22\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskDueWithinDayAndIncompletePredicate pred \u003d new TaskDueWithinDayAndIncompletePredicate(dt);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Jan-01-2020 00 22\").withStatus(\"COMPLETE\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertFalse(pred.test(task));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 38
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskDueWithinDayPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "//@@author yaojiethng"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class TaskDueWithinDayPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskSameDateDifferentTime_returnsTrue() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"Apr-30-2020 00 02\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(predicate.test(task));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void test_taskDateDifferent_returnsFalse() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate \u003d new TaskDueWithinDayPredicate(new DateTime(\"May-2-2020 00 01\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task task \u003d new TaskBuilder().withDateTime(\"May-1-2020 00 01\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(task));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        task \u003d new TaskBuilder().withDateTime(\"May-3-2020 00 01\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(predicate.test(task));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate1 \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate2 \u003d new TaskDueWithinDayPredicate(new DateTime(\"Apr-30-2020 00 01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(predicate1, predicate1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        TaskDueWithinDayPredicate predicate3 \u003d new TaskDueWithinDayPredicate(new DateTime(\"May-01-2020 00 01\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertNotEquals(predicate2, predicate3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 45
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskIsCompletedPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskIsCompletedPredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(1, predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void test_taskStatusEqual_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // true if the status of the Task is set to COMPLETED"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsCompletedPredicate predicate \u003d new TaskIsCompletedPredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task completedTask \u003d new TaskBuilder().withStatus(\"COMPLETE\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(completedTask));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 36
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/predicates/TaskIsIncompletePredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eedenong"
        },
        "content": "//@@author eedenong"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "eedenong"
        },
        "content": "package seedu.jelphabot.model.task.predicates;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eedenong"
        },
        "content": "public class TaskIsIncompletePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // same object returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertEquals(predicate, predicate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // different types returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(1, predicate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // null returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertNotEquals(null, predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void test_taskStatusEqual_returnsTrue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        // true if the status of the Task is set to INCOMPLETE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        TaskIsIncompletePredicate predicate \u003d new TaskIsIncompletePredicate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        Task incompleteTask \u003d new TaskBuilder().withStatus(\"INCOMPLETE\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertTrue(predicate.test(incompleteTask));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "eedenong": 36
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/tasklist/GroupedByDateTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// @@author yaojiethng"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class GroupedByDateTaskListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final GroupedByDateTaskList dateTaskList \u003d"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        makeEmptyDateTaskList();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static GroupedByDateTaskList makeEmptyDateTaskList() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new GroupedByDateTaskList(new PinnedTaskListTest.PinnedTaskListStub());"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 12
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/tasklist/GroupedByModuleTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// @@author yaojiethng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "class GroupedByModuleTaskListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final GroupedByModuleTaskList moduleTaskList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        makeEmptyModuleTaskList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static GroupedByModuleTaskList makeEmptyModuleTaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return new GroupedByModuleTaskList(new PinnedTaskListTest.PinnedTaskListStub());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_taskWithDifferentModuleCode_newSublistCreated() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_taskWithSameModuleCode_addedToSameSublist() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 1);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task differentTask \u003d new TaskBuilder(ASSESSMENT)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .withDescription(\"A Different Assesment\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(differentTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskToDifferentModuleCode_newSublistCreated() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task differentTask \u003d new TaskBuilder(ASSIGNMENT)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .withDescription(\"A different task\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(differentTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task differentModule \u003d new TaskBuilder(differentTask)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                   .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                   .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.setTask(differentTask, differentModule);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskToSameModuleCode_addedToSameSublist() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task differentTask \u003d new TaskBuilder(ASSESSMENT)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                 .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleTaskList.setTask(ASSESSMENT, differentTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.size(), 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(moduleTaskList.getSublists().size(), 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 84
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/tasklist/GroupedTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalTasks;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "// @@author yaojiethng"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class GroupedTaskListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private final GroupedTaskListStub groupedTaskList \u003d new GroupedTaskListStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    void isEmpty_emptyList_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(groupedTaskList.isEmpty());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTasks(getTypicalTasks());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(groupedTaskList.isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.clear();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(groupedTaskList.isEmpty());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.contains(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertFalse(groupedTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(groupedTaskList.contains(ASSESSMENT));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedTask \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                              .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertTrue(groupedTaskList.contains(editedTask));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.add(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e groupedTaskList.add(ASSESSMENT));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.setTask(null, ASSESSMENT));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.setTask(ASSESSMENT, null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e groupedTaskList.setTask(ASSESSMENT, ASSESSMENT));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTask(ASSESSMENT, ASSESSMENT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new GroupedTaskListStub();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedGroupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(ASSESSMENT).withTags(VALID_TAG_GRADED)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                               .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTask(ASSESSMENT, editedAlice);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d new GroupedTaskListStub();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedGroupedTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTask(ASSESSMENT, TUTORIAL);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d new GroupedTaskListStub();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedGroupedTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e groupedTaskList.setTask(ASSESSMENT, TUTORIAL));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.remove(null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e groupedTaskList.remove(ASSESSMENT));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.remove(ASSESSMENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d new GroupedTaskListStub();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullTaskList_replacesOwnListWithProvidedGroupedTaskList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new GroupedTaskListStub();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedGroupedTaskList.add(ASSIGNMENT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTasks(expectedGroupedTaskList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e groupedTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.add(ASSESSMENT);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(TUTORIAL);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        groupedTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        GroupedTaskList expectedGroupedTaskList \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            new GroupedTaskListStub();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        expectedGroupedTaskList.add(TUTORIAL);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(expectedGroupedTaskList, groupedTaskList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static class GroupedTaskListStub extends GroupedTaskList {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected GroupedTaskListStub() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super(FXCollections.observableArrayList(), new PinnedTaskListTest.PinnedTaskListStub());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public Category getCategory() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public ObservableList\u003cSubgroupTaskList\u003e getSublists() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return subLists;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        protected void setTasks(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            this.tasks.setAll(taskList);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                       || (other instanceof GroupedTaskListStub // instanceof handles nulls"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                               \u0026\u0026 tasks.equals(((GroupedTaskListStub) other).tasks));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 204
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/model/task/tasklist/PinnedTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "package seedu.jelphabot.model.task.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "public class PinnedTaskListTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * A stub PinnedTaskList with empty arguments."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static class PinnedTaskListStub extends PinnedTaskList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         * Constructor for use in testing"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        public PinnedTaskListStub() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            super(FXCollections.emptyObservableList(), Bindings.createIntegerBinding(() -\u003e 0));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 21
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.BOOK_REPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eedenong"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "// no test for status and TimeSpent needed because they are not user-dependent"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"∫3L L1M\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_MODULE_CODE \u003d \"2103T\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#rabbit!!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String INVALID_DATETIME \u003d \"03-19/1999 00:00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d BOOK_REPORT.getDescription().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_MODULE_CODE \u003d BOOK_REPORT.getModuleCode().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final String VALID_DATETIME \u003d BOOK_REPORT.getDateTime().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    private static final String VALID_DONETIME \u003d BOOK_REPORT.getDoneTime().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Priority VALID_PRIORITY \u003d BOOK_REPORT.getPriority();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Status VALID_STATUS \u003d BOOK_REPORT.getStatus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BOOK_REPORT.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                                               .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                                                               .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private static final TimeSpent VALID_TIME_SPENT \u003d new TimeSpent(Duration.ofHours(2));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(BOOK_REPORT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertEquals(BOOK_REPORT, task.toModelType());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            new JsonAdaptedTask(INVALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_DONETIME, VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                VALID_PRIORITY, VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DATETIME,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_DONETIME,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TAGS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TIME_SPENT"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_DONETIME,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                INVALID_MODULE_CODE, VALID_PRIORITY, VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullModuleCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DATETIME,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_DONETIME,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, INVALID_DATETIME, VALID_DONETIME,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                VALID_MODULE_CODE, VALID_PRIORITY, VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullDateTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_DONETIME,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            VALID_TAGS, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        );"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            new JsonAdaptedTask(VALID_DESCRIPTION, VALID_STATUS, VALID_DATETIME, VALID_DONETIME,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eedenong"
        },
        "content": "                VALID_MODULE_CODE, VALID_PRIORITY, invalidTags, VALID_TIME_SPENT"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            );"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    //@@author eedenong"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    public void toModelType_nullDoneTime_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_STATUS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_DATETIME,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            null,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_MODULE_CODE,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_PRIORITY,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_TAGS,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eedenong"
        },
        "content": "            VALID_TIME_SPENT"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        );"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "eedenong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eedenong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "eedenong"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "eedenong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 46,
      "Clouddoggo": 31,
      "eedenong": 32,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonJelphaBotStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.ASSESSMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonJelphaBotStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonJelphaBotStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readJelphaBot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readJelphaBot(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyJelphaBot\u003e readJelphaBot(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonJelphaBotStorage(Paths.get(filePath), testFolder.resolve(\"reminder.json\"))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                   .readJelphaBot(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readJelphaBot(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"notJsonFormatJelphaBot.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void readJelphaBot_invalidTaskJelphaBot_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"invalidTaskJelphaBot.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void readJelphaBot_invalidAndValidTaskJelphaBot_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readJelphaBot(\"invalidAndValidTaskJelphaBot.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveJelphaBot_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempJelphaBot.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path reminderPath \u003d testFolder.resolve(\"TempReminder.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot original \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonJelphaBotStorage jsonJelphaBotStorage \u003d new JsonJelphaBotStorage(filePath, reminderPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyJelphaBot readBack \u003d jsonJelphaBotStorage.readJelphaBot(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addTask(TUTORIAL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removeTask(ASSESSMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonJelphaBotStorage.readJelphaBot(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        original.addTask(ASSESSMENT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonJelphaBotStorage.saveJelphaBot(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonJelphaBotStorage.readJelphaBot().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new JelphaBot(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveJelphaBot_nullJelphaBot_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJelphaBot(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Saves {@code jelphaBot} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private void saveJelphaBot(ReadOnlyJelphaBot jelphaBot, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonJelphaBotStorage(Paths.get(filePath), testFolder.resolve(\"reminder.json\"))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                    .saveJelphaBot(jelphaBot, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveJelphaBot_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveJelphaBot(new JelphaBot(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 7,
      "Clouddoggo": 6,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonSerializableJelphaBotTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableJelphaBotTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableJelphaBotTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksJelphaBot.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskJelphaBot.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskJelphaBot.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JelphaBot jelphaBotFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JelphaBot typicalTasksJelphaBot \u003d TypicalTasks.getTypicalJelphaBot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertEquals(jelphaBotFromFile, typicalTasksJelphaBot);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        JsonSerializableJelphaBot dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableJelphaBot.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableJelphaBot.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 10,
      "Clouddoggo": 11,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        userPrefs.setJelphaBotFilePath(Paths.get(\"jelphabot.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 4,
      "Clouddoggo": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import static seedu.jelphabot.testutil.TypicalTasks.getTypicalJelphaBot;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.ReadOnlyJelphaBot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonJelphaBotStorage jelphaBotStorage \u003d new JsonJelphaBotStorage("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            getTempFilePath(\"ab\"), getTempFilePath(\"reminder\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(jelphaBotStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public void jelphaBotReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonJelphaBotStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonJelphaBotStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot original \u003d getTypicalJelphaBot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveJelphaBot(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyJelphaBot retrieved \u003d storageManager.readJelphaBot().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new JelphaBot(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getJelphaBotFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getJelphaBotFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private EditCommand.EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setDateTime(task.getDateTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setModuleCode(task.getModuleCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Description} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setDescription(new Description(name));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code DateTime} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setDateTime(new DateTime(dateTime));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPriority(Priority.toPriority(priority));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 19,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/JelphaBotBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A utility class to help with building JelphaBot objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code JelphaBot ab \u003d new JelphaBotBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class JelphaBotBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private JelphaBot jelphaBot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBotBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        jelphaBot \u003d new JelphaBot();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBotBuilder(JelphaBot jelphaBot) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.jelphaBot \u003d jelphaBot;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Task} to the {@code JelphaBot} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBotBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        jelphaBot.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public JelphaBot build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return jelphaBot;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Status;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "import seedu.jelphabot.model.task.TimeSpent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Default Task 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_STATUS \u003d \"INCOMPLETE\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"May-1-2020 00 01\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"TES1000\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"0\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Duration DEFAULT_TIME_SPENT \u003d Duration.ZERO;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private DateTime dateTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    private TimeSpent timeSpent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status \u003d Status.toStatus(DEFAULT_STATUS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime \u003d new DateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        priority \u003d Priority.toPriority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpent \u003d new TimeSpent(DEFAULT_TIME_SPENT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        status \u003d taskToCopy.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        dateTime \u003d taskToCopy.getDateTime();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        moduleCode \u003d taskToCopy.getModuleCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        timeSpent \u003d taskToCopy.getTimeSpent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Description} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withDescription(String name) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d new Description(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Status} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBuilder withStatus(String status) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.status \u003d Status.toStatus(status);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code DateTime} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.dateTime \u003d new DateTime(dateTime);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.moduleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Sets the {@code Priority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        this.priority \u003d Priority.toPriority(priority);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * {@code Task} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return new Task(description, status, dateTime, moduleCode, priority, tags, timeSpent);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 55,
      "Clouddoggo": 7,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Does not include status as status cannot be set from a command string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION).append(task.getDescription().fullDescription).append(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_DATETIME).append(task.getDateTime().toString()).append(\" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_MODULE_CODE).append(task.getModuleCode().value).append(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PRIORITY).append(task.getPriority().toString()).append(\" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        task.getTags().forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getDescription()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .ifPresent(name -\u003e sb.append(PREFIX_DESCRIPTION).append(name.toString()).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getDateTime()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .ifPresent(dateTime -\u003e sb.append(PREFIX_DATETIME).append(dateTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getModuleCode()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            .ifPresent(moduleCode -\u003e sb.append(PREFIX_MODULE_CODE).append(moduleCode.toString()).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        descriptor.getPriority()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.toString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 11,
      "Clouddoggo": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * path. Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the middle index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the last index of the task in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns the task in the {@code model}\u0027s task list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "Clouddoggo": 9,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Clouddoggo": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_ASSIGNMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DATETIME_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_MODULE_CODE_TUTORIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_STATUS_ASSIGNMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.jelphabot.logic.commands.CommandTestUtil.VALID_TAG_GRADED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.JelphaBot;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.reminder.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.jelphabot.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task ASSESSMENT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "        new TaskBuilder().withDescription(\"Online Midterm Assessment\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withModuleCode(\"MA1101R\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withPriority(\"HIGH\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "            .withTags(\"school\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task BOOK_REPORT \u003d new TaskBuilder().withDescription(\"Book Report 1\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withStatus(\"COMPLETE\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withModuleCode(\"GES1028\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                               .withTags(\"project\", \"school\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task CLASS \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withDescription(\"Yoga class\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                         .withModuleCode(\"YG1011\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task DATE \u003d new TaskBuilder().withDescription(\"Daniel Meier\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                        .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                        .withModuleCode(\"DT1101\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task ERRAND \u003d new TaskBuilder().withDescription(\"Milk errand\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withModuleCode(\"MYB1101\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "                                          .withDateTime(\"Feb-1-2020 11 00\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task FINALS \u003d new TaskBuilder().withDescription(\"Open book finals\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withModuleCode(\"CS3230\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                          .withTags(\"school\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    public static final Task GROUP_WORK \u003d new TaskBuilder().withDescription(\"Group project meeting\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withDateTime(\"Feb-1-2020 11 00\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withModuleCode(\"CS2103T\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withTags(\"project\", \"school\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Task ASSIGNMENT \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                                              .withDescription(VALID_DESCRIPTION_ASSIGNMENT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                                              .withStatus(VALID_STATUS_ASSIGNMENT)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                                              .withDateTime(VALID_DATETIME_ASSIGNMENT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                              .withModuleCode(VALID_MODULE_CODE_ASSIGNMENT)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                              .withPriority(VALID_PRIORITY_ASSIGNMENT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "                                              .withTags(VALID_TAG_GRADED).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Task TUTORIAL \u003d new TaskBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .withDescription(VALID_DESCRIPTION_TUTORIAL)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .withDateTime(VALID_DATETIME_TUTORIAL)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .withModuleCode(VALID_MODULE_CODE_TUTORIAL)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    private TypicalTasks() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "     * Returns an {@code JelphaBot} with all the typical tasks."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static JelphaBot getTypicalJelphaBot() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JelphaBot ab \u003d new JelphaBot();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Reminder reminder : TypicalReminders.getTypicalReminders()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addReminder(reminder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Clouddoggo"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSESSMENT, BOOK_REPORT, CLASS, DATE, ERRAND, FINALS, GROUP_WORK));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 35,
      "Clouddoggo": 9,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/jelphabot/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.jelphabot.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import static seedu.jelphabot.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "import seedu.jelphabot.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yaojiethng"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link this.VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yaojiethng": 3,
      "-": 111
    }
  }
]
